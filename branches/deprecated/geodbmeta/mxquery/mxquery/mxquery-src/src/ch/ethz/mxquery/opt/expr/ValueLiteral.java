/*   Copyright 2006 - 2009 ETH Zurich 
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */
package ch.ethz.mxquery.opt.expr;

import java.util.List;
import java.util.ArrayList;

import ch.ethz.mxquery.datamodel.xdm.Token;
import ch.ethz.mxquery.exceptions.ErrorCodes;
import ch.ethz.mxquery.exceptions.MXQueryException;
import ch.ethz.mxquery.exceptions.TypeException;
import ch.ethz.mxquery.model.XDMIterator;

/**
 * A value literal is a wrapper for any kind of iterator. The result is materialized with Tokens and returned
 * @author Tim Kraska (<a href="mailto:mail@tim-kraska.de">mail@tim-kraska.de</a>)
 *
 */
public final class ValueLiteral extends Literal {
	
	private Token[] values;
	
	private Token token;
 
	private boolean evaluated=false;
	
	private String columnName=null;
	
	public ValueLiteral(XDMIterator iter) {
		super(iter);
	}
	
	/**
	 * Evaluates and materializes the result
	 * @throws MXQueryException
	 */
	public void evaluate() throws MXQueryException{
		List values = new ArrayList();
		if(!evaluated){
			Token tok = iter.next(); 
			while(tok != Token.END_SEQUENCE_TOKEN){
				values.add(tok);
				tok = iter.next();
			}
			iter.reset();
			evaluated = true;
		}
		Object[] o = values.toArray();
		Token[] t = new Token[o.length];
		for (int i = 0; i < o.length; i++) {
			t[i] = (Token)o[i];
		}
		this.values = t;
	}
	
	/**
	 * Evaluates but expects only on atomic value
	 * @throws MXQueryException
	 */
	public void evaluateExpectOneValue() throws MXQueryException{
		if(!evaluated){ 
			token = iter.next();
			if(iter.next() != Token.END_SEQUENCE_TOKEN){
				throw new TypeException(ErrorCodes.E0004_TYPE_INAPPROPRIATE_TYPE, "More than items given, only one allowed", null);
			}
			iter.reset();
			evaluated = true;
		}
	}
	
	public int evaluate(int dependency){
		throw new RuntimeException("For ValueLiterals this operation is not valid");
	}

	/**
	 * Returns all tokens from the evaluation. 
	 * @return all XDM tokens generated by the evaluation
	 */
	public Token[] getValues() {
		return values;
	}
	
	/**
	 * Normally used together with evaluateExpectOneValue(). Returns the evaluated materialized token
	 * @return the generated token
	 */
	public Token getToken(){
		return token;
	}


	/** 
	 * Returns a name of a childIterator - if the variable depends on one directly;
	 * @return the step name if present
	 */
	public String getColumnName() {
		return columnName;
	}

	public void setColumnName(String name) {
		columnName = name;
	}
	
	public int reset(int level){
		if(isLowerOrEqualDependency(level, dependency)){
			result = RESULT_UNKNOWN;
			evaluated = false;
			token = null;
			values = null;
			return LogicalUnit.RESULT_UNKNOWN;
		}
		return result; 
	}
	
	public int reset(){
		return reset(0);
	}
}

