<?php
/**
 * @version     3.0.0
* @package     com_easysdi_core
* @copyright   Copyright (C) 2012. All rights reserved.
* @license     GNU General Public License version 3 or later; see LICENSE.txt
* @author      EasySDI Community <contact@easysdi.org> - http://www.easysdi.org
*/

defined('_JEXEC') or die( 'Restricted access' );

jimport('joomla.plugin.plugin');

class plgUserEasysdi extends JPlugin {

	function plgUserEasysdi(& $subject, $config)
	{
		parent::__construct($subject, $config);
	}

	/**
	 * Utility method to check if an easysdi account is linked to the Joomla account to delete.
	 *
	 * @param	array		$user		Holds the Joomla user data.
	 *
	 * @return	void
	 * @since	EasySDI 3.0.0
	 */
	function onUserBeforeDelete($user)
	{
		// ensure the user id is really an int
		$user_id = (int)$user['id'];

		if (empty($user_id)) {
			die('invalid userid');
			return false; // if the user id appears invalid then bail out just in case
		}

		$dbo = JFactory::getDBO();
		$dbo->setQuery('SELECT id FROM #__sdi_user WHERE user_id = '. $user_id );
		$id = $dbo->loadResult();
		
		if($id){
			//JError::raiseWarning('SOME_ERROR_CODE', JText::_('PLG_EASYSDIUSER_ERR_CANT_DELETE'));
			//To stop the deletion process, an error must be raised (a warning just let keep going the deletion)
			JError::raiseError(42, JText::_('PLG_EASYSDIUSER_ERR_CANT_DELETE'));
		}
	}

	/**
	 * Utility method to create an easysdi user after a joomla user was created.
	 *
	 * @param	array		$user		Holds the new user data.
	 * @param	boolean		$isnew		True if a new user is stored.
	 * @param	boolean		$success	True if user was succesfully stored in the database.
	 * @param	string		$msg		Message.
	 *
	 * @return	void
	 * @since	EasySDI 3.0.0
	 */
	function onUserAfterSave($user, $isnew, $success, $msg)
	{
		if(!$success) {
			return false; // if the user wasn't stored we don't create an easysdi user
		}

		if(!$isnew) {
			return false; // if the user isn't new we don't create an easysdi user
		}

		// ensure the user id is really an int
		$user_id = (int)$user['id'];

		if (empty($user_id)) {
			die('invalid userid');
			return false; // if the user id appears invalid then bail out just in case
		}

		$dbo = JFactory::getDBO();
		
		//Get default user
		$params = JComponentHelper::getParams('com_easysdi_core');
		$defaultaccount_id = $params->get( 'defaultaccount', null );
		$dbo->setQuery('SELECT * FROM #__sdi_user WHERE user_id = '. $defaultaccount_id );
		$defaultaccount = $dbo->loadObject();
		
		if (!$defaultaccount) {
			return false;
		}
		
		//Create new EasySDI User account
		JTable::addIncludePath(JPATH_ADMINISTRATOR.'/components/com_easysdi_core/tables');
		$newaccount =& JTable::getInstance('user', 'easysdi_coreTable');	

		if (!$newaccount) {
			return false;
		}
		
		$newaccount->user_id = $user_id;
		$newaccount->catid = $defaultaccount->catid;
		$newaccount->params = $defaultaccount->params;
		$newaccount->access = $defaultaccount->access;
		$newaccount->alias = $user['username'];
		$newaccount->notificationrequesttreatment = $defaultaccount->notificationrequesttreatment;
		//Assets are automatically generated by the frameweork 
		
		$result = $newaccount->store();
		
		if (!(isset($result)) || !$result) {
			JError::raiseError(42, JText::sprintf('PLG_EASYSDIUSER_ERR_FAILED_CREATE', $newaccount->getError()));
		}
		
		//Set the state of the new EasySDI account to unpublish
		$newaccount->publish(null, 0);
	}
}
