package org.easysdi.proxy.domain;

// Generated Apr 9, 2013 11:54:41 AM by Hibernate Tools 3.4.0.CR1

import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToOne;

import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.OneToMany;

import org.easysdi.proxy.domain.SdiSysAuthenticationlevel;
import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.hibernate.annotations.Filter;
import org.hibernate.annotations.FilterDef;

/**
 * SdiSysAuthenticationconnector generated by hbm2java
 */
@Entity
@Cache(usage=CacheConcurrencyStrategy.READ_ONLY)
@FilterDef(name="entityState")
@Filter(name = "entityState",condition="state = 1")
public class SdiSysAuthenticationconnector implements java.io.Serializable {

	private static final long serialVersionUID = -7198814298159551697L;
	private Integer Id;
	private Integer Ordering;
	private int State;
	private SdiSysAuthenticationlevel sdiSysAuthenticationlevel;
	private String Value;
	private Set<SdiPhysicalservice> sdiPhysicalservicesForServiceauthenticationId = new HashSet<SdiPhysicalservice>(
			0);
	private Set<SdiPhysicalservice> sdiPhysicalservicesForResourceauthenticationId = new HashSet<SdiPhysicalservice>(
			0);
	private Set<SdiSysServiceconnector> sdiSysServiceconnectors = new HashSet<SdiSysServiceconnector>(
			0);

	public SdiSysAuthenticationconnector() {
	}

	public SdiSysAuthenticationconnector(int State, String Value) {
		this.State = State;
		this.Value = Value;
	}

	public SdiSysAuthenticationconnector(
			Integer Ordering,
			int State,
			SdiSysAuthenticationlevel sdiSysAuthenticationlevel,
			String Value,
			Set<SdiPhysicalservice> sdiPhysicalservicesForServiceauthenticationId,
			Set<SdiPhysicalservice> sdiPhysicalservicesForResourceauthenticationId,
			Set<SdiSysServiceconnector> sdiSysServiceconnectors) {
		this.Ordering = Ordering;
		this.State = State;
		this.sdiSysAuthenticationlevel = sdiSysAuthenticationlevel;
		this.Value = Value;
		this.sdiPhysicalservicesForServiceauthenticationId = sdiPhysicalservicesForServiceauthenticationId;
		this.sdiPhysicalservicesForResourceauthenticationId = sdiPhysicalservicesForResourceauthenticationId;
		this.sdiSysServiceconnectors = sdiSysServiceconnectors;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "id", unique = true, nullable = false)
	public Integer getId() {
		return this.Id;
	}

	public void setId(Integer Id) {
		this.Id = Id;
	}

	@Column(name = "ordering")
	public Integer getOrdering() {
		return this.Ordering;
	}

	public void setOrdering(Integer Ordering) {
		this.Ordering = Ordering;
	}

	@Column(name = "state", nullable = false)
	public int getState() {
		return this.State;
	}

	public void setState(int State) {
		this.State = State;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "authenticationlevel_id", nullable = false)
	public SdiSysAuthenticationlevel getSdiSysAuthenticationlevel() {
		return this.sdiSysAuthenticationlevel;
	}

	public void setSdiSysAuthenticationlevel(
			SdiSysAuthenticationlevel sdiSysAuthenticationlevel) {
		this.sdiSysAuthenticationlevel = sdiSysAuthenticationlevel;
	}

	@Column(name = "value", nullable = false, length = 150)
	public String getValue() {
		return this.Value;
	}

	public void setValue(String Value) {
		this.Value = Value;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "sdiSysAuthenticationconnectorByServiceauthenticationId")
	public Set<SdiPhysicalservice> getSdiPhysicalservicesForServiceauthenticationId() {
		return this.sdiPhysicalservicesForServiceauthenticationId;
	}

	public void setSdiPhysicalservicesForServiceauthenticationId(
			Set<SdiPhysicalservice> sdiPhysicalservicesForServiceauthenticationId) {
		this.sdiPhysicalservicesForServiceauthenticationId = sdiPhysicalservicesForServiceauthenticationId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "sdiSysAuthenticationconnectorByResourceauthenticationId")
	public Set<SdiPhysicalservice> getSdiPhysicalservicesForResourceauthenticationId() {
		return this.sdiPhysicalservicesForResourceauthenticationId;
	}

	public void setSdiPhysicalservicesForResourceauthenticationId(
			Set<SdiPhysicalservice> sdiPhysicalservicesForResourceauthenticationId) {
		this.sdiPhysicalservicesForResourceauthenticationId = sdiPhysicalservicesForResourceauthenticationId;
	}

	@OneToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "SdiSysServiceconAuthenticationcon", joinColumns = {@JoinColumn(name = "authenticationconnector_id")}, inverseJoinColumns = {@JoinColumn (name = "serviceconnector_id")})
	public Set<SdiSysServiceconnector> getSdiSysServiceconnectors() {
		return this.sdiSysServiceconnectors;
	}

	public void setSdiSysServiceconnectors(
			Set<SdiSysServiceconnector> sdiSysServiceconnectors) {
		this.sdiSysServiceconnectors = sdiSysServiceconnectors;
	}

}
