//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-520 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2008.03.07 at 04:52:23 PM CET 
//


package ch.geocat._2003._05.gateway.query;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for operatorType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="operatorType">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="eq"/>
 *     &lt;enumeration value="ne"/>
 *     &lt;enumeration value="lt"/>
 *     &lt;enumeration value="le"/>
 *     &lt;enumeration value="gt"/>
 *     &lt;enumeration value="ge"/>
 *     &lt;enumeration value="like"/>
 *     &lt;enumeration value="not like"/>
 *     &lt;enumeration value="EQUALS"/>
 *     &lt;enumeration value="DISJOINT"/>
 *     &lt;enumeration value="OVERLAPS"/>
 *     &lt;enumeration value="CONTAINS"/>
 *     &lt;enumeration value="WITHIN"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "operatorType")
@XmlEnum
public enum OperatorType {

    @XmlEnumValue("eq")
    EQ("eq"),
    @XmlEnumValue("ne")
    NE("ne"),
    @XmlEnumValue("lt")
    LT("lt"),
    @XmlEnumValue("le")
    LE("le"),
    @XmlEnumValue("gt")
    GT("gt"),
    @XmlEnumValue("ge")
    GE("ge"),
    @XmlEnumValue("like")
    LIKE("like"),
    @XmlEnumValue("not like")
    NOT_LIKE("not like"),
    EQUALS("EQUALS"),
    DISJOINT("DISJOINT"),
    OVERLAPS("OVERLAPS"),
    CONTAINS("CONTAINS"),
    WITHIN("WITHIN");
    private final String value;

    OperatorType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static OperatorType fromValue(String v) {
        for (OperatorType c: OperatorType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
