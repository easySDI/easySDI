
Ext.namespace("gxp");gxp.util={_uniqueNames:{},getOGCExceptionText:function(report){var msg;if(report&&report.exceptions){msg=[];Ext.each(report.exceptions,function(obj){Ext.each(obj.texts,function(text){msg.push(text);});});msg=msg.join("\n");}else{msg="Unknown error (no exception report).";}
return msg;},dispatch:function(functions,complete,scope){complete=complete||Ext.emptyFn;scope=scope||this;var requests=functions.length;var responses=0;var storage={};function respond(){++responses;if(responses===requests){complete.call(scope,storage);}}
function trigger(index){window.setTimeout(function(){functions[index].apply(scope,[respond,storage]);});}
for(var i=0;i<requests;++i){trigger(i);}},uniqueName:function(name,delimiter){delimiter=delimiter||" ";var regEx=new RegExp(delimiter+"[0-9]*$");var key=name.replace(regEx,"");var regExResult=regEx.exec(name);var count=this._uniqueNames[key]!==undefined?this._uniqueNames[key]:(regExResult instanceof Array?Number(regExResult[0]):undefined);var newName=key;if(count!==undefined){count++;newName+=delimiter+count;}
this._uniqueNames[key]=count||0;return newName;},getAbsoluteUrl:function(url){var a;if(Ext.isIE6||Ext.isIE7||Ext.isIE8){a=document.createElement("<a href='"+url+"'/>");a.style.display="none";document.body.appendChild(a);a.href=a.href;document.body.removeChild(a);}else{a=document.createElement("a");a.href=url;}
return a.href;},throttle:(function(){var createThrottled=function(fn,interval,scope){var lastCallTime,elapsed,lastArgs,timer,execute=function(){fn.apply(scope||this,lastArgs);lastCallTime=new Date().getTime();};return function(){elapsed=new Date().getTime()-lastCallTime;lastArgs=arguments;clearTimeout(timer);if(!lastCallTime||(elapsed>=interval)){execute();}else{timer=setTimeout(execute,interval-elapsed);}};};return function(func,interval,scope){return createThrottled(func,interval,scope);};})(),md5:(function(){var MD5_T=[0x00000000,0xd76aa478,0xe8c7b756,0x242070db,0xc1bdceee,0xf57c0faf,0x4787c62a,0xa8304613,0xfd469501,0x698098d8,0x8b44f7af,0xffff5bb1,0x895cd7be,0x6b901122,0xfd987193,0xa679438e,0x49b40821,0xf61e2562,0xc040b340,0x265e5a51,0xe9b6c7aa,0xd62f105d,0x02441453,0xd8a1e681,0xe7d3fbc8,0x21e1cde6,0xc33707d6,0xf4d50d87,0x455a14ed,0xa9e3e905,0xfcefa3f8,0x676f02d9,0x8d2a4c8a,0xfffa3942,0x8771f681,0x6d9d6122,0xfde5380c,0xa4beea44,0x4bdecfa9,0xf6bb4b60,0xbebfbc70,0x289b7ec6,0xeaa127fa,0xd4ef3085,0x04881d05,0xd9d4d039,0xe6db99e5,0x1fa27cf8,0xc4ac5665,0xf4292244,0x432aff97,0xab9423a7,0xfc93a039,0x655b59c3,0x8f0ccc92,0xffeff47d,0x85845dd1,0x6fa87e4f,0xfe2ce6e0,0xa3014314,0x4e0811a1,0xf7537e82,0xbd3af235,0x2ad7d2bb,0xeb86d391];var MD5_round1=[[0,7,1],[1,12,2],[2,17,3],[3,22,4],[4,7,5],[5,12,6],[6,17,7],[7,22,8],[8,7,9],[9,12,10],[10,17,11],[11,22,12],[12,7,13],[13,12,14],[14,17,15],[15,22,16]];var MD5_round2=[[1,5,17],[6,9,18],[11,14,19],[0,20,20],[5,5,21],[10,9,22],[15,14,23],[4,20,24],[9,5,25],[14,9,26],[3,14,27],[8,20,28],[13,5,29],[2,9,30],[7,14,31],[12,20,32]];var MD5_round3=[[5,4,33],[8,11,34],[11,16,35],[14,23,36],[1,4,37],[4,11,38],[7,16,39],[10,23,40],[13,4,41],[0,11,42],[3,16,43],[6,23,44],[9,4,45],[12,11,46],[15,16,47],[2,23,48]];var MD5_round4=[[0,6,49],[7,10,50],[14,15,51],[5,21,52],[12,6,53],[3,10,54],[10,15,55],[1,21,56],[8,6,57],[15,10,58],[6,15,59],[13,21,60],[4,6,61],[11,10,62],[2,15,63],[9,21,64]];function MD5_F(x,y,z){return(x&y)|(~x&z);}
function MD5_G(x,y,z){return(x&z)|(y&~z);}
function MD5_H(x,y,z){return x^y^z;}
function MD5_I(x,y,z){return y^(x|~z);}
var MD5_round=[[MD5_F,MD5_round1],[MD5_G,MD5_round2],[MD5_H,MD5_round3],[MD5_I,MD5_round4]];function MD5_pack(n32){return String.fromCharCode(n32&0xff)+
String.fromCharCode((n32>>>8)&0xff)+
String.fromCharCode((n32>>>16)&0xff)+
String.fromCharCode((n32>>>24)&0xff);}
function MD5_unpack(s4){return s4.charCodeAt(0)|(s4.charCodeAt(1)<<8)|(s4.charCodeAt(2)<<16)|(s4.charCodeAt(3)<<24);}
function MD5_number(n){while(n<0){n+=4294967296;}
while(n>4294967295){n-=4294967296;}
return n;}
function MD5_apply_round(x,s,f,abcd,r){var a,b,c,d;var kk,ss,ii;var t,u;a=abcd[0];b=abcd[1];c=abcd[2];d=abcd[3];kk=r[0];ss=r[1];ii=r[2];u=f(s[b],s[c],s[d]);t=s[a]+u+x[kk]+MD5_T[ii];t=MD5_number(t);t=((t<<ss)|(t>>>(32-ss)));t+=s[b];s[a]=MD5_number(t);}
function MD5_hash(data){var abcd,x,state,s;var len,index,padLen,f,r;var i,j,k;var tmp;state=[0x67452301,0xefcdab89,0x98badcfe,0x10325476];len=data.length;index=len&0x3f;padLen=(index<56)?(56-index):(120-index);if(padLen>0){data+="\x80";for(i=0;i<padLen-1;i++){data+="\x00";}}
data+=MD5_pack(len*8);data+=MD5_pack(0);len+=padLen+8;abcd=[0,1,2,3];x=[16];s=[4];for(k=0;k<len;k+=64){for(i=0,j=k;i<16;i++,j+=4){x[i]=data.charCodeAt(j)|(data.charCodeAt(j+1)<<8)|(data.charCodeAt(j+2)<<16)|(data.charCodeAt(j+3)<<24);}
for(i=0;i<4;i++){s[i]=state[i];}
for(i=0;i<4;i++){f=MD5_round[i][0];r=MD5_round[i][1];for(j=0;j<16;j++){MD5_apply_round(x,s,f,abcd,r[j]);tmp=abcd[0];abcd[0]=abcd[3];abcd[3]=abcd[2];abcd[2]=abcd[1];abcd[1]=tmp;}}
for(i=0;i<4;i++){state[i]+=s[i];state[i]=MD5_number(state[i]);}}
return MD5_pack(state[0])+
MD5_pack(state[1])+
MD5_pack(state[2])+
MD5_pack(state[3]);}
function MD5_hexhash(data){var i,out,c;var bit128;bit128=MD5_hash(data);out="";for(i=0;i<16;i++){c=bit128.charCodeAt(i);out+="0123456789abcdef".charAt((c>>4)&0xf);out+="0123456789abcdef".charAt(c&0xf);}
return out;}
return function(data){return MD5_hexhash(data);};})()};Ext.ns("gxp.util");gxp.util.color=(function(){var exports={};var cssColors={aliceblue:"#f0f8ff",antiquewhite:"#faebd7",aqua:"#00ffff",aquamarine:"#7fffd4",azure:"#f0ffff",beige:"#f5f5dc",bisque:"#ffe4c4",black:"#000000",blanchedalmond:"#ffebcd",blue:"#0000ff",blueviolet:"#8a2be2",brown:"#a52a2a",burlywood:"#deb887",cadetblue:"#5f9ea0",chartreuse:"#7fff00",chocolate:"#d2691e",coral:"#ff7f50",cornflowerblue:"#6495ed",cornsilk:"#fff8dc",crimson:"#dc143c",cyan:"#00ffff",darkblue:"#00008b",darkcyan:"#008b8b",darkgoldenrod:"#b8860b",darkgray:"#a9a9a9",darkgreen:"#006400",darkkhaki:"#bdb76b",darkmagenta:"#8b008b",darkolivegreen:"#556b2f",darkorange:"#ff8c00",darkorchid:"#9932cc",darkred:"#8b0000",darksalmon:"#e9967a",darkseagreen:"#8fbc8f",darkslateblue:"#483d8b",darkslategray:"#2f4f4f",darkturquoise:"#00ced1",darkviolet:"#9400d3",deeppink:"#ff1493",deepskyblue:"#00bfff",dimgray:"#696969",dodgerblue:"#1e90ff",firebrick:"#b22222",floralwhite:"#fffaf0",forestgreen:"#228b22",fuchsia:"#ff00ff",gainsboro:"#dcdcdc",ghostwhite:"#f8f8ff",gold:"#ffd700",goldenrod:"#daa520",gray:"#808080",green:"#008000",greenyellow:"#adff2f",honeydew:"#f0fff0",hotpink:"#ff69b4",indianred:"#cd5c5c",indigo:"#4b0082",ivory:"#fffff0",khaki:"#f0e68c",lavender:"#e6e6fa",lavenderblush:"#fff0f5",lawngreen:"#7cfc00",lemonchiffon:"#fffacd",lightblue:"#add8e6",lightcoral:"#f08080",lightcyan:"#e0ffff",lightgoldenrodyellow:"#fafad2",lightgrey:"#d3d3d3",lightgreen:"#90ee90",lightpink:"#ffb6c1",lightsalmon:"#ffa07a",lightseagreen:"#20b2aa",lightskyblue:"#87cefa",lightslategray:"#778899",lightsteelblue:"#b0c4de",lightyellow:"#ffffe0",lime:"#00ff00",limegreen:"#32cd32",linen:"#faf0e6",magenta:"#ff00ff",maroon:"#800000",mediumaquamarine:"#66cdaa",mediumblue:"#0000cd",mediumorchid:"#ba55d3",mediumpurple:"#9370d8",mediumseagreen:"#3cb371",mediumslateblue:"#7b68ee",mediumspringgreen:"#00fa9a",mediumturquoise:"#48d1cc",mediumvioletred:"#c71585",midnightblue:"#191970",mintcream:"#f5fffa",mistyrose:"#ffe4e1",moccasin:"#ffe4b5",navajowhite:"#ffdead",navy:"#000080",oldlace:"#fdf5e6",olive:"#808000",olivedrab:"#6b8e23",orange:"#ffa500",orangered:"#ff4500",orchid:"#da70d6",palegoldenrod:"#eee8aa",palegreen:"#98fb98",paleturquoise:"#afeeee",palevioletred:"#d87093",papayawhip:"#ffefd5",peachpuff:"#ffdab9",peru:"#cd853f",pink:"#ffc0cb",plum:"#dda0dd",powderblue:"#b0e0e6",purple:"#800080",red:"#ff0000",rosybrown:"#bc8f8f",royalblue:"#4169e1",saddlebrown:"#8b4513",salmon:"#fa8072",sandybrown:"#f4a460",seagreen:"#2e8b57",seashell:"#fff5ee",sienna:"#a0522d",silver:"#c0c0c0",skyblue:"#87ceeb",slateblue:"#6a5acd",slategray:"#708090",snow:"#fffafa",springgreen:"#00ff7f",steelblue:"#4682b4",tan:"#d2b48c",teal:"#008080",thistle:"#d8bfd8",tomato:"#ff6347",turquoise:"#40e0d0",violet:"#ee82ee",wheat:"#f5deb3",white:"#ffffff",whitesmoke:"#f5f5f5",yellow:"#ffff00",yellowgreen:"#9acd32"};var getHexColor=function(color){color=color.toLowerCase();var hex;if(color[0]==="#"){hex=color;}else if(color in cssColors){hex=cssColors[color];}else if(color.match(/^[0-9a-f]{6}$/)){hex="#"+color;}
return hex;};rgb=exports.rgb=function(hex){hex=getHexColor(hex);var rgb;if(hex){rgb=[parseInt(hex.substr(1,2),16),parseInt(hex.substr(3,2),16),parseInt(hex.substr(5,2),16)];}
return rgb;};hex=exports.hex=function(rgb){return["#",Number(rgb[0]).toString(16),Number(rgb[1]).toString(16),Number(rgb[2]).toString(16)].join("");};var rgb2hsl=exports.rgb2hsl=function(rgb){var r=rgb[0]/255,g=rgb[1]/255,b=rgb[2]/255;var max=Math.max(r,g,b),min=Math.min(r,g,b);var h,s,l=(max+min)/2;if(max==min){h=s=0;}else{var d=max-min;s=l>0.5?d/(2-max-min):d/(max+min);switch(max){case r:h=(g-b)/d+(g<b?6:0);break;case g:h=(b-r)/d+2;break;case b:h=(r-g)/d+4;break;}
h/=6;}
return[h,s,l];};function hue2rgb(p,q,t){if(t<0)t+=1;if(t>1)t-=1;if(t<1/6)return p+(q-p)*6*t;if(t<1/2)return q;if(t<2/3)return p+(q-p)*(2/3-t)*6;return p;}
var hsl2rgb=exports.hsl2rgb=function(hsl){var r,g,b;var h=hsl[0],s=hsl[1],l=hsl[2];if(s==0){r=g=b=l;}else{var q=l<0.5?l*(1+s):l+s-l*s;var p=2*l-q;r=hue2rgb(p,q,h+1/3);g=hue2rgb(p,q,h);b=hue2rgb(p,q,h-1/3);}
return[Math.round(r*255),Math.round(g*255),Math.round(b*255)];};return exports;})();Ext.ns("gxp.util");gxp.util.style=(function(){var exports={},hsl2rgb=gxp.util.color.hsl2rgb,rgb2hsl=gxp.util.color.rgb2hsl,rgb=gxp.util.color.rgb,hex=gxp.util.color.hex,colorRegEx=/Color$/,literalRegEx=/(Width|Height|[rR]otation|Opacity|Size)$/;exports.interpolateSymbolizers=function(start,end,fraction){var startSymbolizer,endSymbolizer;var parts=[];for(var i=0,ii=start.length;i<ii;++i){startSymbolizer=start[i];endSymbolizer=end[i];if(!endSymbolizer){throw new Error("Start style and end style must have equal number of parts.");}
parts[i]=interpolateSymbolizer(startSymbolizer,endSymbolizer,fraction);}
return parts;};function interpolateSymbolizer(startSymbolizer,endSymbolizer,fraction){var symbolizer=Ext.apply({},startSymbolizer);Ext.iterate(startSymbolizer,function(key){if(colorRegEx.test(key)){var startHSL=rgb2hsl(rgb(startSymbolizer[key])),endHSL=rgb2hsl(rgb(endSymbolizer[key]));if(startHSL&&endHSL){var hsl=[];for(var i=startHSL.length-1;i>=0;--i){hsl[i]=startHSL[i]+(fraction*(endHSL[i]-startHSL[i]));}
symbolizer[key]=hex(hsl2rgb(hsl));}}else if(literalRegEx.test(key)){var literal=interpolateLiteral(key,startSymbolizer,endSymbolizer,fraction);if(literal!==null){symbolizer[key]=literal;}}});return symbolizer;}
function interpolateLiteral(property,startSymbolizer,endSymbolizer,fraction){var literal=null;if((property in startSymbolizer)&&(property in endSymbolizer)){var startValue=startSymbolizer[property];var endValue=endSymbolizer[property];if(startValue.literal&&endValue.literal){startValue=parseFloat(startValue.text);endValue=parseFloat(endValue.text);literal=startValue+(fraction*(endValue-startValue));}}
return literal;}
return exports;})();Ext.ns("gxp.data");gxp.data.AutoCompleteProxy=Ext.extend(GeoExt.data.ProtocolProxy,{doRequest:function(action,records,params,reader,callback,scope,arg){if(params.query){params.filter=new OpenLayers.Filter.Comparison({type:OpenLayers.Filter.Comparison.LIKE,matchCase:false,property:this.protocol.propertyNames[0],value:'*'+params.query+'*'});delete params.query;}
gxp.data.AutoCompleteProxy.superclass.doRequest.apply(this,arguments);}});Ext.ns("gxp.data");gxp.data.AutoCompleteReader=Ext.extend(GeoExt.data.FeatureReader,{read:function(response){var field=this.meta.uniqueField;this.features=[];for(var i=0,ii=response.features.length;i<ii;++i){var feature=response.features[i];var value=feature.attributes[field];if(this.isDuplicate(field,value)===false){this.features.push(feature);}else{feature.destroy();}}
response.features=this.features;return gxp.data.AutoCompleteReader.superclass.read.apply(this,arguments);},isDuplicate:function(field,value){for(var i=0,ii=this.features.length;i<ii;++i){if(this.features[i].attributes[field]===value){return true;}}
return false;}});Ext.ns("gxp.data");gxp.data.GroupStyleReader=Ext.extend(GeoExt.data.StyleReader,{onMetaChange:function(){gxp.data.GroupStyleReader.superclass.onMetaChange.apply(this,arguments);var recordType=this.recordType,aligning=false;recordType.prototype.set=Ext.createInterceptor(this.recordType.prototype.set,function(name,value){if(!aligning&&name==="filter"){aligning=true;var store=this.store,modified=this.get("filter");BETWEEN=OpenLayers.Filter.Comparison.BETWEEN;if(modified instanceof OpenLayers.Filter&&typeof value==="string"){value=OpenLayers.Format.CQL.prototype.read(value);}
var prop,index=store.indexOf(this);if(index<store.getCount()-1){prop=value.type===BETWEEN?"upperBoundary":"value";if(value[prop]!==modified[prop]){var nextRec=store.getAt(index+1),nextFilter=nextRec.get("filter").clone(),nextProp=nextFilter.type===BETWEEN?"lowerBoundary":"value";nextFilter[nextProp]=value[prop];nextRec.set("filter",nextFilter);}}
if(index>0){prop=value.type===BETWEEN?"lowerBoundary":"value";if(value[prop]!==modified[prop]){var prevRec=store.getAt(index-1),prevFilter=prevRec.get("filter").clone(),prevProp=prevFilter.type===BETWEEN?"upperBoundary":"value";prevFilter[prevProp]=value[prop];prevRec.set("filter",prevFilter);}}
recordType.prototype.set.apply(this,[name,value]);aligning=false;return false;}});}});Ext.ns("gxp.data");gxp.data.RuleGroupReader=Ext.extend(GeoExt.data.StyleReader,{constructor:function(meta,recordType){meta=meta||{fields:["symbolizers","filter",{name:"label",mapping:"title"},{name:"name",convert:function(v,re){var obj;try{obj=Ext.util.JSON.decode(v);}catch(e){obj={group:"Custom",name:v};}
re.group=obj.group;return obj;}},"group","description","elseFilter","minScaleDenominator","maxScaleDenominator"],storeToData:function(store){var rules=GeoExt.data.StyleReader.metaData.rules.storeToData(store),rule,i;for(i=rules.length-1;i>=0;--i){rule=rules[i];if(typeof rule.name==="object"){if(rule.group==="Custom"){rule.name=rule.name.name;}else{rule.name=Ext.util.JSON.encode(rule.name);}
delete rule.group;}}
return rules;}};gxp.data.RuleGroupReader.superclass.constructor.apply(this,[meta,recordType]);}});Ext.ns("gxp.data");gxp.data.FeatureTypeClassifier=Ext.extend(Ext.util.Observable,{store:null,constructor:function(config){gxp.data.FeatureTypeClassifier.superclass.constructor.apply(this,arguments);Ext.apply(this,config);},classify:function(group,method,args,callback,scope){this.store.filter("group",group);var start,end,count=this.store.getCount();if(count>0){start=this.store.getAt(0).get("symbolizers");end=this.store.getAt(count-1).get("symbolizers");}
var targetArgs=[function(store){var fraction,i=0,count=store.getCount(),data;store.each(function(rec){fraction=i/count;var targetRec=this.store.getAt(i);if(!targetRec){targetRec=new this.store.recordType(Ext.apply({},data));this.store.add([targetRec]);}
data=targetRec.data;var filter=rec.get("filter");if(start&&end){targetRec.set("symbolizers",gxp.util.style.interpolateSymbolizers(start,end,fraction));}
targetRec.set("filter",filter);targetRec.set("label",filter.lowerBoundary+"-"+filter.upperBoundary);targetRec.set("group",group);targetRec.set("name",Ext.applyIf({group:group,method:method,args:args},targetRec.get("name")));i++;},this);var rec;while(rec=this.store.getAt(i)){this.store.remove(rec);i++;}
this.store.clearFilter();if(callback){callback.call(scope);}}];targetArgs.unshift.apply(targetArgs,args);this.methods[method].apply(this,targetArgs);},methods:{graduated:function(attribute,classes,method,callback){var process={identifier:"gs:FeatureClassStats",dataInputs:[{identifier:"features",reference:{mimeType:"text/xml; subtype=wfs-collection/1.0",href:"http://geoserver/wfs",method:"POST",body:{wfs:{version:"1.0.0",outputFormat:"GML2",featureType:this.store.reader.raw.layerName}}}},{identifier:"attribute",data:{literalData:{value:attribute}}},{identifier:"classes",data:{literalData:{value:classes}}},{identifier:"method",data:{literalData:{value:method}}}],responseForm:{rawDataOutput:{mimeType:"text/xml",identifier:"results"}}};var store=new Ext.data.XmlStore({record:"Class",fields:[{name:"count",mapping:"@count"},{name:"filter",convert:function(v,re){return new OpenLayers.Filter.Comparison({type:OpenLayers.Filter.Comparison.BETWEEN,property:attribute,lowerBoundary:parseFloat(re.getAttribute("lowerBound")),upperBoundary:parseFloat(re.getAttribute("upperBound"))});}}],proxy:new Ext.data.HttpProxy({url:"/geoserver/wps",method:"POST",xmlData:new OpenLayers.Format.WPSExecute().write(process)}),autoLoad:true,listeners:{load:callback,scope:this}});return store;}}});Ext.namespace("gxp.data");gxp.data.WFSFeatureStore=Ext.extend(GeoExt.data.FeatureStore,{setOgcFilter:function(ogcFilter){this.proxy.setFilter(ogcFilter);},constructor:function(config){if(!(config.proxy&&config.proxy instanceof GeoExt.data.ProtocolProxy)){config.proxy=new gxp.data.WFSProtocolProxy(Ext.apply({srsName:config.srsName,url:config.url,featureType:config.featureType,featureNS:config.featureNS,geometryName:config.geometryName,schema:config.schema,filter:config.ogcFilter,maxFeatures:config.maxFeatures,multi:config.multi},config.proxy));}
if(!config.writer){config.writer=new Ext.data.DataWriter({write:Ext.emptyFn});}
gxp.data.WFSFeatureStore.superclass.constructor.apply(this,arguments);this.reader.extractValues=(function(data,items,length){var obj=this.readRecords([data.feature]);return obj.records[0].data;}).createDelegate(this.reader);this.reader.meta.idProperty="id";this.reader.getId=function(data){return data.id;};}});Ext.namespace("gxp.data");gxp.data.WFSProtocolProxy=Ext.extend(GeoExt.data.ProtocolProxy,{setFilter:function(filter){this.protocol.filter=filter;this.protocol.options.filter=filter;},constructor:function(config){Ext.applyIf(config,{version:"1.1.0"});if(!(this.protocol&&this.protocol instanceof OpenLayers.Protocol)){config.protocol=new OpenLayers.Protocol.WFS(Ext.apply({version:config.version,srsName:config.srsName,url:config.url,featureType:config.featureType,featureNS:config.featureNS,geometryName:config.geometryName,schema:config.schema,filter:config.filter,maxFeatures:config.maxFeatures,multi:config.multi},config.protocol));}
gxp.data.WFSProtocolProxy.superclass.constructor.apply(this,arguments);},doRequest:function(action,records,params,reader,callback,scope,arg){delete params.xaction;if(action===Ext.data.Api.actions.read){this.load(params,reader,callback,scope,arg);}else{if(!(records instanceof Array)){records=[records];}
var features=new Array(records.length),feature;Ext.each(records,function(r,i){features[i]=r.getFeature();feature=features[i];feature.modified=Ext.apply(feature.modified||{},{attributes:Ext.apply((feature.modified&&feature.modified.attributes)||{},r.modified)});},this);var o={action:action,records:records,callback:callback,scope:scope};var options={callback:function(response){this.onProtocolCommit(response,o);},scope:this};Ext.applyIf(options,params);this.protocol.commit(features,options);}},onProtocolCommit:function(response,o){if(response.success()){var features=response.reqFeatures;var state,feature;var destroys=[];var insertIds=response.insertIds||[];var i,len,j=0;for(i=0,len=features.length;i<len;++i){feature=features[i];state=feature.state;if(state){if(state==OpenLayers.State.DELETE){destroys.push(feature);}else if(state==OpenLayers.State.INSERT){feature.fid=insertIds[j];++j;}else if(feature.modified){feature.modified={};}
feature.state=null;}}
for(i=0,len=destroys.length;i<len;++i){feature=destroys[i];feature.layer&&feature.layer.destroyFeatures([feature]);}
len=features.length;var data=new Array(len);var f;for(i=0;i<len;++i){f=features[i];data[i]={id:f.id,feature:f,state:null};var fields=o.records[i].fields;for(var a in f.attributes){if(fields.containsKey(a)){data[i][a]=f.attributes[a];}}}
o.callback.call(o.scope,data,response.priv,true);}else{var request=response.priv;if(request.status>=200&&request.status<300){this.fireEvent("exception",this,"remote",o.action,o,response.error,o.records);}else{this.fireEvent("exception",this,"response",o.action,o,request);}
o.callback.call(o.scope,[],request,false);}}});Ext.namespace("gxp.menu");gxp.menu.LayerMenu=Ext.extend(Ext.menu.Menu,{layerText:"Layer",layers:null,initComponent:function(){gxp.menu.LayerMenu.superclass.initComponent.apply(this,arguments);this.layers.on("add",this.onLayerAdd,this);this.onLayerAdd();},onRender:function(ct,position){gxp.menu.LayerMenu.superclass.onRender.apply(this,arguments);},beforeDestroy:function(){if(this.layers&&this.layers.on){this.layers.un("add",this.onLayerAdd,this);}
delete this.layers;gxp.menu.LayerMenu.superclass.beforeDestroy.apply(this,arguments);},onLayerAdd:function(){this.removeAll();this.add({iconCls:"gxp-layer-visibility",text:this.layerText,canActivate:false},"-");this.layers.each(function(record){var layer=record.getLayer();if(layer.displayInLayerSwitcher){var item=new Ext.menu.CheckItem({text:record.get("title"),checked:record.getLayer().getVisibility(),group:record.get("group"),listeners:{checkchange:function(item,checked){record.getLayer().setVisibility(checked);}}});if(this.items.getCount()>2){this.insert(2,item);}else{this.add(item);}}},this);}});Ext.reg('gxp_layermenu',gxp.menu.LayerMenu);Ext.namespace("gxp");gxp.CrumbPanel=Ext.extend(Ext.TabPanel,{widths:null,enableTabScroll:true,initComponent:function(){gxp.CrumbPanel.superclass.initComponent.apply(this,arguments);this.widths={};},onBeforeAdd:function(cmp){gxp.CrumbPanel.superclass.onBeforeAdd.apply(this,arguments);if(cmp.shortTitle){cmp.title=cmp.shortTitle;}},onAdd:function(cmp){gxp.CrumbPanel.superclass.onAdd.apply(this,arguments);this.setActiveTab(this.items.getCount()-1);cmp.on("hide",this.onCmpHide,this);cmp.getEl().dom.style.display="";},onRemove:function(cmp){gxp.CrumbPanel.superclass.onRemove.apply(this,arguments);cmp.un("hide",this.onCmpHide,this);var previousWidth=this.widths[this.get(this.items.getCount()-1).id];if(previousWidth&&previousWidth<this.getWidth()){this.setWidth(previousWidth);if(this.ownerCt){this.ownerCt.syncSize();}}
cmp.getEl().dom.style.display="none";this.activeTab.doLayout();},onRender:function(cmp){if(!this.initialConfig.itemTpl){this.itemTpl=new Ext.Template('<li class="{cls} gxp-crumb" id="{id}"><div class="gxp-crumb-separator">\u00BB</div>','<a class="x-tab-right" href="#"><em class="x-tab-left">','<span class="x-tab-strip-inner"><span class="x-tab-strip-text {iconCls}">{text}</span></span>','</em></a></li>');}
gxp.CrumbPanel.superclass.onRender.apply(this,arguments);this.getEl().down("div").addClass("gxp-crumbpanel-header");},onCmpHide:function(cmp){var lastIndex=this.items.getCount()-1;if(this.items.indexOf(cmp)===lastIndex){this.setActiveTab(this.get(--lastIndex));}},setActiveTab:function(item){var index;if(Ext.isNumber(item)){index=item;item=this.get(index);}else{index=this.items.indexOf(item);}
if(~index){var cmp,i;for(i=this.items.getCount()-1;i>index;--i){cmp=this.get(i);this.remove(cmp,cmp.closeAction!=="hide");}}
var width=item.initialConfig.minWidth||item.initialConfig.width,previousWidth=this.getWidth();if(width>previousWidth){this.widths[this.get(index-1).id]=previousWidth;this.setWidth(width);if(this.ownerCt){this.ownerCt.syncSize();}}
gxp.CrumbPanel.superclass.setActiveTab.apply(this,arguments);}});Ext.reg('gxp_crumbpanel',gxp.CrumbPanel);Ext.namespace("gxp");gxp.EmbedMapDialog=Ext.extend(Ext.Container,{url:null,url:null,publishMessage:"Your map is ready to be published to the web! Simply copy the following HTML to embed the map in your website:",heightLabel:'Height',widthLabel:'Width',mapSizeLabel:'Map Size',miniSizeLabel:'Mini',smallSizeLabel:'Small',premiumSizeLabel:'Premium',largeSizeLabel:'Large',snippetArea:null,heightField:null,widthField:null,initComponent:function(){Ext.apply(this,this.getConfig());gxp.EmbedMapDialog.superclass.initComponent.call(this);},getIframeHTML:function(){return this.snippetArea.getValue();},updateSnippet:function(){this.snippetArea.setValue('<iframe style="border: none;" height="'+this.heightField.getValue()+'" width="'+this.widthField.getValue()+'" src="'+
gxp.util.getAbsoluteUrl(this.url)+'"></iframe>');if(this.snippetArea.isVisible()===true){this.snippetArea.focus(true,100);}},getConfig:function(){this.snippetArea=new Ext.form.TextArea({height:70,selectOnFocus:true,readOnly:true});var numFieldListeners={"change":this.updateSnippet,"specialkey":function(f,e){e.getKey()==e.ENTER&&this.updateSnippet();},scope:this};this.heightField=new Ext.form.NumberField({width:50,value:400,listeners:numFieldListeners});this.widthField=new Ext.form.NumberField({width:50,value:600,listeners:numFieldListeners});var adjustments=new Ext.Container({layout:"column",defaults:{border:false,xtype:"box"},items:[{autoEl:{cls:"gxp-field-label",html:this.mapSizeLabel}},new Ext.form.ComboBox({editable:false,width:75,store:new Ext.data.SimpleStore({fields:["name","height","width"],data:[[this.miniSizeLabel,100,100],[this.smallSizeLabel,200,300],[this.largeSizeLabel,400,600],[this.premiumSizeLabel,600,800]]}),triggerAction:'all',displayField:'name',value:this.largeSizeLabel,mode:'local',listeners:{"select":function(combo,record,index){this.widthField.setValue(record.get("width"));this.heightField.setValue(record.get("height"));this.updateSnippet();},scope:this}}),{autoEl:{cls:"gxp-field-label",html:this.heightLabel}},this.heightField,{autoEl:{cls:"gxp-field-label",html:this.widthLabel}},this.widthField]});return{border:false,defaults:{border:false,cls:"gxp-export-section",xtype:"container",layout:"fit"},items:[{items:[adjustments]},{xtype:"box",autoEl:{tag:"p",html:this.publishMessage}},{items:[this.snippetArea]}],listeners:{"afterrender":this.updateSnippet,scope:this}};}});Ext.reg('gxp_embedmapdialog',gxp.EmbedMapDialog);Ext.namespace("gxp");gxp.FeatureEditPopup=Ext.extend(GeoExt.Popup,{closeMsgTitle:'Save Changes?',closeMsg:'This feature has unsaved changes. Would you like to save your changes?',deleteMsgTitle:'Delete Feature?',deleteMsg:'Are you sure you want to delete this feature?',editButtonText:'Edit',editButtonTooltip:'Make this feature editable',deleteButtonText:'Delete',deleteButtonTooltip:'Delete this feature',cancelButtonText:'Cancel',cancelButtonTooltip:'Stop editing, discard changes',saveButtonText:'Save',saveButtonTooltip:'Save changes',layout:"fit",feature:null,schema:null,readOnly:false,allowDelete:false,editing:false,editorPluginConfig:{ptype:"gxp_editorgrid"},modifyControl:null,geometry:null,attributes:null,cancelButton:null,saveButton:null,editButton:null,deleteButton:null,initComponent:function(){this.addEvents("startedit","stopedit","beforefeaturemodified","featuremodified","canceledit","cancelclose");var feature=this.feature;if(feature instanceof GeoExt.data.FeatureRecord){feature=this.feature=feature.getFeature();}
if(!this.location){this.location=feature;}
this.anchored=!this.editing;if(!this.title&&feature.fid){this.title=feature.fid;}
this.editButton=new Ext.Button({text:this.editButtonText,tooltip:this.editButtonTooltip,iconCls:"edit",handler:this.startEditing,scope:this});this.deleteButton=new Ext.Button({text:this.deleteButtonText,tooltip:this.deleteButtonTooltip,iconCls:"delete",hidden:!this.allowDelete,handler:this.deleteFeature,scope:this});this.cancelButton=new Ext.Button({text:this.cancelButtonText,tooltip:this.cancelButtonTooltip,iconCls:"cancel",hidden:true,handler:function(){this.stopEditing(false);},scope:this});this.saveButton=new Ext.Button({text:this.saveButtonText,tooltip:this.saveButtonTooltip,iconCls:"save",hidden:true,handler:function(){this.stopEditing(true);},scope:this});this.plugins=[Ext.apply({feature:feature,schema:this.schema,fields:this.fields,excludeFields:this.excludeFields,propertyNames:this.propertyNames,readOnly:this.readOnly},this.editorPluginConfig)];this.bbar=new Ext.Toolbar({hidden:this.readOnly,items:[this.editButton,this.deleteButton,this.saveButton,this.cancelButton]});gxp.FeatureEditPopup.superclass.initComponent.call(this);this.on({"show":function(){if(this.editing){this.editing=null;this.startEditing();}},"beforeclose":function(){if(!this.editing){return;}
if(this.feature.state===this.getDirtyState()){Ext.Msg.show({title:this.closeMsgTitle,msg:this.closeMsg,buttons:Ext.Msg.YESNOCANCEL,fn:function(button){if(button&&button!=="cancel"){this.stopEditing(button==="yes");this.close();}else{this.fireEvent("cancelclose",this);}},scope:this,icon:Ext.MessageBox.QUESTION,animEl:this.getEl()});return false;}else{this.stopEditing(false);}},scope:this});},getDirtyState:function(){return this.feature.state===OpenLayers.State.INSERT?this.feature.state:OpenLayers.State.UPDATE;},startEditing:function(){if(!this.editing){this.fireEvent("startedit",this);this.editing=true;this.anc&&this.unanchorPopup();this.editButton.hide();this.deleteButton.hide();this.saveButton.show();this.cancelButton.show();this.geometry=this.feature.geometry&&this.feature.geometry.clone();this.attributes=Ext.apply({},this.feature.attributes);this.modifyControl=new OpenLayers.Control.ModifyFeature(this.feature.layer,{standalone:true,vertexRenderIntent:this.vertexRenderIntent,handleKeypress:function(evt){OpenLayers.Control.ModifyFeature.prototype.handleKeypress.apply(this,arguments);if(this.feature&&OpenLayers.Util.indexOf(this.deleteCodes,evt.keyCode)!=-1){OpenLayers.Event.stop(evt);}}});this.modifyControl.deleteCodes=[8,46,68];this.feature.layer.map.addControl(this.modifyControl);this.modifyControl.activate();if(this.feature.geometry){this.modifyControl.selectFeature(this.feature);}}},stopEditing:function(save){if(this.editing){this.fireEvent("stopedit",this);this.modifyControl.deactivate();this.modifyControl.destroy();var feature=this.feature;if(feature.state===this.getDirtyState()){if(save===true){this.fireEvent("beforefeaturemodified",this,feature);if(this.schema){var attribute,rec;for(var i in feature.attributes){rec=this.schema.getAt(this.schema.findExact("name",i));attribute=feature.attributes[i];if(attribute instanceof Date){var type=rec.get("type").split(":").pop();feature.attributes[i]=attribute.format(type=="date"?"Y-m-d":"c");}}}
this.fireEvent("featuremodified",this,feature);}else if(feature.state===OpenLayers.State.INSERT){this.editing=false;feature.layer&&feature.layer.destroyFeatures([feature]);this.fireEvent("canceledit",this,null);this.close();}else{var layer=feature.layer;layer.drawFeature(feature,{display:"none"});feature.geometry=this.geometry;feature.attributes=this.attributes;this.setFeatureState(null);layer.drawFeature(feature);this.fireEvent("canceledit",this,feature);}}
if(!this.isDestroyed){this.cancelButton.hide();this.saveButton.hide();this.editButton.show();this.allowDelete&&this.deleteButton.show();}
this.editing=false;}},deleteFeature:function(){Ext.Msg.show({title:this.deleteMsgTitle,msg:this.deleteMsg,buttons:Ext.Msg.YESNO,fn:function(button){if(button==="yes"){this.setFeatureState(OpenLayers.State.DELETE);this.fireEvent("featuremodified",this,this.feature);this.close();}},scope:this,icon:Ext.MessageBox.QUESTION,animEl:this.getEl()});},setFeatureState:function(state){this.feature.state=state;var layer=this.feature.layer;layer&&layer.events.triggerEvent("featuremodified",{feature:this.feature});}});Ext.reg('gxp_featureeditpopup',gxp.FeatureEditPopup);Ext.namespace("gxp");gxp.FilterBuilder=Ext.extend(Ext.Container,{builderTypeNames:["any","all","none","not all"],allowedBuilderTypes:null,allowBlank:false,preComboText:"Match",postComboText:"of the following:",cls:"gxp-filterbuilder",builderType:null,childFilterContainer:null,customizeFilterOnInit:true,addConditionText:"add condition",addGroupText:"add group",removeConditionText:"remove condition",allowGroups:true,initComponent:function(){var defConfig={defaultBuilderType:gxp.FilterBuilder.ANY_OF};Ext.applyIf(this,defConfig);if(this.customizeFilterOnInit){this.filter=this.customizeFilter(this.filter);}
this.builderType=this.getBuilderType();this.items=[{xtype:"container",layout:"form",ref:"form",defaults:{anchor:"100%"},hideLabels:true,items:[{xtype:"compositefield",style:"padding-left: 2px",items:[{xtype:"label",style:"padding-top: 0.3em",text:this.preComboText},this.createBuilderTypeCombo(),{xtype:"label",style:"padding-top: 0.3em",text:this.postComboText}]},this.createChildFiltersPanel(),{xtype:"toolbar",items:this.createToolBar()}]}];this.addEvents("change");gxp.FilterBuilder.superclass.initComponent.call(this);},createToolBar:function(){var bar=[{text:this.addConditionText,iconCls:"add",handler:function(){this.addCondition();},scope:this}];if(this.allowGroups){bar.push({text:this.addGroupText,iconCls:"add",handler:function(){this.addCondition(true);},scope:this});}
return bar;},getFilter:function(){var filter;if(this.filter){filter=this.filter.clone();if(filter instanceof OpenLayers.Filter.Logical){filter=this.cleanFilter(filter);}}
return filter;},cleanFilter:function(filter){if(filter instanceof OpenLayers.Filter.Logical){if(filter.type!==OpenLayers.Filter.Logical.NOT&&filter.filters.length===1){filter=this.cleanFilter(filter.filters[0]);}else{var child;for(var i=0,len=filter.filters.length;i<len;++i){child=filter.filters[i];if(child instanceof OpenLayers.Filter.Logical){child=this.cleanFilter(child);if(child){filter.filters[i]=child;}else{filter=child;break;}}else if(!child||child.type===null||child.property===null||child[filter.type===OpenLayers.Filter.Comparison.BETWEEN?"lowerBoundary":"value"]===null){filter=false;break;}}}}else{if(!filter||filter.type===null||filter.property===null||filter[filter.type===OpenLayers.Filter.Comparison.BETWEEN?"lowerBoundary":"value"]===null){filter=false;}}
return filter;},customizeFilter:function(filter){if(!filter){filter=this.wrapFilter(this.createDefaultFilter());}else{filter=this.cleanFilter(filter);var child,i,len;switch(filter.type){case OpenLayers.Filter.Logical.AND:case OpenLayers.Filter.Logical.OR:if(!filter.filters||filter.filters.length===0){filter.filters=[this.createDefaultFilter()];}else{for(i=0,len=filter.filters.length;i<len;++i){child=filter.filters[i];if(child instanceof OpenLayers.Filter.Logical){filter.filters[i]=this.customizeFilter(child);}}}
filter=new OpenLayers.Filter.Logical({type:OpenLayers.Filter.Logical.OR,filters:[filter]});break;case OpenLayers.Filter.Logical.NOT:if(!filter.filters||filter.filters.length===0){filter.filters=[new OpenLayers.Filter.Logical({type:OpenLayers.Filter.Logical.OR,filters:[this.createDefaultFilter()]})];}else{child=filter.filters[0];if(child instanceof OpenLayers.Filter.Logical){if(child.type!==OpenLayers.Filter.Logical.NOT){var grandchild;for(i=0,len=child.filters.length;i<len;++i){grandchild=child.filters[i];if(grandchild instanceof OpenLayers.Filter.Logical){child.filters[i]=this.customizeFilter(grandchild);}}}else{if(child.filters&&child.filters.length>0){filter=this.customizeFilter(child.filters[0]);}else{filter=this.wrapFilter(this.createDefaultFilter());}}}else{var type;if(this.defaultBuilderType===gxp.FilterBuilder.NOT_ALL_OF){type=OpenLayers.Filter.Logical.AND;}else{type=OpenLayers.Filter.Logical.OR;}
filter.filters=[new OpenLayers.Filter.Logical({type:type,filters:[child]})];}}
break;default:filter=this.wrapFilter(filter);break;}}
return filter;},createDefaultFilter:function(){return new OpenLayers.Filter.Comparison();},wrapFilter:function(filter){var type;if(this.defaultBuilderType===gxp.FilterBuilder.ALL_OF){type=OpenLayers.Filter.Logical.AND;}else{type=OpenLayers.Filter.Logical.OR;}
return new OpenLayers.Filter.Logical({type:OpenLayers.Filter.Logical.OR,filters:[new OpenLayers.Filter.Logical({type:type,filters:[filter]})]});},addCondition:function(group){var filter,type;if(group){type="gxp_filterbuilder";filter=this.wrapFilter(this.createDefaultFilter());}else{type="gxp_filterfield";filter=this.createDefaultFilter();}
var newChild=this.newRow({xtype:type,filter:filter,columnWidth:1,attributes:this.attributes,allowBlank:group?undefined:this.allowBlank,customizeFilterOnInit:group&&false,listeners:{change:function(){this.fireEvent("change",this);},scope:this}});this.childFilterContainer.add(newChild);this.filter.filters[0].filters.push(filter);this.childFilterContainer.doLayout();},removeCondition:function(item,filter){var parent=this.filter.filters[0].filters;if(parent.length>0){parent.remove(filter);this.childFilterContainer.remove(item,true);}
if(parent.length===0){this.addCondition();}
this.fireEvent("change",this);},createBuilderTypeCombo:function(){var types=this.allowedBuilderTypes||[gxp.FilterBuilder.ANY_OF,gxp.FilterBuilder.ALL_OF,gxp.FilterBuilder.NONE_OF];var numTypes=types.length;var data=new Array(numTypes);var type;for(var i=0;i<numTypes;++i){type=types[i];data[i]=[type,this.builderTypeNames[type]];}
return{xtype:"combo",store:new Ext.data.SimpleStore({data:data,fields:["value","name"]}),value:this.builderType,ref:"../../builderTypeCombo",displayField:"name",valueField:"value",triggerAction:"all",mode:"local",listeners:{select:function(combo,record){this.changeBuilderType(record.get("value"));this.fireEvent("change",this);},scope:this},width:60};},changeBuilderType:function(type){if(type!==this.builderType){this.builderType=type;var child=this.filter.filters[0];switch(type){case gxp.FilterBuilder.ANY_OF:this.filter.type=OpenLayers.Filter.Logical.OR;child.type=OpenLayers.Filter.Logical.OR;break;case gxp.FilterBuilder.ALL_OF:this.filter.type=OpenLayers.Filter.Logical.OR;child.type=OpenLayers.Filter.Logical.AND;break;case gxp.FilterBuilder.NONE_OF:this.filter.type=OpenLayers.Filter.Logical.NOT;child.type=OpenLayers.Filter.Logical.OR;break;case gxp.FilterBuilder.NOT_ALL_OF:this.filter.type=OpenLayers.Filter.Logical.NOT;child.type=OpenLayers.Filter.Logical.AND;break;}}},createChildFiltersPanel:function(){this.childFilterContainer=new Ext.Container();var grandchildren=this.filter.filters[0].filters;var grandchild;for(var i=0,len=grandchildren.length;i<len;++i){grandchild=grandchildren[i];var fieldCfg={xtype:"gxp_filterfield",allowBlank:this.allowBlank,columnWidth:1,filter:grandchild,attributes:this.attributes,listeners:{change:function(){this.fireEvent("change",this);},scope:this}};var containerCfg=Ext.applyIf(grandchild instanceof OpenLayers.Filter.Logical?{xtype:"gxp_filterbuilder"}:{xtype:"container",layout:"form",hideLabels:true,items:fieldCfg},fieldCfg);this.childFilterContainer.add(this.newRow(containerCfg));}
return this.childFilterContainer;},newRow:function(filterContainer){var ct=new Ext.Container({layout:"column",items:[{xtype:"container",width:28,height:26,style:"padding-left: 2px",items:{xtype:"button",tooltip:this.removeConditionText,iconCls:"delete",handler:function(btn){this.removeCondition(ct,filterContainer.filter);},scope:this}},filterContainer]});return ct;},getBuilderType:function(){var type=this.defaultBuilderType;if(this.filter){var child=this.filter.filters[0];if(this.filter.type===OpenLayers.Filter.Logical.NOT){switch(child.type){case OpenLayers.Filter.Logical.OR:type=gxp.FilterBuilder.NONE_OF;break;case OpenLayers.Filter.Logical.AND:type=gxp.FilterBuilder.NOT_ALL_OF;break;}}else{switch(child.type){case OpenLayers.Filter.Logical.OR:type=gxp.FilterBuilder.ANY_OF;break;case OpenLayers.Filter.Logical.AND:type=gxp.FilterBuilder.ALL_OF;break;}}}
return type;},setFilter:function(filter){this.filter=this.customizeFilter(filter);this.changeBuilderType(this.getBuilderType());this.builderTypeCombo.setValue(this.builderType);this.form.remove(this.childFilterContainer);this.form.insert(1,this.createChildFiltersPanel());this.form.doLayout();this.fireEvent("change",this);}});gxp.FilterBuilder.ANY_OF=0;gxp.FilterBuilder.ALL_OF=1;gxp.FilterBuilder.NONE_OF=2;gxp.FilterBuilder.NOT_ALL_OF=3;Ext.reg('gxp_filterbuilder',gxp.FilterBuilder);Ext.namespace("gxp");gxp.QueryPanel=Ext.extend(Ext.Panel,{layout:"form",spatialQuery:true,attributeQuery:true,selectedLayer:null,featureStore:null,attributeStore:null,geometryType:null,geometryName:null,queryByLocationText:"Query by location",currentTextText:"Current extent",queryByAttributesText:"Query by attributes",layerText:"Layer",initComponent:function(){this.addEvents("ready","beforelayerchange","layerchange","beforequery","query","storeload");this.mapExtentField=new Ext.form.TextField({fieldLabel:this.currentTextText,readOnly:true,anchor:"100%",value:this.getFormattedMapExtent()});this.map.events.on({moveend:this.updateMapExtent,scope:this});this.createFilterBuilder(this.layerStore.getAt(0));this.items=[{xtype:"combo",name:"layer",fieldLabel:this.layerText,store:this.layerStore,value:this.layerStore.getAt(0).get("name"),displayField:"title",valueField:"name",mode:"local",allowBlank:true,editable:false,triggerAction:"all",listeners:{beforeselect:function(combo,record,index){return this.fireEvent("beforelayerchange",this,record);},select:function(combo,record,index){this.createFilterBuilder(record);},scope:this}},{xtype:"fieldset",title:this.queryByLocationText,checkboxToggle:true,collapsed:!this.spatialQuery,anchor:"95%",items:[this.mapExtentField],listeners:{collapse:function(){this.spatialQuery=false;},expand:function(){this.spatialQuery=true;},scope:this}},{xtype:"fieldset",title:this.queryByAttributesText,checkboxToggle:true,collapsed:!this.attributeQuery,anchor:"95%",items:[this.filterBuilder],listeners:{collapse:function(){this.attributeQuery=false;},expand:function(){this.attributeQuery=true;},scope:this}}];gxp.QueryPanel.superclass.initComponent.apply(this,arguments);},createFilterBuilder:function(record){this.selectedLayer=record;var owner=this.filterBuilder&&this.filterBuilder.ownerCt;if(owner){owner.remove(this.filterBuilder,true);}
this.attributeStore=new GeoExt.data.AttributeStore({url:record.get("schema"),listeners:{load:function(store){this.geometryName=null;store.filterBy(function(r){var match=/gml:((Multi)?(Point|Line|Polygon|Curve|Surface|Geometry)).*/.exec(r.get("type"));if(match&&!this.geometryName){this.geometryName=r.get("name");this.geometryType=match[1];this.fireEvent("layerchange",this,record);}
return!match;},this);this.createFeatureStore();},scope:this},autoLoad:true});this.filterBuilder=new gxp.FilterBuilder({attributes:this.attributeStore,allowGroups:false});if(owner){owner.add(this.filterBuilder);owner.doLayout();}},getFormattedMapExtent:function(){return this.map&&this.map.getExtent()&&this.map.getExtent().toBBOX().replace(/\.(\d)\d*/g,".$1").replace(/,/g,", ");},updateMapExtent:function(){this.mapExtentField.setValue(this.getFormattedMapExtent());},getFilter:function(){var attributeFilter=this.attributeQuery&&this.filterBuilder.getFilter();var spatialFilter=this.spatialQuery&&new OpenLayers.Filter.Spatial({type:OpenLayers.Filter.Spatial.BBOX,value:this.map.getExtent()});var filter;if(attributeFilter&&spatialFilter){filter=new OpenLayers.Filter.Logical({type:OpenLayers.Filter.Logical.AND,filters:[spatialFilter,attributeFilter]});}else{filter=attributeFilter||spatialFilter;}
return filter;},getFieldType:function(attrType){return({"xsd:boolean":"boolean","xsd:int":"int","xsd:integer":"int","xsd:short":"int","xsd:long":"int","xsd:date":"date","xsd:string":"string","xsd:float":"float","xsd:double":"float"})[attrType];},createFeatureStore:function(){var fields=[];this.attributeStore.each(function(record){fields.push({name:record.get("name"),type:this.getFieldType(record.get("type"))});},this);var layer=this.selectedLayer;this.featureStore=new gxp.data.WFSFeatureStore({fields:fields,srsName:this.map.getProjection(),url:layer.get("url"),featureType:layer.get("name"),featureNS:layer.get("namespace"),geometryName:this.geometryName,schema:layer.get("schema"),maxFeatures:this.maxFeatures,autoLoad:false,autoSave:false,listeners:{load:function(store,records,options){this.fireEvent("storeload",this,store,records,options);},scope:this}});this.fireEvent("ready",this,this.featureStore);},query:function(){if(this.featureStore){if(this.fireEvent("beforequery",this)!==false){this.featureStore.setOgcFilter(this.getFilter());this.featureStore.load();this.fireEvent("query",this,this.featureStore);}}},beforeDestroy:function(){if(this.map&&this.map.events){this.map.events.un({moveend:this.updateMapExtent,scope:this});}
gxp.QueryPanel.superclass.beforeDestroy.apply(this,arguments);}});Ext.reg('gxp_querypanel',gxp.QueryPanel);Ext.namespace("gxp");gxp.StylePropertiesDialog=Ext.extend(Ext.Container,{titleText:"General",nameFieldText:"Name",titleFieldText:"Title",abstractFieldText:"Abstract",userStyle:null,initComponent:function(){var listeners={"change":function(field,value){this.userStyle[field.name]=value;this.fireEvent("change",this,this.userStyle);},scope:this};var defConfig={layout:"form",items:[{xtype:"fieldset",title:this.titleText,labelWidth:75,defaults:{xtype:"textfield",anchor:"100%",listeners:listeners},items:[{xtype:this.initialConfig.nameEditable?"textfield":"displayfield",fieldLabel:this.nameFieldText,name:"name",value:this.userStyle.name,maskRe:/[A-Za-z0-9_]/},{fieldLabel:this.titleFieldText,name:"title",value:this.userStyle.title},{xtype:"textarea",fieldLabel:this.abstractFieldText,name:"description",value:this.userStyle.description}]}]};Ext.applyIf(this,defConfig);this.addEvents("change");gxp.StylePropertiesDialog.superclass.initComponent.apply(this,arguments);}});Ext.reg('gxp_stylepropertiesdialog',gxp.StylePropertiesDialog);Ext.namespace("gxp");gxp.WMSLayerPanel=Ext.extend(Ext.TabPanel,{layerRecord:null,source:null,styling:true,sameOriginStyling:true,rasterStyling:false,transparent:null,editableStyles:false,activeTab:0,border:false,imageFormats:/png|gif|jpe?g/i,aboutText:"About",titleText:"Title",nameText:"Name",descriptionText:"Description",displayText:"Display",opacityText:"Opacity",formatText:"Tile format",infoFormatText:"Info format",infoFormatEmptyText:"Select a format",transparentText:"Transparent",cacheText:"Caching",cacheFieldText:"Use cached tiles",stylesText:"Styles",displayOptionsText:"Display options",queryText:"Limit with filters",scaleText:"Limit by scale",minScaleText:"Min scale",maxScaleText:"Max scale",switchToFilterBuilderText:"Switch back to filter builder",cqlPrefixText:"or ",cqlText:"use CQL filter instead",initComponent:function(){this.cqlFormat=new OpenLayers.Format.CQL();if(this.source){this.source.getSchema(this.layerRecord,function(attributeStore){if(attributeStore!==false){var filter=this.layerRecord.getLayer().params.CQL_FILTER;this.filterBuilder=new gxp.FilterBuilder({filter:filter&&this.cqlFormat.read(filter),allowGroups:false,listeners:{afterrender:function(){this.filterBuilder.cascade(function(item){if(item.getXType()==="toolbar"){item.addText(this.cqlPrefixText);item.addButton({text:this.cqlText,handler:this.switchToCQL,scope:this});}},this);},change:function(builder){var filter=builder.getFilter();var cql=null;if(filter!==false){cql=this.cqlFormat.write(filter);}
this.layerRecord.getLayer().mergeNewParams({CQL_FILTER:cql});},scope:this},attributes:attributeStore});this.filterFieldset.add(this.filterBuilder);this.filterFieldset.doLayout();}},this);}
this.addEvents("change");this.items=[this.createAboutPanel(),this.createDisplayPanel()];if(this.styling&&gxp.WMSStylesDialog&&this.layerRecord.get("styles")){var url=this.layerRecord.get("restUrl");if(!url){url=(this.source||this.layerRecord.get("layer")).url.split("?").shift().replace(/\/(wms|ows)\/?$/,"/rest");}
if(this.sameOriginStyling){this.editableStyles=url.charAt(0)==="/";}else{this.editableStyles=true;}
this.items.push(this.createStylesPanel(url));}
gxp.WMSLayerPanel.superclass.initComponent.call(this);},switchToCQL:function(){var filter=this.filterBuilder.getFilter();var CQL="";if(filter!==false){CQL=this.cqlFormat.write(filter);}
this.filterBuilder.hide();this.cqlField.setValue(CQL);this.cqlField.show();this.cqlToolbar.show();},switchToFilterBuilder:function(){var filter=null;try{filter=this.cqlFormat.read(this.cqlField.getValue());}catch(e){}
this.cqlField.hide();this.cqlToolbar.hide();this.filterBuilder.show();if(filter!==null){this.filterBuilder.setFilter(filter);}},createStylesPanel:function(url){var config=gxp.WMSStylesDialog.createGeoServerStylerConfig(this.layerRecord,url);if(this.rasterStyling===true){config.plugins.push({ptype:"gxp_wmsrasterstylesdialog"});}
var ownerCt=this.ownerCt;if(!(ownerCt.ownerCt instanceof Ext.Window)){config.dialogCls=Ext.Panel;config.showDlg=function(dlg){dlg.layout="fit";dlg.autoHeight=false;ownerCt.add(dlg);};}
return Ext.apply(config,{title:this.stylesText,style:"padding: 10px",editable:false,listeners:Ext.apply(config.listeners,{"beforerender":{fn:function(cmp){var render=!this.editableStyles;if(!render){if(typeof this.authorized=='boolean'){cmp.editable=this.authorized;cmp.ownerCt.doLayout();}else{Ext.Ajax.request({method:"PUT",url:url+"/styles",callback:function(options,success,response){cmp.editable=(response.status==405);cmp.ownerCt.doLayout();}});}}
return render;},scope:this,single:true}})});},createAboutPanel:function(){return{title:this.aboutText,bodyStyle:{"padding":"10px"},defaults:{border:false},items:[{layout:"form",labelWidth:70,items:[{xtype:"textfield",fieldLabel:this.titleText,anchor:"99%",value:this.layerRecord.get("title"),listeners:{change:function(field){this.layerRecord.set("title",field.getValue());this.layerRecord.commit();this.fireEvent("change");},scope:this}},{xtype:"textfield",fieldLabel:this.nameText,anchor:"99%",value:this.layerRecord.get("name"),readOnly:true}]},{layout:"form",labelAlign:"top",items:[{xtype:"textarea",fieldLabel:this.descriptionText,grow:true,growMax:150,anchor:"99%",value:this.layerRecord.get("abstract"),readOnly:true}]}]};},onFormatChange:function(combo){var layer=this.layerRecord.getLayer();var format=combo.getValue();layer.mergeNewParams({format:format});var cb=this.transparentCb;if(format=="image/jpeg"){this.transparent=cb.getValue();cb.setValue(false);}else if(this.transparent!==null){cb.setValue(this.transparent);this.transparent=null;}
cb.setDisabled(format=="image/jpeg");this.fireEvent("change");},addScaleOptions:function(layer,options){layer.alwaysInRange=null;layer.addOptions(options);layer.display();layer.redraw();},createDisplayPanel:function(){var record=this.layerRecord;var layer=record.getLayer();var opacity=layer.opacity;if(opacity==null){opacity=1;}
var formats=[];var currentFormat=layer.params["FORMAT"].toLowerCase();Ext.each(record.get("formats"),function(format){if(this.imageFormats.test(format)){formats.push(format.toLowerCase());}},this);if(formats.indexOf(currentFormat)===-1){formats.push(currentFormat);}
var transparent=layer.params["TRANSPARENT"];transparent=(transparent==="true"||transparent===true);return{title:this.displayText,layout:'form',bodyStyle:{"padding":"10px"},defaults:{labelWidth:70},items:[{xtype:"fieldset",title:this.displayOptionsText,items:[{xtype:"gx_opacityslider",name:"opacity",anchor:"99%",isFormField:true,fieldLabel:this.opacityText,listeners:{change:function(){this.fireEvent("change");},scope:this},layer:this.layerRecord},{xtype:"compositefield",fieldLabel:this.formatText,anchor:"99%",items:[{xtype:"combo",width:90,listWidth:150,store:formats,value:currentFormat,mode:"local",triggerAction:"all",editable:false,listeners:{select:this.onFormatChange,scope:this}},{xtype:"checkbox",ref:'../../../transparentCb',checked:transparent,listeners:{check:function(checkbox,checked){layer.mergeNewParams({transparent:checked?"true":"false"});this.fireEvent("change");},scope:this}},{xtype:"label",cls:"gxp-layerproperties-label",text:this.transparentText}]},{xtype:"compositefield",anchor:"99%",hidden:this.layerRecord.get("layer").params.TILED==null,fieldLabel:this.cacheText,items:[{xtype:"checkbox",checked:(this.layerRecord.get("layer").params.TILED===true),listeners:{check:function(checkbox,checked){var layer=this.layerRecord.get("layer");layer.mergeNewParams({TILED:checked});this.fireEvent("change");},scope:this}},{xtype:"label",cls:"gxp-layerproperties-label",text:this.cacheFieldText}]},{xtype:"combo",fieldLabel:this.infoFormatText,emptyText:this.infoFormatEmptyText,store:record.get("infoFormats"),value:record.get("infoFormat"),hidden:(record.get("infoFormats")===undefined),mode:'local',listWidth:150,triggerAction:"all",editable:false,anchor:"99%",listeners:{select:function(combo){var infoFormat=combo.getValue();record.set("infoFormat",infoFormat);this.fireEvent("change");}},scope:this}]},{xtype:"fieldset",title:this.queryText,hideLabels:true,ref:"../filterFieldset",listeners:{expand:function(){this.layerRecord.getLayer().mergeNewParams({CQL_FILTER:this.cqlFilter});},collapse:function(){this.cqlFilter=this.layerRecord.getLayer().params.CQL_FILTER;this.layerRecord.getLayer().mergeNewParams({CQL_FILTER:null});},scope:this},hidden:this.source===null,checkboxToggle:true,collapsed:!this.layerRecord.getLayer().params.CQL_FILTER,items:[{xtype:"textarea",value:this.layerRecord.getLayer().params.CQL_FILTER,grow:true,anchor:'99%',width:'100%',growMax:100,ref:"../../cqlField",hidden:true}],buttons:[{ref:"../../../cqlToolbar",hidden:true,text:this.switchToFilterBuilderText,handler:this.switchToFilterBuilder,scope:this}]},{xtype:"fieldset",title:this.scaleText,listeners:{expand:function(){var layer=this.layerRecord.getLayer();if(this.minScale!==undefined||this.maxScale!==undefined){this.addScaleOptions(layer,{minScale:this.maxScale,maxScale:this.minScale});}},collapse:function(){var layer=this.layerRecord.getLayer();this.minScale=layer.options.maxScale;this.maxScale=layer.options.minScale;this.addScaleOptions(layer,{minScale:null,maxScale:null});},scope:this},checkboxToggle:true,collapsed:this.layerRecord.getLayer().options.maxScale==null&&this.layerRecord.getLayer().options.minScale==null,items:[{xtype:"compositefield",fieldLabel:this.minScaleText,items:[{xtype:"label",text:"1:",cls:"gxp-layerproperties-label"},{xtype:"numberfield",anchor:'99%',width:'85%',listeners:{'change':function(field){var options={maxScale:parseInt(field.getValue())};var layer=this.layerRecord.getLayer();this.addScaleOptions(layer,options);},scope:this},value:this.layerRecord.getLayer().options.maxScale}]},{xtype:"compositefield",fieldLabel:this.maxScaleText,items:[{xtype:"label",text:"1:",cls:"gxp-layerproperties-label"},{xtype:"numberfield",anchor:'99%',width:'85%',listeners:{'change':function(field){var options={minScale:parseInt(field.getValue())};var layer=this.layerRecord.getLayer();this.addScaleOptions(layer,options);},scope:this},value:this.layerRecord.getLayer().options.minScale}]}]}]};}});Ext.reg('gxp_wmslayerpanel',gxp.WMSLayerPanel);Ext.namespace("gxp");gxp.WMSStylesDialog=Ext.extend(Ext.Container,{addStyleText:"Add",addStyleTip:"Add a new style",chooseStyleText:"Choose style",deleteStyleText:"Remove",deleteStyleTip:"Delete the selected style",editStyleText:"Edit",editStyleTip:"Edit the selected style",duplicateStyleText:"Duplicate",duplicateStyleTip:"Duplicate the selected style",addRuleText:"Add",addRuleTip:"Add a new rule",newRuleText:"New Rule",deleteRuleText:"Remove",deleteRuleTip:"Delete the selected rule",editRuleText:"Edit",editRuleTip:"Edit the selected rule",duplicateRuleText:"Duplicate",duplicateRuleTip:"Duplicate the selected rule",cancelText:"Cancel",saveText:"Save",styleWindowTitle:"User Style: {0}",ruleWindowTitle:"Style Rule: {0}",stylesFieldsetTitle:"Styles",rulesFieldsetTitle:"Rules",errorTitle:"Error saving style",errorMsg:"There was an error saving the style back to the server.",layerRecord:null,layerDescription:null,symbolType:null,stylesStore:null,selectedStyle:null,selectedRule:null,editable:true,modified:false,dialogCls:Ext.Window,initComponent:function(){this.addEvents("ready","modified","styleselected","beforesaved","saved");var defConfig={layout:"form",disabled:true,items:[{xtype:"fieldset",title:this.stylesFieldsetTitle,labelWidth:85,style:"margin-bottom: 0;"},{xtype:"toolbar",style:"border-width: 0 1px 1px 1px; margin-bottom: 10px;",items:[{xtype:"button",iconCls:"add",text:this.addStyleText,tooltip:this.addStyleTip,handler:this.addStyle,scope:this},{xtype:"button",iconCls:"delete",text:this.deleteStyleText,tooltip:this.deleteStyleTip,handler:function(){this.stylesStore.remove(this.selectedStyle);},scope:this},{xtype:"button",iconCls:"edit",text:this.editStyleText,tooltip:this.editStyleTip,handler:function(){this.editStyle();},scope:this},{xtype:"button",iconCls:"duplicate",text:this.duplicateStyleText,tooltip:this.duplicateStyleTip,handler:function(){var prevStyle=this.selectedStyle;var newStyle=prevStyle.get("userStyle").clone();newStyle.isDefault=false;newStyle.name=this.newStyleName();var store=this.stylesStore;store.add(new store.recordType({"name":newStyle.name,"title":newStyle.title,"abstract":newStyle.description,"userStyle":newStyle}));this.editStyle(prevStyle);},scope:this}]}]};Ext.applyIf(this,defConfig);this.createStylesStore();this.on({"beforesaved":function(){this._saving=true;},"saved":function(){delete this._saving;},"savefailed":function(){Ext.Msg.show({title:this.errorTitle,msg:this.errorMsg,icon:Ext.MessageBox.ERROR,buttons:{ok:true}});delete this._saving;},"render":function(){gxp.util.dispatch([this.getStyles],function(){this.enable();},this);},scope:this});gxp.WMSStylesDialog.superclass.initComponent.apply(this,arguments);},addStyle:function(){if(!this._ready){this.on("ready",this.addStyle,this);return;}
var prevStyle=this.selectedStyle;var store=this.stylesStore;var newStyle=new OpenLayers.Style(null,{name:this.newStyleName(),rules:[this.createRule()]});store.add(new store.recordType({"name":newStyle.name,"userStyle":newStyle}));this.editStyle(prevStyle);},editStyle:function(prevStyle){var userStyle=this.selectedStyle.get("userStyle");var buttonCfg={bbar:["->",{text:this.cancelText,iconCls:"cancel",handler:function(){styleProperties.propertiesDialog.userStyle=userStyle;styleProperties.destroy();if(prevStyle){this._cancelling=true;this.stylesStore.remove(this.selectedStyle);this.changeStyle(prevStyle,{updateCombo:true,markModified:true});delete this._cancelling;}},scope:this},{text:this.saveText,iconCls:"save",handler:function(){styleProperties.destroy();}}]};var styleProperties=new this.dialogCls(Ext.apply(buttonCfg,{title:String.format(this.styleWindowTitle,userStyle.title||userStyle.name),shortTitle:userStyle.title||userStyle.name,bodyBorder:false,autoHeight:true,width:300,modal:true,items:{border:false,items:{xtype:"gxp_stylepropertiesdialog",ref:"../propertiesDialog",userStyle:userStyle.clone(),nameEditable:false,style:"padding: 10px;"}},listeners:{"beforedestroy":function(){this.selectedStyle.set("userStyle",styleProperties.propertiesDialog.userStyle);},scope:this}}));this.showDlg(styleProperties);},createSLD:function(options){options=options||{};var sld={version:"1.0.0",namedLayers:{}};var layerName=this.layerRecord.get("name");sld.namedLayers[layerName]={name:layerName,userStyles:[]};this.stylesStore.each(function(r){if(!options.userStyles||options.userStyles.indexOf(r.get("name"))!==-1){sld.namedLayers[layerName].userStyles.push(r.get("userStyle"));}});return new OpenLayers.Format.SLD({multipleSymbolizers:true,profile:"GeoServer"}).write(sld);},saveStyles:function(options){this.modified===true&&this.fireEvent("beforesaved",this,options);},updateStyleRemoveButton:function(){var userStyle=this.selectedStyle&&this.selectedStyle.get("userStyle");this.items.get(1).items.get(1).setDisabled(!userStyle||this.stylesStore.getCount()<=1||userStyle.isDefault===true);},updateRuleRemoveButton:function(){this.items.get(3).items.get(1).setDisabled(!this.selectedRule||this.items.get(2).items.get(0).rules.length<2);},createRule:function(){return new OpenLayers.Rule({symbolizers:[new OpenLayers.Symbolizer[this.symbolType]]});},addRulesFieldSet:function(){var rulesFieldSet=new Ext.form.FieldSet({itemId:"rulesfieldset",title:this.rulesFieldsetTitle,autoScroll:true,style:"margin-bottom: 0;",hideMode:"offsets",hidden:true});var rulesToolbar=new Ext.Toolbar({style:"border-width: 0 1px 1px 1px;",hidden:true,items:[{xtype:"button",iconCls:"add",text:this.addRuleText,tooltip:this.addRuleTip,handler:this.addRule,scope:this},{xtype:"button",iconCls:"delete",text:this.deleteRuleText,tooltip:this.deleteRuleTip,handler:this.removeRule,scope:this,disabled:true},{xtype:"button",iconCls:"edit",text:this.editRuleText,toolitp:this.editRuleTip,handler:function(){this.layerDescription?this.editRule():this.describeLayer(this.editRule);},scope:this,disabled:true},{xtype:"button",iconCls:"duplicate",text:this.duplicateRuleText,tip:this.duplicateRuleTip,handler:this.duplicateRule,scope:this,disabled:true}]});this.add(rulesFieldSet,rulesToolbar);this.doLayout();return rulesFieldSet;},addRule:function(){var legend=this.items.get(2).items.get(0);this.selectedStyle.get("userStyle").rules.push(this.createRule());legend.update();this.selectedStyle.store.afterEdit(this.selectedStyle);this.updateRuleRemoveButton();},removeRule:function(){var selectedRule=this.selectedRule;this.items.get(2).items.get(0).unselect();this.selectedStyle.get("userStyle").rules.remove(selectedRule);this.afterRuleChange();},duplicateRule:function(){var legend=this.items.get(2).items.get(0);var newRule=this.selectedRule.clone();this.selectedStyle.get("userStyle").rules.push(newRule);legend.update();this.selectedStyle.store.afterEdit(this.selectedStyle);this.updateRuleRemoveButton();},editRule:function(){var rule=this.selectedRule;var origRule=rule.clone();var ruleDlg=new this.dialogCls({title:String.format(this.ruleWindowTitle,rule.title||rule.name||this.newRuleText),shortTitle:rule.title||rule.name||this.newRuleText,layout:"fit",width:320,height:450,modal:true,items:[{xtype:"gxp_rulepanel",ref:"rulePanel",symbolType:this.symbolType,rule:rule,attributes:new GeoExt.data.AttributeStore({url:this.layerDescription.owsURL,baseParams:{"SERVICE":this.layerDescription.owsType,"REQUEST":"DescribeFeatureType","TYPENAME":this.layerDescription.typeName},method:"GET",disableCaching:false}),autoScroll:true,border:false,defaults:{autoHeight:true,hideMode:"offsets"},listeners:{"change":this.saveRule,"tabchange":function(){if(ruleDlg instanceof Ext.Window){ruleDlg.syncShadow();}},scope:this}}],bbar:["->",{text:this.cancelText,iconCls:"cancel",handler:function(){this.saveRule(ruleDlg.rulePanel,origRule);ruleDlg.destroy();},scope:this},{text:this.saveText,iconCls:"save",handler:function(){ruleDlg.destroy();}}]});this.showDlg(ruleDlg);},saveRule:function(cmp,rule){var style=this.selectedStyle;var legend=this.items.get(2).items.get(0);var userStyle=style.get("userStyle");var i=userStyle.rules.indexOf(this.selectedRule);userStyle.rules[i]=rule;this.afterRuleChange(rule);},afterRuleChange:function(rule){var legend=this.items.get(2).items.get(0);this.selectedRule=rule;this.selectedStyle.store.afterEdit(this.selectedStyle);},setRulesFieldSetVisible:function(visible){this.items.get(3).setVisible(visible&&this.editable);this.items.get(2).setVisible(visible);this.doLayout();},parseSLD:function(response,options){var data=response.responseXML;if(!data||!data.documentElement){data=new OpenLayers.Format.XML().read(response.responseText);}
var layerParams=this.layerRecord.getLayer().params;var initialStyle=this.initialConfig.styleName||layerParams.STYLES;if(initialStyle){this.selectedStyle=this.stylesStore.getAt(this.stylesStore.findExact("name",initialStyle));}
var format=new OpenLayers.Format.SLD({profile:"GeoServer",multipleSymbolizers:true});try{var sld=format.read(data);var userStyles=sld.namedLayers[layerParams.LAYERS].userStyles;var inlineStyles;if(layerParams.SLD_BODY){var sldBody=format.read(layerParams.SLD_BODY);inlineStyles=sldBody.namedLayers[layerParams.LAYERS].userStyles;Array.prototype.push.apply(userStyles,inlineStyles);}
this.stylesStore.removeAll();this.selectedStyle=null;var userStyle,record,index;for(var i=0,len=userStyles.length;i<len;++i){userStyle=userStyles[i];index=this.stylesStore.findExact("name",userStyle.name);index!==-1&&this.stylesStore.removeAt(index);record=new this.stylesStore.recordType({"name":userStyle.name,"title":userStyle.title,"abstract":userStyle.description,"userStyle":userStyle});record.phantom=false;this.stylesStore.add(record);if(!this.selectedStyle&&(initialStyle===userStyle.name||(!initialStyle&&userStyle.isDefault===true))){this.selectedStyle=record;}}
this.addRulesFieldSet();this.createLegend(this.selectedStyle.get("userStyle").rules);this.stylesStoreReady();layerParams.SLD_BODY&&this.markModified();}
catch(e){this.setupNonEditable();}},createLegend:function(rules){var R=OpenLayers.Symbolizer.Raster;if(R&&rules[0]&&rules[0].symbolizers[0]instanceof R){throw new Error("Raster symbolizers are not supported.");}else{this.addVectorLegend(rules);}},setupNonEditable:function(){this.editable=false;this.items.get(1).hide();var rulesFieldSet=this.getComponent("rulesfieldset")||this.addRulesFieldSet();rulesFieldSet.add(this.createLegendImage());this.doLayout();this.items.get(3).hide();this.stylesStoreReady();},stylesStoreReady:function(){this.stylesStore.commitChanges();this.stylesStore.on({"load":function(){this.addStylesCombo();this.updateStyleRemoveButton();},"add":function(store,records,index){this.updateStyleRemoveButton();var combo=this.items.get(0).items.get(0);this.markModified();combo.fireEvent("select",combo,store.getAt(index),index);combo.setValue(this.selectedStyle.get("name"));},"remove":function(store,record,index){if(!this._cancelling){this._removing=true;var newIndex=Math.min(index,store.getCount()-1);this.updateStyleRemoveButton();var combo=this.items.get(0).items.get(0);this.markModified();combo.fireEvent("select",combo,store.getAt(newIndex),newIndex);combo.setValue(this.selectedStyle.get("name"));delete this._removing;}},"update":function(store,record){var userStyle=record.get("userStyle");var data={"name":userStyle.name,"title":userStyle.title||userStyle.name,"abstract":userStyle.description};Ext.apply(record.data,data);this.changeStyle(record,{updateCombo:true,markModified:true});},scope:this});this.stylesStore.fireEvent("load",this.stylesStore,this.stylesStore.getRange());this._ready=true;this.fireEvent("ready");},markModified:function(){if(this.modified===false){this.modified=true;}
if(!this._saving){this.fireEvent("modified",this,this.selectedStyle.get("name"));}},createStylesStore:function(callback){var styles=this.layerRecord.get("styles")||[];this.stylesStore=new Ext.data.JsonStore({data:{styles:styles},idProperty:"name",root:"styles",fields:["name","title","abstract","legend","userStyle"],listeners:{"add":function(store,records){for(var rec,i=records.length-1;i>=0;--i){rec=records[i];store.suspendEvents();rec.get("title")||rec.set("title",rec.get("name"));store.resumeEvents();}}}});},getStyles:function(callback){var layer=this.layerRecord.getLayer();if(this.editable===true){var version=layer.params["VERSION"];if(parseFloat(version)>1.1){version="1.1.1";}
Ext.Ajax.request({url:layer.url,params:{"SERVICE":"WMS","VERSION":version,"REQUEST":"GetStyles","LAYERS":[layer.params["LAYERS"]].join(",")},method:"GET",disableCaching:false,success:this.parseSLD,failure:this.setupNonEditable,callback:callback,scope:this});}else{this.setupNonEditable();}},describeLayer:function(callback){if(this.layerDescription){window.setTimeout(function(){callback.call(this);},0);}else{var layer=this.layerRecord.getLayer();var version=layer.params["VERSION"];if(parseFloat(version)>1.1){version="1.1.1";}
Ext.Ajax.request({url:layer.url,params:{"SERVICE":"WMS","VERSION":version,"REQUEST":"DescribeLayer","LAYERS":[layer.params["LAYERS"]].join(",")},method:"GET",disableCaching:false,success:function(response){var result=new OpenLayers.Format.WMSDescribeLayer().read(response.responseXML&&response.responseXML.documentElement?response.responseXML:response.responseText);this.layerDescription=result[0];},callback:callback,scope:this});}},addStylesCombo:function(){var store=this.stylesStore;var combo=new Ext.form.ComboBox(Ext.apply({fieldLabel:this.chooseStyleText,store:store,editable:false,displayField:"title",valueField:"name",value:this.selectedStyle?this.selectedStyle.get("title"):this.layerRecord.getLayer().params.STYLES||"default",disabled:!store.getCount(),mode:"local",typeAhead:true,triggerAction:"all",forceSelection:true,anchor:"100%",listeners:{"select":function(combo,record){this.changeStyle(record);if(!record.phantom&&!this._removing){this.fireEvent("styleselected",this,record.get("name"));}},scope:this}},this.initialConfig.stylesComboOptions));this.items.get(0).add(combo);this.doLayout();},createLegendImage:function(){var legend=new GeoExt.WMSLegend({showTitle:false,layerRecord:this.layerRecord,autoScroll:true,defaults:{listeners:{"render":function(cmp){cmp.getEl().on({load:function(evt,img){if(img.getAttribute("src")!=cmp.defaultImgSrc){this.setRulesFieldSetVisible(true);if(cmp.getEl().getHeight()>250){legend.setHeight(250);}}},"error":function(){this.setRulesFieldSetVisible(false);},scope:this});},scope:this}}});return legend;},changeStyle:function(record,options){options=options||{};var legend=this.items.get(2).items.get(0);this.selectedStyle=record;this.updateStyleRemoveButton();var styleName=record.get("name");if(this.editable===true){var userStyle=record.get("userStyle");if(userStyle.isDefault===true){styleName="";}
var ruleIdx=legend.rules.indexOf(this.selectedRule);legend.ownerCt.remove(legend);this.createLegend(userStyle.rules,{selectedRuleIndex:ruleIdx});}
if(options.updateCombo===true){this.items.get(0).items.get(0).setValue(userStyle.name);options.markModified===true&&this.markModified();}},addVectorLegend:function(rules,options){options=Ext.applyIf(options||{},{enableDD:true});this.symbolType=options.symbolType;if(!this.symbolType){var typeHierarchy=["Point","Line","Polygon"];highest=0;var symbolizers=rules[0].symbolizers,symbolType;for(var i=symbolizers.length-1;i>=0;i--){symbolType=symbolizers[i].CLASS_NAME.split(".").pop();highest=Math.max(highest,typeHierarchy.indexOf(symbolType));}
this.symbolType=typeHierarchy[highest];}
var legend=this.items.get(2).add({xtype:"gx_vectorlegend",showTitle:false,height:rules.length>10?250:undefined,autoScroll:rules.length>10,rules:rules,symbolType:this.symbolType,selectOnClick:true,enableDD:options.enableDD,listeners:{"ruleselected":function(cmp,rule){this.selectedRule=rule;var tbItems=this.items.get(3).items;this.updateRuleRemoveButton();tbItems.get(2).enable();tbItems.get(3).enable();},"ruleunselected":function(cmp,rule){this.selectedRule=null;var tbItems=this.items.get(3).items;tbItems.get(1).disable();tbItems.get(2).disable();tbItems.get(3).disable();},"rulemoved":function(){this.markModified();},"afterlayout":function(){if(this.selectedRule!==null&&legend.selectedRule===null&&legend.rules.indexOf(this.selectedRule)!==-1){legend.selectRuleEntry(this.selectedRule);}},scope:this}});this.setRulesFieldSetVisible(true);return legend;},newStyleName:function(){var layerName=this.layerRecord.get("name");return layerName.split(":").pop()+"_"+
gxp.util.md5(layerName+new Date()+Math.random()).substr(0,8);},showDlg:function(dlg){dlg.show();}});gxp.WMSStylesDialog.createGeoServerStylerConfig=function(layerRecord,url){var layer=layerRecord.getLayer();if(!url){url=layerRecord.get("restUrl");}
if(!url){url=layer.url.split("?").shift().replace(/\/(wms|ows)\/?$/,"/rest");}
return{xtype:"gxp_wmsstylesdialog",layerRecord:layerRecord,plugins:[{ptype:"gxp_geoserverstylewriter",baseUrl:url}],listeners:{"styleselected":function(cmp,style){layer.mergeNewParams({styles:style});},"modified":function(cmp,style){cmp.saveStyles();},"saved":function(cmp,style){layer.mergeNewParams({_olSalt:Math.random(),styles:style});},scope:this}};};OpenLayers.Renderer.defaultSymbolizer={fillColor:"#808080",fillOpacity:1,strokeColor:"#000000",strokeOpacity:1,strokeWidth:1,strokeDashstyle:"solid",pointRadius:3,graphicName:"square",fontColor:"#000000",fontSize:10,haloColor:"#FFFFFF",haloOpacity:1,haloRadius:1,labelAlign:'cm'};Ext.reg('gxp_wmsstylesdialog',gxp.WMSStylesDialog);Ext.namespace("gxp");gxp.NewSourceDialog=Ext.extend(Ext.Panel,{title:"Add New Server...",cancelText:"Cancel",addServerText:"Add Server",invalidURLText:"Enter a valid URL to a WMS endpoint (e.g. http://example.com/geoserver/wms)",contactingServerText:"Contacting Server...",bodyStyle:"padding: 0px",error:null,initComponent:function(){this.addEvents("urlselected");this.urlTextField=new Ext.form.TextField({fieldLabel:"URL",allowBlank:false,width:240,msgTarget:"under",validator:this.urlValidator.createDelegate(this),listeners:{specialkey:function(f,e){if(e.getKey()===e.ENTER){this.addServer();}},scope:this}});this.form=new Ext.form.FormPanel({items:[this.urlTextField],border:false,labelWidth:30,bodyStyle:"padding: 5px",autoWidth:true,autoHeight:true,listeners:{afterrender:function(){this.urlTextField.focus(false,true);},scope:this}});this.bbar=[new Ext.Button({text:this.cancelText,handler:this.hide,scope:this}),new Ext.Toolbar.Fill(),new Ext.Button({text:this.addServerText,iconCls:"add",handler:this.addServer,scope:this})];this.items=this.form;gxp.NewSourceDialog.superclass.initComponent.call(this);this.form.on("render",function(){this.loadMask=new Ext.LoadMask(this.form.getEl(),{msg:this.contactingServerText});},this);this.on({hide:this.reset,removed:this.reset,scope:this});this.on("urlselected",function(cmp,url){this.setLoading();var failure=function(){this.setError(this.sourceLoadFailureMessage);};this.addSource(url,this.hide,failure,this);},this);},addServer:function(){this.error=null;if(this.urlTextField.validate()){this.fireEvent("urlselected",this,this.urlTextField.getValue());}},reset:function(){this.error=null;this.urlTextField.reset();this.loadMask.hide();},urlRegExp:/^(http(s)?:)?\/\/([\w%]+:[\w%]+@)?([^@\/:]+)(:\d+)?\//i,urlValidator:function(url){var valid;if(!this.urlRegExp.test(url)){valid=this.invalidURLText;}else{valid=!this.error||this.error;}
this.error=null;return valid;},setLoading:function(){this.loadMask.show();},setError:function(error){this.loadMask.hide();this.error=error;this.urlTextField.validate();},addSource:function(url,success,failure,scope){}});Ext.reg('gxp_newsourcedialog',gxp.NewSourceDialog);Ext.namespace("gxp");gxp.NewSourceWindow=Ext.extend(Ext.Window,{bodyStyle:"padding: 0px",hideBorders:true,width:300,closeAction:'hide',error:null,initComponent:function(){window.setTimeout(function(){throw("gxp.NewSourceWindow is deprecated. Use gxp.NewSourceDialog instead.");},0);this.addEvents("server-added");gxp.NewSourceWindow.superclass.initComponent.apply(this,arguments);this.addEvents("server-added");var dialog=this.add(new gxp.NewSourceDialog(Ext.applyIf({addSource:this.addSource,header:false,listeners:{urlselected:function(cmp,url){this.fireEvent("server-added",url);}}},this.initialConfig)));this.setTitle(dialog.title);this.setLoading=dialog.setLoading.createDelegate(dialog);this.setError=dialog.setError.createDelegate(dialog);this.on("hide",dialog.onHide,dialog);},addSource:function(url,success,failure,scope){}});Ext.namespace("gxp");gxp.FillSymbolizer=Ext.extend(Ext.FormPanel,{symbolizer:null,colorProperty:"fillColor",opacityProperty:"fillOpacity",colorManager:null,checkboxToggle:true,defaultColor:null,border:false,fillText:"Fill",colorText:"Color",opacityText:"Opacity",initComponent:function(){if(!this.symbolizer){this.symbolizer={};}
var colorFieldPlugins;if(this.colorManager){colorFieldPlugins=[new this.colorManager()];}
var sliderValue=100;if(this.opacityProperty in this.symbolizer){sliderValue=this.symbolizer[this.opacityProperty];}
else if(OpenLayers.Renderer.defaultSymbolizer[this.opacityProperty]){sliderValue=OpenLayers.Renderer.defaultSymbolizer[this.opacityProperty]*100;}
this.items=[{xtype:"fieldset",title:this.fillText,autoHeight:true,checkboxToggle:this.checkboxToggle,collapsed:this.checkboxToggle===true&&this.symbolizer.fill===false,hideMode:"offsets",defaults:{width:100},items:[{xtype:"gxp_colorfield",fieldLabel:this.colorText,name:"color",emptyText:OpenLayers.Renderer.defaultSymbolizer[this.colorProperty],value:this.symbolizer[this.colorProperty],defaultBackground:this.defaultColor||OpenLayers.Renderer.defaultSymbolizer[this.colorProperty],plugins:colorFieldPlugins,listeners:{valid:function(field){var newValue=field.getValue();var modified=this.symbolizer[this.colorProperty]!=newValue;this.symbolizer[this.colorProperty]=newValue;modified&&this.fireEvent("change",this.symbolizer);},scope:this}},{xtype:"slider",fieldLabel:this.opacityText,name:"opacity",values:[sliderValue],isFormField:true,listeners:{changecomplete:function(slider,value){this.symbolizer[this.opacityProperty]=value/100;this.fireEvent("change",this.symbolizer);},scope:this},plugins:[new GeoExt.SliderTip({getText:function(thumb){return thumb.value+"%";}})]}],listeners:{"collapse":function(){if(this.symbolizer.fill!==false){this.symbolizer.fill=false;this.fireEvent("change",this.symbolizer);}},"expand":function(){this.symbolizer.fill=true;this.fireEvent("change",this.symbolizer);},scope:this}}];this.addEvents("change");gxp.FillSymbolizer.superclass.initComponent.call(this);}});Ext.reg('gxp_fillsymbolizer',gxp.FillSymbolizer);Ext.namespace("gxp");gxp.StrokeSymbolizer=Ext.extend(Ext.FormPanel,{solidStrokeName:"solid",dashStrokeName:"dash",dotStrokeName:"dot",titleText:"Stroke",styleText:"Style",colorText:"Color",widthText:"Width",opacityText:"Opacity",symbolizer:null,colorManager:null,checkboxToggle:true,defaultColor:null,dashStyles:null,border:false,initComponent:function(){this.dashStyles=this.dashStyles||[["solid",this.solidStrokeName],["4 4",this.dashStrokeName],["2 4",this.dotStrokeName]];if(!this.symbolizer){this.symbolizer={};}
var colorFieldPlugins;if(this.colorManager){colorFieldPlugins=[new this.colorManager];}
this.items=[{xtype:"fieldset",title:this.titleText,autoHeight:true,checkboxToggle:this.checkboxToggle,collapsed:this.checkboxToggle===true&&this.symbolizer.stroke===false,hideMode:"offsets",defaults:{width:100},items:[{xtype:"combo",name:"style",fieldLabel:this.styleText,store:new Ext.data.SimpleStore({data:this.dashStyles,fields:["value","display"]}),displayField:"display",valueField:"value",value:this.getDashArray(this.symbolizer.strokeDashstyle)||OpenLayers.Renderer.defaultSymbolizer.strokeDashstyle,mode:"local",allowBlank:true,triggerAction:"all",editable:false,listeners:{select:function(combo,record){this.symbolizer.strokeDashstyle=record.get("value");this.fireEvent("change",this.symbolizer);},scope:this}},{xtype:"gxp_colorfield",name:"color",fieldLabel:this.colorText,emptyText:OpenLayers.Renderer.defaultSymbolizer.strokeColor,value:this.symbolizer.strokeColor,defaultBackground:this.defaultColor||OpenLayers.Renderer.defaultSymbolizer.strokeColor,plugins:colorFieldPlugins,listeners:{valid:function(field){var newValue=field.getValue();var modified=this.symbolizer.strokeColor!=newValue;this.symbolizer.strokeColor=newValue;modified&&this.fireEvent("change",this.symbolizer);},scope:this}},{xtype:"numberfield",name:"width",fieldLabel:this.widthText,allowNegative:false,emptyText:OpenLayers.Renderer.defaultSymbolizer.strokeWidth,value:this.symbolizer.strokeWidth,listeners:{change:function(field,value){value=parseFloat(value);if(isNaN(value)){delete this.symbolizer.strokeWidth;}else{this.symbolizer.strokeWidth=value;}
this.fireEvent("change",this.symbolizer);},scope:this}},{xtype:"slider",name:"opacity",fieldLabel:this.opacityText,values:[(("strokeOpacity"in this.symbolizer)?this.symbolizer.strokeOpacity:OpenLayers.Renderer.defaultSymbolizer.strokeOpacity)*100],isFormField:true,listeners:{changecomplete:function(slider,value){this.symbolizer.strokeOpacity=value/100;this.fireEvent("change",this.symbolizer);},scope:this},plugins:[new GeoExt.SliderTip({getText:function(thumb){return thumb.value+"%";}})]}],listeners:{"collapse":function(){if(this.symbolizer.stroke!==false){this.symbolizer.stroke=false;this.fireEvent("change",this.symbolizer);}},"expand":function(){this.symbolizer.stroke=true;this.fireEvent("change",this.symbolizer);},scope:this}}];this.addEvents("change");gxp.StrokeSymbolizer.superclass.initComponent.call(this);},getDashArray:function(style){var array;if(style){var parts=style.split(/\s+/);var ratio=parts[0]/parts[1];if(!isNaN(ratio)){array=ratio>=1?"4 4":"2 4";}}
return array;}});Ext.reg('gxp_strokesymbolizer',gxp.StrokeSymbolizer);Ext.namespace("gxp");gxp.PointSymbolizer=Ext.extend(Ext.Panel,{symbolizer:null,graphicCircleText:"circle",graphicSquareText:"square",graphicTriangleText:"triangle",graphicStarText:"star",graphicCrossText:"cross",graphicXText:"x",graphicExternalText:"external",urlText:"URL",opacityText:"opacity",symbolText:"Symbol",sizeText:"Size",rotationText:"Rotation",pointGraphics:null,colorManager:null,external:null,layout:"form",initComponent:function(){if(!this.symbolizer){this.symbolizer={};}
if(!this.pointGraphics){this.pointGraphics=[{display:this.graphicCircleText,value:"circle",mark:true},{display:this.graphicSquareText,value:"square",mark:true},{display:this.graphicTriangleText,value:"triangle",mark:true},{display:this.graphicStarText,value:"star",mark:true},{display:this.graphicCrossText,value:"cross",mark:true},{display:this.graphicXText,value:"x",mark:true},{display:this.graphicExternalText}];}
this.external=!!this.symbolizer["externalGraphic"];this.markPanel=new Ext.Panel({border:false,collapsed:this.external,layout:"form",items:[{xtype:"gxp_fillsymbolizer",symbolizer:this.symbolizer,labelWidth:this.labelWidth,labelAlign:this.labelAlign,colorManager:this.colorManager,listeners:{change:function(symbolizer){this.fireEvent("change",this.symbolizer);},scope:this}},{xtype:"gxp_strokesymbolizer",symbolizer:this.symbolizer,labelWidth:this.labelWidth,labelAlign:this.labelAlign,colorManager:this.colorManager,listeners:{change:function(symbolizer){this.fireEvent("change",this.symbolizer);},scope:this}}]});this.urlField=new Ext.form.TextField({name:"url",fieldLabel:this.urlText,value:this.symbolizer["externalGraphic"],hidden:true,listeners:{change:function(field,value){this.symbolizer["externalGraphic"]=value;this.fireEvent("change",this.symbolizer);},scope:this},width:100});this.graphicPanel=new Ext.Panel({border:false,collapsed:!this.external,layout:"form",items:[this.urlField,{xtype:"slider",name:"opacity",fieldLabel:this.opacityText,value:[(this.symbolizer["graphicOpacity"]==null)?100:this.symbolizer["graphicOpacity"]*100],isFormField:true,listeners:{changecomplete:function(slider,value){this.symbolizer["graphicOpacity"]=value/100;this.fireEvent("change",this.symbolizer);},scope:this},plugins:[new GeoExt.SliderTip({getText:function(thumb){return thumb.value+"%";}})],width:100}]});this.items=[{xtype:"combo",name:"mark",fieldLabel:this.symbolText,store:new Ext.data.JsonStore({data:{root:this.pointGraphics},root:"root",fields:["value","display","preview",{name:"mark",type:"boolean"}]}),value:this.external?0:this.symbolizer["graphicName"],displayField:"display",valueField:"value",tpl:new Ext.XTemplate('<tpl for=".">'+'<div class="x-combo-list-item gx-pointsymbolizer-mark-item">'+'<tpl if="preview">'+'<img src="{preview}" alt="{display}"/>'+'</tpl>'+'<span>{display}</span>'+'</div></tpl>'),mode:"local",allowBlank:false,triggerAction:"all",editable:false,listeners:{select:function(combo,record){var mark=record.get("mark");var value=record.get("value");if(!mark){if(value){this.urlField.hide();this.urlField.getEl().up('.x-form-item').setDisplayed(false);this.symbolizer["externalGraphic"]=value;}else{this.urlField.show();this.urlField.getEl().up('.x-form-item').setDisplayed(true);}
if(!this.external){this.external=true;this.updateGraphicDisplay();}}else{if(this.external){this.external=false;delete this.symbolizer["externalGraphic"];this.updateGraphicDisplay();}
this.symbolizer["graphicName"]=value;}
this.fireEvent("change",this.symbolizer);},scope:this},width:100},{xtype:"textfield",name:"size",fieldLabel:this.sizeText,value:this.symbolizer["pointRadius"]&&this.symbolizer["pointRadius"]*2,listeners:{change:function(field,value){this.symbolizer["pointRadius"]=value/2;this.fireEvent("change",this.symbolizer);},scope:this},width:100},{xtype:"textfield",name:"rotation",fieldLabel:this.rotationText,value:this.symbolizer["rotation"],listeners:{change:function(field,value){this.symbolizer["rotation"]=value;this.fireEvent("change",this.symbolizer);},scope:this},width:100},this.markPanel,this.graphicPanel];this.addEvents("change");gxp.PointSymbolizer.superclass.initComponent.call(this);},updateGraphicDisplay:function(){if(this.external){this.markPanel.collapse();this.graphicPanel.expand();}else{this.graphicPanel.collapse();this.markPanel.expand();}}});Ext.reg('gxp_pointsymbolizer',gxp.PointSymbolizer);Ext.namespace("gxp");gxp.LayerUploadPanel=Ext.extend(Ext.FormPanel,{titleLabel:"Title",titleEmptyText:"Layer title",abstractLabel:"Description",abstractEmptyText:"Layer description",fileLabel:"Data",fieldEmptyText:"Browse for data archive...",uploadText:"Upload",waitMsgText:"Uploading your data...",invalidFileExtensionText:"File extension must be one of: ",optionsText:"Options",workspaceLabel:"Workspace",workspaceEmptyText:"Default workspace",dataStoreLabel:"Store",dataStoreEmptyText:"Create new store",defaultDataStoreEmptyText:"Default data store",crsLabel:"CRS",crsEmptyText:"Coordinate Reference System ID",invalidCrsText:"CRS identifier should be an EPSG code (e.g. EPSG:4326)",fileUpload:true,validFileExtensions:[".zip",".tif",".tiff",".gz",".tar.bz2",".tar",".tgz",".tbz2"],defaultDataStore:null,constructor:function(config){config.errorReader={read:config.handleUploadResponse||this.handleUploadResponse.createDelegate(this)};gxp.LayerUploadPanel.superclass.constructor.call(this,config);},selectedWorkspace:null,initComponent:function(){this.items=[{xtype:"textfield",name:"title",fieldLabel:this.titleLabel,emptyText:this.titleEmptyText,allowBlank:true},{xtype:"textarea",name:"abstract",fieldLabel:this.abstractLabel,emptyText:this.abstractEmptyText,allowBlank:true},{xtype:"fileuploadfield",id:"file",anchor:"90%",emptyText:this.fieldEmptyText,fieldLabel:this.fileLabel,name:"file",buttonText:"",buttonCfg:{iconCls:"gxp-icon-filebrowse"},listeners:{"fileselected":function(cmp,value){cmp.setValue(value.split(/[/\\]/).pop());}},validator:this.fileNameValidator.createDelegate(this)},{xtype:"fieldset",title:this.optionsText,checkboxToggle:true,collapsed:true,hidden:this.workspace!=undefined&&this.store!=undefined&&this.crs!=undefined,hideMode:"offsets",defaults:{anchor:"97%"},items:[this.createWorkspacesCombo(),this.createDataStoresCombo(),{xtype:"textfield",name:"nativeCRS",fieldLabel:this.crsLabel,emptyText:this.crsEmptyText,allowBlank:true,regex:/^epsg:\d+$/i,regexText:this.invalidCrsText}],listeners:{collapse:function(fieldset){fieldset.items.each(function(item){item.reset();});}}}];this.buttons=[{text:this.uploadText,handler:function(){var form=this.getForm();if(form.isValid()){var fields=form.getFieldValues(),jsonData={'import':{}};if(fields.workspace){jsonData["import"].targetWorkspace={workspace:{name:fields.workspace}};}
if(fields.store){jsonData["import"].targetStore={dataStore:{name:fields.store}}}else if(this.defaultDataStore){jsonData["import"].targetStore={dataStore:{name:this.defaultDataStore}}}
Ext.Ajax.request({url:this.getUploadUrl(),method:"POST",jsonData:jsonData,success:function(response){this._import=response.getResponseHeader("Location");form.submit({url:this._import+"/tasks",waitMsg:this.waitMsgText,waitMsgTarget:true,reset:true,scope:this});},scope:this});}},scope:this}];this.addEvents("workspaceselected","datastoreselected","uploadcomplete");this.getDefaultDataStore('default');gxp.LayerUploadPanel.superclass.initComponent.call(this);},fileNameValidator:function(name){var valid=false;var ext,len=name.length;for(var i=0,ii=this.validFileExtensions.length;i<ii;++i){ext=this.validFileExtensions[i];if(name.slice(-ext.length).toLowerCase()===ext){valid=true;break;}}
return valid||this.invalidFileExtensionText+'<br/>'+this.validFileExtensions.join(", ");},createWorkspacesCombo:function(){return{xtype:"combo",name:"workspace",ref:"../workspace",fieldLabel:this.workspaceLabel,emptyText:this.workspaceEmptyText,store:new Ext.data.JsonStore({url:this.getWorkspacesUrl(),autoLoad:true,root:"workspaces.workspace",fields:["name","href"]}),displayField:"name",valueField:"name",mode:"local",allowBlank:true,triggerAction:"all",editable:false,listeners:{select:function(combo,record,index){this.getDefaultDataStore(record.get('name'));this.fireEvent("workspaceselected",this,record);},scope:this}};},createDataStoresCombo:function(){var store=new Ext.data.JsonStore({autoLoad:false,root:"dataStores.dataStore",fields:["name","href"]});this.on({workspaceselected:function(panel,record){combo.reset();var workspaceUrl=record.get("href");store.removeAll();store.proxy=new Ext.data.HttpProxy({url:workspaceUrl.split(".json").shift()+"/datastores.json"});store.load();},scope:this});var combo=new Ext.form.ComboBox({name:"store",ref:"../dataStore",fieldLabel:this.dataStoreLabel,emptyText:this.dataStoreEmptyText,store:store,displayField:"name",valueField:"name",mode:"local",allowBlank:true,triggerAction:"all",editable:false,listeners:{select:function(combo,record,index){this.fireEvent("datastoreselected",this,record);},scope:this}});return combo;},getDefaultDataStore:function(workspace){Ext.Ajax.request({url:this.url+'/workspaces/'+workspace+'/datastores/default.json',callback:function(options,success,response){this.defaultDataStore=null;this.dataStore.emptyText=this.dataStoreEmptyText;this.dataStore.setValue('');if(response.status===200){var json=Ext.decode(response.responseText);if(json.dataStore&&json.dataStore.enabled===true&&!/file/i.test(json.dataStore.type)){this.defaultDataStore=json.dataStore.name;this.dataStore.emptyText=this.defaultDataStoreEmptyText;this.dataStore.setValue('');}}},scope:this});},getUploadUrl:function(){return this.url+"/imports";},getWorkspacesUrl:function(){return this.url+"/workspaces.json";},handleUploadResponse:function(response){var obj=this.parseResponseText(response.responseText),records,tasks,task,msg,i,success=true;if(obj){if(typeof obj==="string"){success=false;msg=obj;}else{tasks=obj.tasks||[obj.task];if(tasks.length===0){success=false;msg="Upload contains no suitable files.";}else{for(i=tasks.length-1;i>=0;--i){task=tasks[i];if(!task){success=false;msg="Unknown upload error";break;}else if(task.state!=="READY"){success=false;msg="Source "+task.source.file+" is "+task.state;break;}}}}}
if(!success){records=[{data:{id:"file",msg:msg}}];}else{var formData=this.getForm().getFieldValues(),resource=task.items[0].resource,itemModified=!!(formData.title||formData["abstract"]||formData.nativeCRS),queue=[];if(itemModified){var layer=resource.featureType?"featureType":"coverage",item={resource:{}};item.resource[layer]={title:formData.title||undefined,"abstract":formData["abstract"]||undefined,nativeCRS:formData.nativeCRS||undefined};Ext.Ajax.request({method:"PUT",url:tasks[0].items[0].href,jsonData:{item:item},callback:this.finishUpload,scope:this});}else{this.finishUpload();}}
return{success:success,records:records};},finishUpload:function(){Ext.Ajax.request({method:"POST",url:this._import,success:this.handleUploadSuccess,scope:this});},parseResponseText:function(text){var obj;try{obj=Ext.decode(text);}catch(err){var match=text.match(/^\s*<pre[^>]*>(.*)<\/pre>\s*/);if(match){try{obj=Ext.decode(match[1]);}catch(err){obj=match[1];}}}
return obj;},handleUploadSuccess:function(response){Ext.Ajax.request({method:"GET",url:this._import,success:function(response){var details=Ext.decode(response.responseText);this.fireEvent("uploadcomplete",this,details);delete this._import;},scope:this});}});Ext.reg("gxp_layeruploadpanel",gxp.LayerUploadPanel);Ext.namespace("gxp");gxp.LineSymbolizer=Ext.extend(Ext.Panel,{symbolizer:null,initComponent:function(){this.items=[{xtype:"gxp_strokesymbolizer",symbolizer:this.symbolizer,listeners:{change:function(symbolizer){this.fireEvent("change",this.symbolizer);},scope:this}}];this.addEvents("change");gxp.LineSymbolizer.superclass.initComponent.call(this);}});Ext.reg('gxp_linesymbolizer',gxp.LineSymbolizer);Ext.namespace("gxp");gxp.PolygonSymbolizer=Ext.extend(Ext.Panel,{symbolizer:null,initComponent:function(){this.items=[{xtype:"gxp_fillsymbolizer",symbolizer:this.symbolizer,listeners:{change:function(symbolizer){this.fireEvent("change",this.symbolizer);},scope:this}},{xtype:"gxp_strokesymbolizer",symbolizer:this.symbolizer,listeners:{change:function(symbolizer){this.fireEvent("change",this.symbolizer);},scope:this}}];this.addEvents("change");gxp.PolygonSymbolizer.superclass.initComponent.call(this);}});Ext.reg('gxp_polygonsymbolizer',gxp.PolygonSymbolizer);Ext.namespace("gxp");gxp.RulePanel=Ext.extend(Ext.TabPanel,{fonts:undefined,symbolType:"Point",rule:null,attributes:null,nestedFilters:true,minScaleDenominatorLimit:Math.pow(0.5,19)*40075016.68*39.3701*OpenLayers.DOTS_PER_INCH/256,maxScaleDenominatorLimit:40075016.68*39.3701*OpenLayers.DOTS_PER_INCH/256,scaleLevels:20,scaleSliderTemplate:"{scaleType} Scale 1:{scale}",modifyScaleTipContext:Ext.emptyFn,labelFeaturesText:"Label Features",labelsText:"Labels",basicText:"Basic",advancedText:"Advanced",limitByScaleText:"Limit by scale",limitByConditionText:"Limit by condition",symbolText:"Symbol",nameText:"Name",initComponent:function(){var defConfig={plain:true,border:false};Ext.applyIf(this,defConfig);if(!this.rule){this.rule=new OpenLayers.Rule({name:this.uniqueRuleName()});}else{if(!this.initialConfig.symbolType){this.symbolType=this.getSymbolTypeFromRule(this.rule)||this.symbolType;}}
this.activeTab=0;this.textSymbolizer=new gxp.TextSymbolizer({symbolizer:this.getTextSymbolizer(),attributes:this.attributes,fonts:this.fonts,listeners:{change:function(symbolizer){this.fireEvent("change",this,this.rule);},scope:this}});this.scaleLimitPanel=new gxp.ScaleLimitPanel({maxScaleDenominator:this.rule.maxScaleDenominator||undefined,limitMaxScaleDenominator:!!this.rule.maxScaleDenominator,maxScaleDenominatorLimit:this.maxScaleDenominatorLimit,minScaleDenominator:this.rule.minScaleDenominator||undefined,limitMinScaleDenominator:!!this.rule.minScaleDenominator,minScaleDenominatorLimit:this.minScaleDenominatorLimit,scaleLevels:this.scaleLevels,scaleSliderTemplate:this.scaleSliderTemplate,modifyScaleTipContext:this.modifyScaleTipContext,listeners:{change:function(comp,min,max){this.rule.minScaleDenominator=min;this.rule.maxScaleDenominator=max;this.fireEvent("change",this,this.rule);},scope:this}});this.filterBuilder=new gxp.FilterBuilder({allowGroups:this.nestedFilters,filter:this.rule&&this.rule.filter&&this.rule.filter.clone(),attributes:this.attributes,listeners:{change:function(builder){var filter=builder.getFilter();this.rule.filter=filter;this.fireEvent("change",this,this.rule);},scope:this}});this.items=[{title:this.labelsText,autoScroll:true,bodyStyle:{"padding":"10px"},items:[{xtype:"fieldset",title:this.labelFeaturesText,autoHeight:true,checkboxToggle:true,collapsed:!this.hasTextSymbolizer(),items:[this.textSymbolizer],listeners:{collapse:function(){OpenLayers.Util.removeItem(this.rule.symbolizers,this.getTextSymbolizer());this.fireEvent("change",this,this.rule);},expand:function(){this.setTextSymbolizer(this.textSymbolizer.symbolizer);this.fireEvent("change",this,this.rule);},scope:this}}]}];if(this.getSymbolTypeFromRule(this.rule)||this.symbolType){this.items=[{title:this.basicText,autoScroll:true,items:[this.createHeaderPanel(),this.createSymbolizerPanel()]},this.items[0],{title:this.advancedText,defaults:{style:{margin:"7px"}},autoScroll:true,items:[{xtype:"fieldset",title:this.limitByScaleText,checkboxToggle:true,collapsed:!(this.rule&&(this.rule.minScaleDenominator||this.rule.maxScaleDenominator)),autoHeight:true,items:[this.scaleLimitPanel],listeners:{collapse:function(){delete this.rule.minScaleDenominator;delete this.rule.maxScaleDenominator;this.fireEvent("change",this,this.rule);},expand:function(){var tab=this.getActiveTab();this.activeTab=null;this.setActiveTab(tab);var changed=false;if(this.scaleLimitPanel.limitMinScaleDenominator){this.rule.minScaleDenominator=this.scaleLimitPanel.minScaleDenominator;changed=true;}
if(this.scaleLimitPanel.limitMaxScaleDenominator){this.rule.maxScaleDenominator=this.scaleLimitPanel.maxScaleDenominator;changed=true;}
if(changed){this.fireEvent("change",this,this.rule);}},scope:this}},{xtype:"fieldset",title:this.limitByConditionText,checkboxToggle:true,collapsed:!(this.rule&&this.rule.filter),autoHeight:true,items:[this.filterBuilder],listeners:{collapse:function(){delete this.rule.filter;this.fireEvent("change",this,this.rule);},expand:function(){var changed=false;this.rule.filter=this.filterBuilder.getFilter();this.fireEvent("change",this,this.rule);},scope:this}}]}];}
this.items[0].autoHeight=true;this.addEvents("change");this.on({tabchange:function(panel,tab){tab.doLayout();},scope:this});gxp.RulePanel.superclass.initComponent.call(this);},hasTextSymbolizer:function(){var candidate,symbolizer;for(var i=0,ii=this.rule.symbolizers.length;i<ii;++i){candidate=this.rule.symbolizers[i];if(candidate instanceof OpenLayers.Symbolizer.Text){symbolizer=candidate;break;}}
return symbolizer;},getTextSymbolizer:function(){var symbolizer=this.hasTextSymbolizer();if(!symbolizer){symbolizer=new OpenLayers.Symbolizer.Text({graphic:false});}
return symbolizer;},setTextSymbolizer:function(symbolizer){var found;for(var i=0,ii=this.rule.symbolizers.length;i<ii;++i){candidate=this.rule.symbolizers[i];if(this.rule.symbolizers[i]instanceof OpenLayers.Symbolizer.Text){this.rule.symbolizers[i]=symbolizer;found=true;break;}}
if(!found){this.rule.symbolizers.push(symbolizer);}},uniqueRuleName:function(){return OpenLayers.Util.createUniqueID("rule_");},createHeaderPanel:function(){this.symbolizerSwatch=new GeoExt.FeatureRenderer({symbolType:this.symbolType,isFormField:true,fieldLabel:this.symbolText});return{xtype:"form",border:false,labelAlign:"top",defaults:{border:false},style:{"padding":"0.3em 0 0 1em"},items:[{layout:"column",defaults:{border:false,style:{"padding-right":"1em"}},items:[{layout:"form",width:150,items:[{xtype:"textfield",fieldLabel:this.nameText,anchor:"95%",value:this.rule&&(this.rule.title||this.rule.name||""),listeners:{change:function(el,value){this.rule.title=value;this.fireEvent("change",this,this.rule);},scope:this}}]},{layout:"form",width:70,items:[this.symbolizerSwatch]}]}]};},createSymbolizerPanel:function(){var candidate,symbolizer;var Type=OpenLayers.Symbolizer[this.symbolType];var existing=false;if(Type){for(var i=0,ii=this.rule.symbolizers.length;i<ii;++i){candidate=this.rule.symbolizers[i];if(candidate instanceof Type){existing=true;symbolizer=candidate;break;}}
if(!symbolizer){symbolizer=new Type({fill:false,stroke:false});}}else{throw new Error("Appropriate symbolizer type not included in build: "+this.symbolType);}
this.symbolizerSwatch.setSymbolizers([symbolizer],{draw:this.symbolizerSwatch.rendered});var cfg={xtype:"gxp_"+this.symbolType.toLowerCase()+"symbolizer",symbolizer:symbolizer,bodyStyle:{padding:"10px"},border:false,labelWidth:70,defaults:{labelWidth:70},listeners:{change:function(symbolizer){this.symbolizerSwatch.setSymbolizers([symbolizer],{draw:this.symbolizerSwatch.rendered});if(!existing){this.rule.symbolizers.push(symbolizer);existing=true;}
this.fireEvent("change",this,this.rule);},scope:this}};if(this.symbolType==="Point"&&this.pointGraphics){cfg.pointGraphics=this.pointGraphics;}
return cfg;},getSymbolTypeFromRule:function(rule){var candidate,type;for(var i=0,ii=rule.symbolizers.length;i<ii;++i){candidate=rule.symbolizers[i];if(!(candidate instanceof OpenLayers.Symbolizer.Text)){type=candidate.CLASS_NAME.split(".").pop();break;}}
return type;}});Ext.reg('gxp_rulepanel',gxp.RulePanel);Ext.namespace("gxp");gxp.ScaleOverlay=Ext.extend(Ext.Panel,{map:null,zoomLevelText:"Zoom level",initComponent:function(){gxp.ScaleOverlay.superclass.initComponent.call(this);this.cls='map-overlay';if(this.map){if(this.map instanceof GeoExt.MapPanel){this.map=this.map.map;}
this.bind(this.map);}
this.on("beforedestroy",this.unbind,this);},addToMapPanel:function(panel){this.on({afterrender:function(){this.bind(panel.map);},scope:this});},stopMouseEvents:function(e){e.stopEvent();},removeFromMapPanel:function(panel){var el=this.getEl();el.un("mousedown",this.stopMouseEvents,this);el.un("click",this.stopMouseEvents,this);this.unbind();},addScaleLine:function(){var scaleLinePanel=new Ext.BoxComponent({autoEl:{tag:"div",cls:"olControlScaleLine overlay-element overlay-scaleline"}});this.on("afterlayout",function(){scaleLinePanel.getEl().dom.style.position='relative';scaleLinePanel.getEl().dom.style.display='inline';this.getEl().on("click",this.stopMouseEvents,this);this.getEl().on("mousedown",this.stopMouseEvents,this);},this);scaleLinePanel.on('render',function(){var scaleLine=new OpenLayers.Control.ScaleLine({geodesic:true,div:scaleLinePanel.getEl().dom});this.map.addControl(scaleLine);scaleLine.activate();},this);this.add(scaleLinePanel);},handleZoomEnd:function(){var scale=this.zoomStore.queryBy(function(record){return this.map.getZoom()==record.data.level;},this);if(scale.length>0){scale=scale.items[0];this.zoomSelector.setValue("1 : "+parseInt(scale.data.scale,10));}else{if(!this.zoomSelector.rendered){return;}
this.zoomSelector.clearValue();}},addScaleCombo:function(){this.zoomStore=new GeoExt.data.ScaleStore({map:this.map});this.zoomSelector=new Ext.form.ComboBox({emptyText:this.zoomLevelText,tpl:'<tpl for="."><div class="x-combo-list-item">1 : {[parseInt(values.scale)]}</div></tpl>',editable:false,triggerAction:'all',mode:'local',store:this.zoomStore,width:110});this.zoomSelector.on({click:this.stopMouseEvents,mousedown:this.stopMouseEvents,select:function(combo,record,index){this.map.zoomTo(record.data.level);},scope:this});this.map.events.register('zoomend',this,this.handleZoomEnd);var zoomSelectorWrapper=new Ext.Panel({items:[this.zoomSelector],cls:'overlay-element overlay-scalechooser',border:false});this.add(zoomSelectorWrapper);},bind:function(map){this.map=map;this.addScaleLine();this.addScaleCombo();this.doLayout();},unbind:function(){if(this.map&&this.map.events){this.map.events.unregister('zoomend',this,this.handleZoomEnd);}
this.zoomStore=null;this.zoomSelector=null;}});Ext.reg('gxp_scaleoverlay',gxp.ScaleOverlay);Ext.namespace("gxp");gxp.ScaleLimitPanel=Ext.extend(Ext.Panel,{maxScaleDenominatorLimit:40075016.68*39.3701*OpenLayers.DOTS_PER_INCH/256,limitMaxScaleDenominator:true,maxScaleDenominator:undefined,minScaleDenominatorLimit:Math.pow(0.5,19)*40075016.68*39.3701*OpenLayers.DOTS_PER_INCH/256,limitMinScaleDenominator:true,minScaleDenominator:undefined,scaleLevels:20,scaleSliderTemplate:"{scaleType} Scale 1:{scale}",modifyScaleTipContext:Ext.emptyFn,scaleFactor:null,changing:false,border:false,maxScaleLimitText:"Max scale limit",minScaleLimitText:"Min scale limit",initComponent:function(){this.layout="column";this.defaults={border:false,bodyStyle:"margin: 0 5px;"};this.bodyStyle={padding:"5px"};this.scaleSliderTemplate=new Ext.Template(this.scaleSliderTemplate);Ext.applyIf(this,{minScaleDenominator:this.minScaleDenominatorLimit,maxScaleDenominator:this.maxScaleDenominatorLimit});this.scaleFactor=Math.pow(this.maxScaleDenominatorLimit/this.minScaleDenominatorLimit,1/(this.scaleLevels-1));this.scaleSlider=new Ext.Slider({vertical:true,height:100,values:[0,100],listeners:{changecomplete:function(slider,value){this.updateScaleValues(slider);},render:function(slider){slider.thumbs[0].el.setVisible(this.limitMaxScaleDenominator);slider.thumbs[1].el.setVisible(this.limitMinScaleDenominator);slider.setDisabled(!this.limitMinScaleDenominator&&!this.limitMaxScaleDenominator);},scope:this},plugins:[new gxp.slider.Tip({getText:(function(thumb){var index=thumb.slider.thumbs.indexOf(thumb);var value=thumb.value;var scales=this.sliderValuesToScale([thumb.value]);var data={scale:String(scales[0]),zoom:(thumb.value*(this.scaleLevels/100)).toFixed(1),type:(index===0)?"Max":"Min",scaleType:(index===0)?"Min":"Max"};this.modifyScaleTipContext(this,data);return this.scaleSliderTemplate.apply(data);}).createDelegate(this)})]});this.maxScaleDenominatorInput=new Ext.form.NumberField({allowNegative:false,width:100,fieldLabel:"1",value:Math.round(this.maxScaleDenominator),disabled:!this.limitMaxScaleDenominator,validator:(function(value){return!this.limitMinScaleDenominator||(value>this.minScaleDenominator);}).createDelegate(this),listeners:{valid:function(field){var value=Number(field.getValue());var limit=Math.round(this.maxScaleDenominatorLimit);if(value<limit&&value>this.minScaleDenominator){this.maxScaleDenominator=value;this.updateSliderValues();}},change:function(field){var value=Number(field.getValue());var limit=Math.round(this.maxScaleDenominatorLimit);if(value>limit){field.setValue(limit);}else if(value<this.minScaleDenominator){field.setValue(this.minScaleDenominator);}else{this.maxScaleDenominator=value;this.updateSliderValues();}},scope:this}});this.minScaleDenominatorInput=new Ext.form.NumberField({allowNegative:false,width:100,fieldLabel:"1",value:Math.round(this.minScaleDenominator),disabled:!this.limitMinScaleDenominator,validator:(function(value){return!this.limitMaxScaleDenominator||(value<this.maxScaleDenominator);}).createDelegate(this),listeners:{valid:function(field){var value=Number(field.getValue());var limit=Math.round(this.minScaleDenominatorLimit);if(value>limit&&value<this.maxScaleDenominator){this.minScaleDenominator=value;this.updateSliderValues();}},change:function(field){var value=Number(field.getValue());var limit=Math.round(this.minScaleDenominatorLimit);if(value<limit){field.setValue(limit);}else if(value>this.maxScaleDenominator){field.setValue(this.maxScaleDenominator);}else{this.minScaleDenominator=value;this.updateSliderValues();}},scope:this}});this.items=[this.scaleSlider,{xtype:"panel",layout:"form",defaults:{border:false},items:[{labelWidth:90,layout:"form",width:150,items:[{xtype:"checkbox",checked:!!this.limitMinScaleDenominator,fieldLabel:this.maxScaleLimitText,listeners:{check:function(box,checked){this.limitMinScaleDenominator=checked;var slider=this.scaleSlider;slider.setValue(1,100);slider.thumbs[1].el.setVisible(checked);this.minScaleDenominatorInput.setDisabled(!checked);this.updateScaleValues(slider);slider.setDisabled(!this.limitMinScaleDenominator&&!this.limitMaxScaleDenominator);},scope:this}}]},{labelWidth:10,layout:"form",items:[this.minScaleDenominatorInput]},{labelWidth:90,layout:"form",items:[{xtype:"checkbox",checked:!!this.limitMaxScaleDenominator,fieldLabel:this.minScaleLimitText,listeners:{check:function(box,checked){this.limitMaxScaleDenominator=checked;var slider=this.scaleSlider;slider.setValue(0,0);slider.thumbs[0].el.setVisible(checked);this.maxScaleDenominatorInput.setDisabled(!checked);this.updateScaleValues(slider);slider.setDisabled(!this.limitMinScaleDenominator&&!this.limitMaxScaleDenominator);},scope:this}}]},{labelWidth:10,layout:"form",items:[this.maxScaleDenominatorInput]}]}];this.addEvents("change");gxp.ScaleLimitPanel.superclass.initComponent.call(this);},updateScaleValues:function(slider){if(!this.changing){var values=slider.getValues();var resetSlider=false;if(!this.limitMaxScaleDenominator){if(values[0]>0){values[0]=0;resetSlider=true;}}
if(!this.limitMinScaleDenominator){if(values[1]<100){values[1]=100;resetSlider=true;}}
if(resetSlider){slider.setValue(0,values[0]);slider.setValue(1,values[1]);}else{var scales=this.sliderValuesToScale(values);var max=scales[0];var min=scales[1];this.changing=true;this.minScaleDenominatorInput.setValue(min);this.maxScaleDenominatorInput.setValue(max);this.changing=false;this.fireEvent("change",this,(this.limitMinScaleDenominator)?min:undefined,(this.limitMaxScaleDenominator)?max:undefined);}}},updateSliderValues:function(){if(!this.changing){var min=this.minScaleDenominator;var max=this.maxScaleDenominator;var values=this.scaleToSliderValues([max,min]);this.changing=true;this.scaleSlider.setValue(0,values[0]);this.scaleSlider.setValue(1,values[1]);this.changing=false;this.fireEvent("change",this,(this.limitMinScaleDenominator)?min:undefined,(this.limitMaxScaleDenominator)?max:undefined);}},sliderValuesToScale:function(values){var interval=100/(this.scaleLevels-1);return[Math.round(Math.pow(this.scaleFactor,(100-values[0])/interval)*this.minScaleDenominatorLimit),Math.round(Math.pow(this.scaleFactor,(100-values[1])/interval)*this.minScaleDenominatorLimit)];},scaleToSliderValues:function(scales){var interval=100/(this.scaleLevels-1);return[100-(interval*Math.log(scales[0]/this.minScaleDenominatorLimit)/Math.log(this.scaleFactor)),100-(interval*Math.log(scales[1]/this.minScaleDenominatorLimit)/Math.log(this.scaleFactor))];}});Ext.reg('gxp_scalelimitpanel',gxp.ScaleLimitPanel);Ext.namespace("gxp");gxp.TextSymbolizer=Ext.extend(Ext.Panel,{fonts:undefined,symbolizer:null,defaultSymbolizer:null,attributes:null,colorManager:null,haloCache:null,border:false,layout:"form",labelValuesText:"Label values",haloText:"Halo",sizeText:"Size",priorityText:"Priority",labelOptionsText:"Label options",autoWrapText:"Auto wrap",followLineText:"Follow line",maxDisplacementText:"Maximum displacement",repeatText:"Repeat",forceLeftToRightText:"Force left to right",graphicResizeText:"Graphic resize",graphicMarginText:"Graphic margin",graphicTitle:"Graphic",fontColorTitle:"Font color and opacity",positioningText:"Label positioning",anchorPointText:"Anchor point",displacementXText:"Displacement (X-direction)",displacementYText:"Displacement (Y-direction)",perpendicularOffsetText:"Perpendicular offset",priorityHelp:"The higher the value of the specified field, the sooner the label will be drawn (which makes it win in the conflict resolution game)",autoWrapHelp:"Wrap labels that exceed a certain length in pixels",followLineHelp:"Should the label follow the geometry of the line?",maxDisplacementHelp:"Maximum displacement in pixels if label position is busy",repeatHelp:"Repeat labels after a certain number of pixels",forceLeftToRightHelp:"Labels are usually flipped to make them readable. If the character happens to be a directional arrow then this is not desirable",graphic_resizeHelp:"Specifies a mode for resizing label graphics (such as highway shields) to fit the text of the label. The default mode, ‘none’, never modifies the label graphic. In stretch mode, GeoServer will resize the graphic to exactly surround the label text, possibly modifying the image’s aspect ratio. In proportional mode, GeoServer will expand the image to be large enough to surround the text while preserving its original aspect ratio.",graphic_marginHelp:"Similar to the margin shorthand property in CSS for HTML, its interpretation varies depending on how many margin values are provided: 1 = use that margin length on all sides of the label 2 = use the first for top & bottom margins and the second for left & right margins. 3 = use the first for the top margin, second for left & right margins, third for the bottom margin. 4 = use the first for the top margin, second for the right margin, third for the bottom margin, and fourth for the left margin.",initComponent:function(){if(!this.symbolizer){this.symbolizer={};}
Ext.applyIf(this.symbolizer,this.defaultSymbolizer);if(!this.symbolizer.vendorOptions){this.symbolizer.vendorOptions={};}
this.haloCache={};this.attributes.load();var defAttributesComboConfig={xtype:"combo",fieldLabel:this.labelValuesText,store:this.attributes,mode:'local',lastQuery:'',editable:false,triggerAction:"all",allowBlank:false,displayField:"name",valueField:"name",value:this.symbolizer.label&&this.symbolizer.label.replace(/^\${(.*)}$/,"$1"),listeners:{select:function(combo,record){this.symbolizer.label="${"+record.get("name")+"}";this.fireEvent("change",this.symbolizer);},scope:this},width:120};this.attributesComboConfig=this.attributesComboConfig||{};Ext.applyIf(this.attributesComboConfig,defAttributesComboConfig);this.labelWidth=80;this.items=[this.attributesComboConfig,{cls:"x-html-editor-tb",style:"background: transparent; border: none; padding: 0 0em 0.5em;",xtype:"toolbar",items:[{xtype:"gxp_fontcombo",fonts:this.fonts||undefined,width:110,value:this.symbolizer.fontFamily,listeners:{select:function(combo,record){this.symbolizer.fontFamily=record.get("field1");this.fireEvent("change",this.symbolizer);},scope:this}},{xtype:"tbtext",text:this.sizeText+": "},{xtype:"numberfield",allowNegative:false,emptyText:OpenLayers.Renderer.defaultSymbolizer.fontSize,value:this.symbolizer.fontSize,width:30,listeners:{change:function(field,value){value=parseFloat(value);if(isNaN(value)){delete this.symbolizer.fontSize;}else{this.symbolizer.fontSize=value;}
this.fireEvent("change",this.symbolizer);},scope:this}},{enableToggle:true,cls:"x-btn-icon",iconCls:"x-edit-bold",pressed:this.symbolizer.fontWeight==="bold",listeners:{toggle:function(button,pressed){this.symbolizer.fontWeight=pressed?"bold":"normal";this.fireEvent("change",this.symbolizer);},scope:this}},{enableToggle:true,cls:"x-btn-icon",iconCls:"x-edit-italic",pressed:this.symbolizer.fontStyle==="italic",listeners:{toggle:function(button,pressed){this.symbolizer.fontStyle=pressed?"italic":"normal";this.fireEvent("change",this.symbolizer);},scope:this}}]},{xtype:"gxp_fillsymbolizer",fillText:this.fontColorTitle,symbolizer:this.symbolizer,colorProperty:"fontColor",opacityProperty:"fontOpacity",checkboxToggle:false,autoHeight:true,width:213,labelWidth:70,plugins:this.colorManager&&[new this.colorManager()],listeners:{change:function(symbolizer){this.fireEvent("change",this.symbolizer);},scope:this}},{xtype:"fieldset",title:this.graphicTitle,checkboxToggle:true,hideMode:'offsets',collapsed:!(this.symbolizer.fillColor||this.symbolizer.fillOpacity),labelWidth:70,items:[{xtype:"gxp_pointsymbolizer",symbolizer:this.symbolizer,border:false,labelWidth:70},this.createVendorSpecificField({name:"graphic-resize",xtype:"combo",store:["none","stretch","proportional"],mode:'local',width:100,triggerAction:'all',fieldLabel:this.graphicResizeText}),this.createVendorSpecificField({name:"graphic-margin",width:100,fieldLabel:this.graphicMarginText,xtype:"textfield"})],listeners:{collapse:function(){this.graphicCache={externalGraphic:this.symbolizer.externalGraphic,fillColor:this.symbolizer.fillColor,fillOpacity:this.symbolizer.fillOpacity,graphicName:this.symbolizer.graphicName,pointRadius:this.symbolizer.pointRadius,rotation:this.symbolizer.rotation,strokeColor:this.symbolizer.strokeColor,strokeWidth:this.symbolizer.strokeWidth,strokeDashStyle:this.symbolizer.strokeDashStyle};delete this.symbolizer.externalGraphic;delete this.symbolizer.fillColor;delete this.symbolizer.fillOpacity;delete this.symbolizer.graphicName;delete this.symbolizer.pointRadius;delete this.symbolizer.rotation;delete this.symbolizer.strokeColor;delete this.symbolizer.strokeWidth;delete this.symbolizer.strokeDashStyle;this.fireEvent("change",this.symbolizer)},expand:function(){Ext.apply(this.symbolizer,this.graphicCache);this.doLayout();this.fireEvent("change",this.symbolizer);},scope:this}},{xtype:"fieldset",title:this.haloText,checkboxToggle:true,collapsed:!(this.symbolizer.haloRadius||this.symbolizer.haloColor||this.symbolizer.haloOpacity),autoHeight:true,labelWidth:50,items:[{xtype:"numberfield",fieldLabel:this.sizeText,anchor:"89%",allowNegative:false,emptyText:OpenLayers.Renderer.defaultSymbolizer.haloRadius,value:this.symbolizer.haloRadius,listeners:{change:function(field,value){value=parseFloat(value);if(isNaN(value)){delete this.symbolizer.haloRadius;}else{this.symbolizer.haloRadius=value;}
this.fireEvent("change",this.symbolizer);},scope:this}},{xtype:"gxp_fillsymbolizer",symbolizer:{fillColor:("haloColor"in this.symbolizer)?this.symbolizer.haloColor:OpenLayers.Renderer.defaultSymbolizer.haloColor,fillOpacity:("haloOpacity"in this.symbolizer)?this.symbolizer.haloOpacity:OpenLayers.Renderer.defaultSymbolizer.haloOpacity*100},defaultColor:OpenLayers.Renderer.defaultSymbolizer.haloColor,checkboxToggle:false,width:190,labelWidth:60,plugins:this.colorManager&&[new this.colorManager()],listeners:{change:function(symbolizer){this.symbolizer.haloColor=symbolizer.fillColor;this.symbolizer.haloOpacity=symbolizer.fillOpacity;this.fireEvent("change",this.symbolizer);},scope:this}}],listeners:{collapse:function(){this.haloCache={haloRadius:this.symbolizer.haloRadius,haloColor:this.symbolizer.haloColor,haloOpacity:this.symbolizer.haloOpacity};delete this.symbolizer.haloRadius;delete this.symbolizer.haloColor;delete this.symbolizer.haloOpacity;this.fireEvent("change",this.symbolizer)},expand:function(){Ext.apply(this.symbolizer,this.haloCache);this.doLayout();this.fireEvent("change",this.symbolizer);},scope:this}},{xtype:"fieldset",title:this.positioningText,checkboxToggle:true,collapsed:true,autoHeight:true,labelWidth:75,defaults:{width:100},items:[Ext.applyIf({fieldLabel:this.anchorPointText,value:this.symbolizer.labelAlign||"lb",store:[['lt','Left-top'],['ct','Center-top'],['rt','Right-top'],['lm','Left-center'],['cm','Center'],['rm','Right-center'],['lb','Left-bottom'],['cb','Center-bottom'],['rb','Right-bottom']],listeners:{select:function(combo,record){this.symbolizer.labelAlign=combo.getValue();delete this.symbolizer.labelAnchorPointX;delete this.symbolizer.labelAnchorPointY;this.fireEvent("change",this.symbolizer);},scope:this}},this.attributesComboConfig),{xtype:"numberfield",fieldLabel:this.displacementXText,value:this.symbolizer.labelXOffset,listeners:{change:function(field,value){this.symbolizer.labelXOffset=value;this.fireEvent("change",this.symbolizer);},scope:this}},{xtype:"numberfield",fieldLabel:this.displacementYText,value:this.symbolizer.labelYOffset,listeners:{change:function(field,value){this.symbolizer.labelYOffset=value;this.fireEvent("change",this.symbolizer);},scope:this}},{xtype:"numberfield",fieldLabel:this.perpendicularOffsetText,value:this.symbolizer.labelPerpendicularOffset,listeners:{change:function(field,value){if(Ext.isEmpty(value)){delete this.symbolizer.labelPerpendicularOffset;}else{this.symbolizer.labelPerpendicularOffset=value;}
this.fireEvent("change",this.symbolizer);},scope:this}}]},{xtype:"fieldset",title:this.priorityText,checkboxToggle:true,collapsed:true,autoHeight:true,labelWidth:50,items:[Ext.applyIf({fieldLabel:this.priorityText,value:this.symbolizer.priority&&this.symbolizer.priority.replace(/^\${(.*)}$/,"$1"),allowBlank:true,name:'priority',listeners:{select:function(combo,record){this.symbolizer[combo.name]="${"+record.get("name")+"}";this.fireEvent("change",this.symbolizer);},render:this.attachHelpToField,scope:this}},this.attributesComboConfig)]},{xtype:"fieldset",title:this.labelOptionsText,checkboxToggle:true,collapsed:true,autoHeight:true,labelWidth:80,defaults:{width:100},items:[this.createVendorSpecificField({name:'autoWrap',allowBlank:false,fieldLabel:this.autoWrapText}),this.createVendorSpecificField({name:'followLine',xtype:'checkbox',fieldLabel:this.followLineText}),this.createVendorSpecificField({name:'maxDisplacement',fieldLabel:this.maxDisplacementText}),this.createVendorSpecificField({name:'repeat',fieldLabel:this.repeatText}),this.createVendorSpecificField({name:'forceLeftToRight',xtype:"checkbox",fieldLabel:this.forceLeftToRightText})]}];this.addEvents("change");gxp.TextSymbolizer.superclass.initComponent.call(this);},createVendorSpecificField:function(config){var listener=function(field,value){if(Ext.isEmpty(value)){delete this.symbolizer.vendorOptions[config.name];}else{this.symbolizer.vendorOptions[config.name]=value;}
this.fireEvent("change",this.symbolizer);};return Ext.applyIf(config,{xtype:"numberfield",allowNegative:false,value:this.symbolizer.vendorOptions[config.name],listeners:{render:this.attachHelpToField,change:listener,check:listener,scope:this}});},attachHelpToField:function(c){var key=c.name.replace(/-/g,'_')+'Help';Ext.QuickTips.register({target:c.getEl(),dismissDelay:20000,text:this[key]});}});Ext.reg('gxp_textsymbolizer',gxp.TextSymbolizer);Ext.namespace("gxp");gxp.Viewer=Ext.extend(Ext.util.Observable,{defaultToolType:"gxp_tool",tools:null,selectedLayer:null,authenticate:null,constructor:function(config){this.addEvents("ready","portalready","beforelayerselectionchange","layerselectionchange","featureedit","authorizationchange");Ext.apply(this,{layerSources:{},portalItems:[]});this.createLayerRecordQueue=[];(config.loadConfig||this.loadConfig).call(this,config,this.applyConfig);gxp.Viewer.superclass.constructor.apply(this,arguments);},selectLayer:function(record){record=record||null;var changed=false;var allow=this.fireEvent("beforelayerselectionchange",record);if(allow!==false){changed=true;if(this.selectedLayer){this.selectedLayer.set("selected",false);}
this.selectedLayer=record;if(this.selectedLayer){this.selectedLayer.set("selected",true);}
this.fireEvent("layerselectionchange",record);}
return changed;},loadConfig:function(config){this.applyConfig(config);},applyConfig:function(config){this.initialConfig=Ext.apply({},config);Ext.apply(this,this.initialConfig);this.load();},load:function(){if(this.proxy){OpenLayers.ProxyHost=this.proxy;}
this.initMapPanel();this.initTools();var config,queue=[];for(var key in this.sources){queue.push(this.createSourceLoader(key));}
queue.push(function(done){Ext.onReady(function(){this.initPortal();done();},this);});gxp.util.dispatch(queue,this.activate,this);},createSourceLoader:function(key){return function(done){var config=this.sources[key];config.projection=this.initialConfig.map.projection;this.addLayerSource({id:key,config:config,callback:done,fallback:function(source,msg,details){done();},scope:this});};},addLayerSource:function(options){var id=options.id||Ext.id(null,"gxp-source-");var source;var config=options.config;config.id=id;try{source=Ext.ComponentMgr.createPlugin(config,this.defaultSourceType);}catch(err){throw new Error("Could not create new source plugin with ptype: "+options.config.ptype);}
source.on({ready:{fn:function(){var callback=options.callback||Ext.emptyFn;callback.call(options.scope||this,id);},scope:this,single:true},failure:{fn:function(){var fallback=options.fallback||Ext.emptyFn;delete this.layerSources[id];fallback.apply(options.scope||this,arguments);},scope:this,single:true}});this.layerSources[id]=source;source.init(this);return source;},initMapPanel:function(){var config=Ext.apply({},this.initialConfig.map);var mapConfig={};var baseLayerConfig={wrapDateLine:config.wrapDateLine!==undefined?config.wrapDateLine:true,maxResolution:config.maxResolution,numZoomLevels:config.numZoomLevels,displayInLayerSwitcher:false};if(this.initialConfig.map){var props="theme,controls,resolutions,projection,units,maxExtent,restrictedExtent,maxResolution,numZoomLevels,panMethod".split(",");var prop;for(var i=props.length-1;i>=0;--i){prop=props[i];if(prop in config){mapConfig[prop]=config[prop];delete config[prop];}}}
this.mapPanel=Ext.ComponentMgr.create(Ext.applyIf({xtype:config.xtype||"gx_mappanel",map:Ext.applyIf({theme:mapConfig.theme||null,controls:mapConfig.controls||[new OpenLayers.Control.Navigation({zoomWheelOptions:{interval:250},dragPanOptions:{enableKinetic:true}}),new OpenLayers.Control.PanPanel(),new OpenLayers.Control.ZoomPanel(),new OpenLayers.Control.Attribution()],maxExtent:mapConfig.maxExtent&&OpenLayers.Bounds.fromArray(mapConfig.maxExtent),restrictedExtent:mapConfig.restrictedExtent&&OpenLayers.Bounds.fromArray(mapConfig.restrictedExtent),numZoomLevels:mapConfig.numZoomLevels||20},mapConfig),center:config.center&&new OpenLayers.LonLat(config.center[0],config.center[1]),resolutions:config.resolutions,forceInitialExtent:true,layers:[new OpenLayers.Layer(null,baseLayerConfig)],items:this.mapItems,plugins:this.mapPlugins,tbar:config.tbar||new Ext.Toolbar({hidden:true})},config));this.mapPanel.getTopToolbar().on({afterlayout:this.mapPanel.map.updateSize,show:this.mapPanel.map.updateSize,hide:this.mapPanel.map.updateSize,scope:this.mapPanel.map});this.mapPanel.layers.on({"add":function(store,records){var record;for(var i=records.length-1;i>=0;i--){record=records[i];if(record.get("selected")===true){this.selectLayer(record);}}},"remove":function(store,record){if(record.get("selected")===true){this.selectLayer();}},scope:this});},initTools:function(){this.tools={};if(this.initialConfig.tools&&this.initialConfig.tools.length>0){var tool;for(var i=0,len=this.initialConfig.tools.length;i<len;i++){try{tool=Ext.ComponentMgr.createPlugin(this.initialConfig.tools[i],this.defaultToolType);}catch(err){throw new Error("Could not create tool plugin with ptype: "+this.initialConfig.tools[i].ptype);}
tool.init(this);}}},initPortal:function(){var config=this.portalConfig||{};if(this.portalItems.length===0){this.mapPanel.region="center";this.portalItems.push(this.mapPanel);}
this.portal=Ext.ComponentMgr.create(Ext.applyIf(config,{layout:"fit",hideBorders:true,items:{layout:"border",deferredRender:false,items:this.portalItems}}),config.renderTo?"panel":"viewport");this.fireEvent("portalready");},activate:function(){Ext.QuickTips.init();this.addLayers();this.checkLayerRecordQueue();this.fireEvent("ready");},addLayers:function(){var mapConfig=this.initialConfig.map;if(mapConfig&&mapConfig.layers){var conf,source,record,baseRecords=[],overlayRecords=[];for(var i=0;i<mapConfig.layers.length;++i){conf=mapConfig.layers[i];source=this.layerSources[conf.source];if(source){record=source.createLayerRecord(conf);if(record){if(record.get("group")==="background"){baseRecords.push(record);}else{overlayRecords.push(record);}}}}
var panel=this.mapPanel;var map=panel.map;var records=baseRecords.concat(overlayRecords);if(records.length){panel.layers.add(records);}}},getLayerRecordFromMap:function(config){var record=null;if(this.mapPanel){this.mapPanel.layers.each(function(rec){if(rec.get("source")==config.source&&rec.get("name")==config.name){record=rec;return false;}});}
return record;},createLayerRecord:function(config,callback,scope){this.createLayerRecordQueue.push({config:config,callback:callback,scope:scope});this.checkLayerRecordQueue();},checkLayerRecordQueue:function(){var request,source,s,record,called;var remaining=[];for(var i=0,ii=this.createLayerRecordQueue.length;i<ii;++i){called=false;request=this.createLayerRecordQueue[i];s=request.config.source;if(s in this.layerSources){source=this.layerSources[s];record=source.createLayerRecord(request.config);if(record){(function(req,rec){window.setTimeout(function(){req.callback.call(req.scope,rec);},0);})(request,record);called=true;}else if(source.lazy){source.store.load({callback:this.checkLayerRecordQueue,scope:this});}}
if(!called){remaining.push(request);}}
this.createLayerRecordQueue=remaining;},getSource:function(layerRec){return layerRec&&this.layerSources[layerRec.get("source")];},getState:function(){var state=Ext.apply({},this.initialConfig);var center=this.mapPanel.map.getCenter();Ext.apply(state.map,{center:[center.lon,center.lat],zoom:this.mapPanel.map.zoom,layers:[]});var sources={};this.mapPanel.layers.each(function(record){var layer=record.getLayer();if(layer.displayInLayerSwitcher){var id=record.get("source");var source=this.layerSources[id];if(!source){throw new Error("Could not find source for layer '"+record.get("name")+"'");}
state.map.layers.push(source.getConfigForRecord(record));if(!sources[id]){sources[id]=source.getState();}}},this);Ext.apply(this.sources,sources);state.tools=[];Ext.iterate(this.tools,function(key,val,obj){if(val.getState!=gxp.plugins.Tool.prototype.getState){state.tools.push(val.getState());}});return state;},isAuthorized:function(roles){var authorized=true;if(this.authorizedRoles){authorized=false;if(!roles){roles="ROLE_ADMINISTRATOR";}
if(!Ext.isArray(roles)){roles=[roles];}
for(var i=roles.length-1;i>=0;--i){if(~this.authorizedRoles.indexOf(roles[i])){authorized=true;break;}}}
return authorized;},setAuthorizedRoles:function(authorizedRoles){this.authorizedRoles=authorizedRoles;this.fireEvent("authorizationchange");},cancelAuthentication:function(){if(this._authFn){this.un("authorizationchange",this._authFn,this);}
this.fireEvent("authorizationchange");},isAuthenticated:function(role){return!this.authorizedRoles||this.authorizedRoles.length>0;},doAuthorized:function(roles,callback,scope){if(this.isAuthorized(roles)||!this.authenticate){window.setTimeout(function(){callback.call(scope);},0);}else{this.authenticate();this._authFn=function authFn(){delete this._authFn;this.doAuthorized(roles,callback,scope,true);};this.on("authorizationchange",this._authFn,this,{single:true});}},destroy:function(){this.mapPanel.destroy();this.portal&&this.portal.destroy();}});(function(){OpenLayers.DOTS_PER_INCH=25.4/0.28;})();Ext.ns("gxp.tree");gxp.tree.TreeGridNodeUI=Ext.ux&&Ext.ux.tree&&Ext.ux.tree.TreeGridNodeUI&&Ext.extend(Ext.ux.tree.TreeGridNodeUI,{renderElements:function(n,a,targetNode,bulkRender){var t=n.getOwnerTree(),cols=t.columns,c=cols[0],i,buf,len;this.indentMarkup=n.parentNode?n.parentNode.ui.getChildIndent():'';var cb=Ext.isBoolean(a.checked);buf=['<tbody class="x-tree-node">','<tr ext:tree-node-id="',n.id,'" class="x-tree-node-el x-tree-node-leaf ',a.cls,'">','<td class="x-treegrid-col">','<span class="x-tree-node-indent">',this.indentMarkup,"</span>",'<img src="',this.emptyIcon,'" class="x-tree-ec-icon x-tree-elbow" />','<img src="',a.icon||this.emptyIcon,'" class="x-tree-node-icon',(a.icon?" x-tree-node-inline-icon":""),(a.iconCls?" "+a.iconCls:""),'" unselectable="on" />',cb?('<input class="x-tree-node-cb" type="checkbox" '+(a.checked?'checked="checked" />':'/>')):'','<a hidefocus="on" class="x-tree-node-anchor" href="',a.href?a.href:'#','" tabIndex="1" ',a.hrefTarget?' target="'+a.hrefTarget+'"':'','>','<span unselectable="on">',(c.tpl?c.tpl.apply(a):a[c.dataIndex]||c.text),'</span></a>','</td>'];for(i=1,len=cols.length;i<len;i++){c=cols[i];buf.push('<td class="x-treegrid-col ',(c.cls?c.cls:''),'">','<div unselectable="on" class="x-treegrid-text"',(c.align?' style="text-align: '+c.align+';"':''),'>',(c.tpl?c.tpl.apply(a):a[c.dataIndex]),'</div>','</td>');}
buf.push('</tr><tr class="x-tree-node-ct"><td colspan="',cols.length,'">','<table class="x-treegrid-node-ct-table" cellpadding="0" cellspacing="0" style="table-layout: fixed; display: none; width: ',t.innerCt.getWidth(),'px;"><colgroup>');for(i=0,len=cols.length;i<len;i++){buf.push('<col style="width: ',(cols[i].hidden?0:cols[i].width),'px;" />');}
buf.push('</colgroup></table></td></tr></tbody>');if(bulkRender!==true&&n.nextSibling&&n.nextSibling.ui.getEl()){this.wrap=Ext.DomHelper.insertHtml("beforeBegin",n.nextSibling.ui.getEl(),buf.join(''));}else{this.wrap=Ext.DomHelper.insertHtml("beforeEnd",targetNode,buf.join(''));}
this.elNode=this.wrap.childNodes[0];this.ctNode=this.wrap.childNodes[1].firstChild.firstChild;var cs=this.elNode.firstChild.childNodes;this.indentNode=cs[0];this.ecNode=cs[1];this.iconNode=cs[2];var index=3;if(cb){this.checkbox=cs[3];this.checkbox.defaultChecked=this.checkbox.checked;index++;}
this.anchor=cs[index];this.textNode=cs[index].firstChild;}});Ext.ns("gxp.tree");gxp.tree.SymbolizerLoader=function(config){Ext.apply(this,config);gxp.tree.SymbolizerLoader.superclass.constructor.call(this);};Ext.extend(gxp.tree.SymbolizerLoader,Ext.util.Observable,{symbolizers:null,load:function(node,callback){if(this.fireEvent("beforeload",this,node)){while(node.firstChild){node.removeChild(node.firstChild);}
var divTpl=new Ext.Template('<div class="gxp-symbolgrid-swatch" id="{id}"></div>');for(var i=0,ii=this.symbolizers.length;i<ii;++i){var symbolizer=this.symbolizers[i];var key=symbolizer.CLASS_NAME.substring(symbolizer.CLASS_NAME.lastIndexOf(".")+1);var fullSymbolizer=symbolizer.clone();if(key==='Text'){fullSymbolizer.label="Ab";if(fullSymbolizer.fillColor||fullSymbolizer.graphicName){fullSymbolizer.graphic=true;}}
var id=Ext.id();var child=this.createNode({type:key,expanded:true,rendererId:id,originalSymbolizer:symbolizer,symbolizer:fullSymbolizer,iconCls:'gxp-icon-symbolgrid-'+key.toLowerCase(),preview:divTpl.applyTemplate({id:id})});if(key==="Polygon"||key==="Point"){id=Ext.id();var strokeSym=fullSymbolizer.clone();strokeSym.fill=false;child.appendChild(this.createNode({checked:fullSymbolizer.stroke!==undefined?fullSymbolizer.stroke:true,iconCls:"gxp-icon-symbolgrid-none",type:'Stroke',symbolizer:strokeSym,rendererId:id,preview:divTpl.applyTemplate({id:id})}));id=Ext.id();var fillSym=fullSymbolizer.clone();fillSym.stroke=false;child.appendChild(this.createNode({checked:fullSymbolizer.fill!==undefined?fullSymbolizer.fill:true,iconCls:"gxp-icon-symbolgrid-none",type:'Fill',symbolizer:fillSym,rendererId:id,preview:divTpl.applyTemplate({id:id})}));}else if(key==="Line"){id=Ext.id();child.appendChild(this.createNode({type:'Stroke',checked:true,iconCls:"gxp-icon-symbolgrid-none",symbolizer:fullSymbolizer.clone(),rendererId:id,preview:divTpl.applyTemplate({id:id})}));}else if(key==="Text"){id=Ext.id();var labelSym=fullSymbolizer.clone();labelSym.graphic=false;child.appendChild(this.createNode({checked:true,iconCls:"gxp-icon-symbolgrid-none",type:'Label',symbolizer:labelSym,rendererId:id,preview:divTpl.applyTemplate({id:id})}));id=Ext.id();var graphicSym=fullSymbolizer.clone();graphicSym.label="";child.appendChild(this.createNode({checked:fullSymbolizer.graphic,iconCls:"gxp-icon-symbolgrid-none",type:'Graphic',symbolizer:graphicSym,rendererId:id,preview:divTpl.applyTemplate({id:id})}));}
node.appendChild(child);}
if(typeof callback=="function"){callback();}
this.fireEvent("load",this,node);}},createNode:function(attr){if(this.baseAttrs){Ext.apply(attr,this.baseAttrs);}
if(!attr.uiProvider){attr.uiProvider=gxp.tree.TreeGridNodeUI;}
attr.nodeType=attr.nodeType||"node";return new Ext.tree.TreePanel.nodeTypes[attr.nodeType](attr);}});Ext.namespace("gxp.grid");gxp.grid.SymbolizerGrid=Ext.ux&&Ext.ux.tree&&Ext.ux.tree.TreeGrid&&Ext.extend(Ext.ux.tree.TreeGrid,{symbolizers:null,enableHdMenu:false,enableSort:false,useArrows:false,columnResize:false,cls:"gxp-symbolgrid",typeTitle:"Symbolizer Type",previewTitle:"Preview",initComponent:function(){this.on('checkchange',this.onCheckChange,this);this.loader=new gxp.tree.SymbolizerLoader({symbolizers:this.symbolizers});this.columns=[{header:this.typeTitle,dataIndex:'type',width:200},{header:this.previewTitle,width:100,dataIndex:'preview'}];gxp.grid.SymbolizerGrid.superclass.initComponent.call(this);},getSymbolizers:function(){var symbolizers=[];this.root.eachChild(function(n){var childVisible=false;n.eachChild(function(c){var type=c.attributes.type.toLowerCase();if(type!=="label"){n.attributes.originalSymbolizer[type]=c.attributes.checked;}
if(c.attributes.checked===true){childVisible=true;}});if(childVisible){symbolizers.push(n.attributes.originalSymbolizer);}});return symbolizers;},beforeDestroy:function(){this.root.cascade(function(node){if(node.attributes.featureRenderer){node.attributes.featureRenderer.destroy();node.attributes.featureRenderer=null;}});gxp.grid.SymbolizerGrid.superclass.onDestroy.call(this);},onCheckChange:function(node,checked){var a=node.attributes;var r=a.featureRenderer;var type=a.type.toLowerCase();var symbolizer=a.symbolizer;var fullSymbolizer=node.parentNode.attributes.symbolizer;if(type!=="label"){if(type==='graphic'){var label=node.parentNode.findChild('type','Label');if(label!==null){var labelChecked=label.attributes.checked;if((labelChecked&&checked)||!checked){fullSymbolizer[type]=symbolizer[type]=checked;}else{node.getUI().toggleCheck(false);}}}else{fullSymbolizer[type]=symbolizer[type]=checked;}}else{if(!checked){symbolizer[type]=fullSymbolizer[type]="";var graphic=node.parentNode.findChild('type','Graphic');if(graphic!==null){graphic.getUI().toggleCheck(false);}}else{symbolizer[type]=fullSymbolizer[type]="Ab";}}
if(node.parentNode.attributes.featureRenderer){node.parentNode.attributes.featureRenderer.update({symbolizers:[fullSymbolizer]});}
r.update({symbolizers:[symbolizer]});},afterRender:function(){gxp.grid.SymbolizerGrid.superclass.afterRender.call(this);this.root.cascade(function(node){if(node.attributes.rendererId){var ct=Ext.get(node.attributes.rendererId);if(ct){node.attributes.featureRenderer=new GeoExt.FeatureRenderer({symbolizers:[node.attributes.symbolizer],renderTo:ct,width:21,height:21});}}});}});gxp.grid.SymbolizerGrid&&Ext.reg('gxp_symbolgrid',gxp.grid.SymbolizerGrid);Ext.namespace("gxp.form");gxp.form.AutoCompleteComboBox=Ext.extend(Ext.form.ComboBox,{xtype:"gxp_autocompletecombo",fieldName:null,featureType:null,featurePrefix:null,fieldLabel:null,geometryName:null,maxFeatures:500,url:null,srsName:null,autoHeight:true,hideTrigger:true,customSortInfo:null,initComponent:function(){var fields=[{name:this.fieldName}];var propertyNames=[this.fieldName];if(this.geometryName!==null){fields.push({name:this.geometryName});propertyNames.push(this.geometryName);}
if(!this.name){this.name=this.fieldName;}
this.valueField=this.displayField=this.fieldName;this.tpl=new Ext.XTemplate('<tpl for="."><div class="x-form-field">','{'+this.fieldName+'}','</div></tpl>');this.itemSelector='div.x-form-field';this.store=new Ext.data.Store({fields:fields,reader:new gxp.data.AutoCompleteReader({uniqueField:this.fieldName},propertyNames),proxy:new gxp.data.AutoCompleteProxy({protocol:new OpenLayers.Protocol.WFS({version:"1.1.0",url:this.url,featureType:this.featureType,featurePrefix:this.featurePrefix,srsName:this.srsName,propertyNames:propertyNames,maxFeatures:this.maxFeatures}),setParamsAsOptions:true}),sortInfo:this.customSortInfo&&{field:this.fieldName,direction:this.customSortInfo.direction}});if(this.customSortInfo){this.store.createSortFunction=this.createCustomSortFunction();}
return gxp.form.AutoCompleteComboBox.superclass.initComponent.apply(this,arguments);},createCustomSortFunction:function(){var matchRE=new RegExp(this.customSortInfo.matcher);var num=this.customSortInfo.parts.length;var orderLookup=new Array(num);var part;for(var i=0;i<num;++i){part=this.customSortInfo.parts[i];orderLookup[i]={index:i,sortType:Ext.data.SortTypes[part.sortType||"none"],order:part.order||0};}
orderLookup.sort(function(a,b){return a.order-b.order;});return function(field,direction){direction=direction||"ASC";var directionModifier=direction.toUpperCase()=="DESC"?-1:1;return function(r1,r2){var d1=r1.data[field];var d2=r2.data[field];var matches1=matchRE.exec(d1)||[];var matches2=matchRE.exec(d2)||[];var cmp,v1,v2,lookup;for(var i=0,ii=orderLookup.length;i<ii;++i){lookup=orderLookup[i];v1=lookup.sortType(matches1[lookup.index+1]||d1);v2=lookup.sortType(matches2[lookup.index+1]||d2);cmp=(v1>v2?1:(v1<v2?-1:0));if(cmp){break;}}
return directionModifier*cmp;};};}});Ext.reg(gxp.form.AutoCompleteComboBox.prototype.xtype,gxp.form.AutoCompleteComboBox);Ext.namespace("gxp.form");gxp.form.ComparisonComboBox=Ext.extend(Ext.form.ComboBox,{allowedTypes:[[OpenLayers.Filter.Comparison.EQUAL_TO,"="],[OpenLayers.Filter.Comparison.NOT_EQUAL_TO,"<>"],[OpenLayers.Filter.Comparison.LESS_THAN,"<"],[OpenLayers.Filter.Comparison.GREATER_THAN,">"],[OpenLayers.Filter.Comparison.LESS_THAN_OR_EQUAL_TO,"<="],[OpenLayers.Filter.Comparison.GREATER_THAN_OR_EQUAL_TO,">="],[OpenLayers.Filter.Comparison.LIKE,"like"],[OpenLayers.Filter.Comparison.BETWEEN,"between"]],allowBlank:false,mode:"local",typeAhead:true,forceSelection:true,triggerAction:"all",width:50,editable:true,initComponent:function(){var defConfig={displayField:"name",valueField:"value",store:new Ext.data.SimpleStore({data:this.allowedTypes,fields:["value","name"]}),value:(this.value===undefined)?this.allowedTypes[0][0]:this.value,listeners:{"blur":function(){var index=this.store.findExact("value",this.getValue());if(index!=-1){this.fireEvent("select",this,this.store.getAt(index));}else if(this.startValue!=null){this.setValue(this.startValue);}}}};Ext.applyIf(this,defConfig);gxp.form.ComparisonComboBox.superclass.initComponent.call(this);}});Ext.reg("gxp_comparisoncombo",gxp.form.ComparisonComboBox);Ext.namespace("gxp.form");gxp.form.ColorField=Ext.extend(Ext.form.TextField,{cssColors:{aqua:"#00FFFF",black:"#000000",blue:"#0000FF",fuchsia:"#FF00FF",gray:"#808080",green:"#008000",lime:"#00FF00",maroon:"#800000",navy:"#000080",olive:"#808000",purple:"#800080",red:"#FF0000",silver:"#C0C0C0",teal:"#008080",white:"#FFFFFF",yellow:"#FFFF00"},defaultBackground:"#ffffff",initComponent:function(){if(this.value){this.value=this.hexToColor(this.value);}
gxp.form.ColorField.superclass.initComponent.call(this);this.on({render:this.colorField,valid:this.colorField,scope:this});},isDark:function(hex){var dark=false;if(hex){var r=parseInt(hex.substring(1,3),16)/255;var g=parseInt(hex.substring(3,5),16)/255;var b=parseInt(hex.substring(5,7),16)/255;var brightness=(r*0.299)+(g*0.587)+(b*0.144);dark=brightness<0.5;}
return dark;},colorField:function(){var color=this.colorToHex(this.getValue())||this.defaultBackground;this.getEl().setStyle({"background":color,"color":this.isDark(color)?"#ffffff":"#000000"});},getHexValue:function(){return this.colorToHex(gxp.form.ColorField.superclass.getValue.apply(this,arguments));},getValue:function(){var v=this.getHexValue();var o=this.initialConfig.value;if(v===this.hexToColor(o)){v=o;}
return v;},setValue:function(value){gxp.form.ColorField.superclass.setValue.apply(this,[this.hexToColor(value)]);},colorToHex:function(color){if(!color){return color;}
var hex;if(color.match(/^#[0-9a-f]{6}$/i)){hex=color;}else{hex=this.cssColors[color.toLowerCase()]||null;}
return hex;},hexToColor:function(hex){if(!hex){return hex;}
var color=hex;for(var c in this.cssColors){if(this.cssColors[c]==color.toUpperCase()){color=c;break;}}
return color;}});Ext.reg("gxp_colorfield",gxp.form.ColorField);Ext.namespace("gxp.form");gxp.form.FilterField=Ext.extend(Ext.form.CompositeField,{lowerBoundaryTip:"lower boundary",upperBoundaryTip:"upper boundary",filter:null,attributes:null,attributesComboConfig:null,initComponent:function(){if(!this.filter){this.filter=this.createDefaultFilter();}
var mode="remote",attributes=new GeoExt.data.AttributeStore();if(this.attributes){if(this.attributes.getCount()!=0){mode="local";this.attributes.each(function(r){var match=/gml:((Multi)?(Point|Line|Polygon|Curve|Surface|Geometry)).*/.exec(r.get("type"));match||attributes.add([r]);});}else{attributes=this.attributes;}}
var defAttributesComboConfig={xtype:"combo",store:attributes,editable:mode=="local",typeAhead:true,forceSelection:true,mode:mode,triggerAction:"all",ref:"property",allowBlank:this.allowBlank,displayField:"name",valueField:"name",value:this.filter.property,listeners:{select:function(combo,record){this.items.get(1).enable();this.filter.property=record.get("name");this.fireEvent("change",this.filter,this);},"blur":function(combo){var index=combo.store.findExact("name",combo.getValue());if(index!=-1){combo.fireEvent("select",combo,combo.store.getAt(index));}else if(combo.startValue!=null){combo.setValue(combo.startValue);}},scope:this},width:120};this.attributesComboConfig=this.attributesComboConfig||{};Ext.applyIf(this.attributesComboConfig,defAttributesComboConfig);this.items=this.createFilterItems();this.addEvents("change");gxp.form.FilterField.superclass.initComponent.call(this);},validateValue:function(value,preventMark){if(this.filter.type===OpenLayers.Filter.Comparison.BETWEEN){return(this.filter.property!==null&&this.filter.upperBoundary!==null&&this.filter.lowerBoundary!==null);}else{return(this.filter.property!==null&&this.filter.value!==null&&this.filter.type!==null);}},createDefaultFilter:function(){return new OpenLayers.Filter.Comparison();},createFilterItems:function(){var isBetween=this.filter.type===OpenLayers.Filter.Comparison.BETWEEN;return[this.attributesComboConfig,Ext.applyIf({xtype:"gxp_comparisoncombo",ref:"type",disabled:this.filter.property==null,allowBlank:this.allowBlank,value:this.filter.type,listeners:{select:function(combo,record){this.items.get(2).enable();this.items.get(3).enable();this.items.get(4).enable();this.setFilterType(record.get("value"));this.fireEvent("change",this.filter,this);},scope:this}},this.comparisonComboConfig),{xtype:"textfield",disabled:this.filter.type==null,hidden:isBetween,ref:"value",value:this.filter.value,width:50,grow:true,growMin:50,anchor:"100%",allowBlank:this.allowBlank,listeners:{"change":function(field,value){this.filter.value=value;this.fireEvent("change",this.filter,this);},scope:this}},{xtype:"textfield",disabled:this.filter.type==null,hidden:!isBetween,value:this.filter.lowerBoundary,tooltip:this.lowerBoundaryTip,grow:true,growMin:30,ref:"lowerBoundary",anchor:"100%",allowBlank:this.allowBlank,listeners:{"change":function(field,value){this.filter.lowerBoundary=value;this.fireEvent("change",this.filter,this);},"render":function(c){Ext.QuickTips.register({target:c.getEl(),text:this.lowerBoundaryTip});},"autosize":function(field,width){field.setWidth(width);field.ownerCt.doLayout();},scope:this}},{xtype:"textfield",disabled:this.filter.type==null,hidden:!isBetween,grow:true,growMin:30,ref:"upperBoundary",value:this.filter.upperBoundary,allowBlank:this.allowBlank,listeners:{"change":function(field,value){this.filter.upperBoundary=value;this.fireEvent("change",this.filter,this);},"render":function(c){Ext.QuickTips.register({target:c.getEl(),text:this.upperBoundaryTip});},scope:this}}];},setFilterType:function(type){this.filter.type=type;if(type===OpenLayers.Filter.Comparison.BETWEEN){this.items.get(2).hide();this.items.get(3).show();this.items.get(4).show();}else{this.items.get(2).show();this.items.get(3).hide();this.items.get(4).hide();}
this.doLayout();},setFilter:function(filter){var previousType=this.filter.type;this.filter=filter;if(previousType!==filter.type){this.setFilterType(filter.type);}
this['property'].setValue(filter.property);this['type'].setValue(filter.type);if(filter.type===OpenLayers.Filter.Comparison.BETWEEN){this['lowerBoundary'].setValue(filter.lowerBoundary);this['upperBoundary'].setValue(filter.upperBoundary);}else{this['value'].setValue(filter.value);}
this.fireEvent("change",this.filter,this);}});Ext.reg('gxp_filterfield',gxp.form.FilterField);Ext.namespace("gxp.form");gxp.form.FontComboBox=Ext.extend(Ext.form.ComboBox,{fonts:["Serif","SansSerif","Arial","Courier New","Tahoma","Times New Roman","Verdana"],defaultFont:"Serif",allowBlank:false,mode:"local",triggerAction:"all",editable:false,initComponent:function(){var fonts=this.fonts||gxp.form.FontComboBox.prototype.fonts;var defaultFont=this.defaultFont;if(fonts.indexOf(this.defaultFont)===-1){defaultFont=fonts[0];}
var defConfig={displayField:"field1",valueField:"field1",store:fonts,value:defaultFont,tpl:new Ext.XTemplate('<tpl for=".">'+'<div class="x-combo-list-item">'+'<span style="font-family: {field1};">{field1}</span>'+'</div></tpl>')};Ext.applyIf(this,defConfig);gxp.form.FontComboBox.superclass.initComponent.call(this);}});Ext.reg("gxp_fontcombo",gxp.form.FontComboBox);Ext.namespace("gxp.form");gxp.form.GoogleGeocoderComboBox=Ext.extend(Ext.form.ComboBox,{xtype:"gxp_googlegeocodercombo",queryDelay:100,valueField:"viewport",displayField:"address",initComponent:function(){this.disabled=true;var ready=!!(window.google&&google.maps);if(!ready){if(!gxp.plugins||!gxp.plugins.GoogleSource){throw new Error("The gxp.form.GoogleGeocoderComboBox requires the gxp.plugins.GoogleSource or the Google Maps V3 API to be loaded.");}
gxp.plugins.GoogleSource.loader.onLoad({otherParams:gxp.plugins.GoogleSource.prototype.otherParams,callback:this.prepGeocoder,errback:function(){throw new Error("The Google Maps script failed to load within the given timeout.");},scope:this});}else{window.setTimeout((function(){this.prepGeocoder();}).createDelegate(this),0);}
this.store=new Ext.data.JsonStore({root:"results",fields:[{name:"address",type:"string"},{name:"location"},{name:"viewport"}],autoLoad:false});this.on({focus:function(){this.clearValue();},scope:this});return gxp.form.GoogleGeocoderComboBox.superclass.initComponent.apply(this,arguments);},prepGeocoder:function(){var geocoder=new google.maps.Geocoder();var api={};api[Ext.data.Api.actions.read]=true;var proxy=new Ext.data.DataProxy({api:api});var combo=this;var getBounds=(function(){var bounds=this.bounds;if(bounds){if(bounds instanceof OpenLayers.Bounds){bounds=bounds.toArray();}
bounds=new google.maps.LatLngBounds(new google.maps.LatLng(bounds[1],bounds[0]),new google.maps.LatLng(bounds[3],bounds[2]));}
return bounds;}).createDelegate(this);proxy.doRequest=function(action,rs,params,reader,callback,scope,options){geocoder.geocode({address:params.query,bounds:getBounds()},function(results,status){var readerResult;if(status===google.maps.GeocoderStatus.OK||status===google.maps.GeocoderStatus.ZERO_RESULTS){try{results=combo.transformResults(results);readerResult=reader.readRecords({results:results});}catch(err){combo.fireEvent("exception",combo,"response",action,options,status,err);}}else{combo.fireEvent("exception",combo,"remote",action,options,status,null);}
if(readerResult){callback.call(scope,readerResult,options,true);}else{callback.call(scope,null,options,false);}});};this.store.proxy=proxy;if(this.initialConfig.disabled!=true){this.enable();}},transformResults:function(gResults){var num=gResults.length;var olResults=new Array(num);var item,latLng,bounds,ne,sw;for(i=0;i<num;++i){item=gResults[i];latLng=item.geometry.location;bounds=item.geometry.viewport;ne=bounds.getNorthEast();sw=bounds.getSouthWest();olResults[i]={address:item.formatted_address,location:new OpenLayers.LonLat(latLng.lng(),latLng.lat()),viewport:new OpenLayers.Bounds(sw.lng(),sw.lat(),ne.lng(),ne.lat())};}
return olResults;}});Ext.reg(gxp.form.GoogleGeocoderComboBox.prototype.xtype,gxp.form.GoogleGeocoderComboBox);Ext.namespace("gxp.form");gxp.form.ViewerField=Ext.extend(Ext.form.TextArea,{viewer:null,initComponent:function(){this.width=this.width||350;this.height=this.height||220;gxp.form.ViewerField.superclass.initComponent.call(this);},onRender:function(){if(!this.el){this.defaultAutoCreate={tag:"textarea",style:{color:"transparent",background:"none"}};}
gxp.form.ViewerField.superclass.onRender.apply(this,arguments);this.viewerEl=Ext.get(document.createElement("div"));this.viewerEl.setStyle("position","absolute");this.viewerEl.on({"mouseenter":function(){this.hasFocus||this.el.focus();},"mousemove":function(){this.hasFocus||this.el.focus();},"mouseleave":function(){this.hasFocus&&this.el.blur();},scope:this});this.el.dom.parentNode.appendChild(this.viewerEl.dom);this.viewerEl.anchorTo(this.el,"tl-tl");var portalConfig={border:false,renderTo:this.viewerEl,width:this.width,height:this.height,style:"border: 1px solid transparent"};var config=Ext.applyIf(this.initialConfig.viewer||{},{field:this,portalConfig:portalConfig});Ext.apply(config.portalConfig,portalConfig);this.viewer=new gxp.Viewer(config);}});Ext.reg("gxp_viewerfield",gxp.form.ViewerField);Ext.namespace("gxp.grid");gxp.grid.CapabilitiesGrid=Ext.extend(Ext.grid.GridPanel,{store:null,cm:null,expander:null,mapPanel:null,url:null,autoExpandColumn:"title",allowNewSources:true,nameHeaderText:"Name",titleHeaderText:"Title",queryableHeaderText:"Queryable",layerSelectionLabel:"View available data from:",layerAdditionLabel:"or add a new server.",expanderTemplateText:"<p><b>Abstract:</b> {abstract}</p>",constructor:function(){this.addEvents("sourceselected");gxp.grid.CapabilitiesGrid.superclass.constructor.apply(this,arguments);},initComponent:function(){if(!this.store){this.store=new GeoExt.data.WMSCapabilitiesStore({url:this.url+"?service=wms&request=GetCapabilities"});this.store.load();}
this.on('afterrender',function(){this.fireEvent('sourceselected',this,this.store);},this);if(!("expander"in this)){this.expander=new Ext.grid.RowExpander({tpl:new Ext.Template(this.expanderTemplateText)});}
if(!this.plugins&&this.expander){this.plugins=this.expander;}
if(!this.cm){var cm=[{id:"title",header:this.titleHeaderText,dataIndex:"title",sortable:true},{header:this.nameHeaderText,dataIndex:"name",width:180,sortable:true},{header:this.queryableHeaderText,dataIndex:"queryable",width:70,renderer:function(value,metaData,record,rowIndex,colIndex,store){metaData.css='x-btn';var css='x-btn cancel';if(value){css='x-btn add';}
return'<div style="background-repeat: no-repeat; '+'background-position: 50% 0%; '+'height: 16px;" '+'class="'+css+'">&nbsp;</div>';}}];if(this.expander){cm.unshift(this.expander);}
this.cm=new Ext.grid.ColumnModel(cm);}
if(!('allowNewSources'in this)){this.allowNewSources=!!this.metaStore;}
if(this.allowNewSources||(this.metaStore&&this.metaStore.getCount()>1)){this.sourceComboBox=new Ext.form.ComboBox({store:this.metaStore,valueField:"identifier",displayField:"name",triggerAction:"all",editable:false,allowBlank:false,forceSelection:true,mode:"local",value:this.metaStore.getAt(this.metaStore.findBy(function(record){return record.get("store")==this.store;},this)).get("identifier"),listeners:{select:function(combo,record,index){this.fireEvent("sourceselected",this,record.data.store);this.reconfigure(record.data.store,this.getColumnModel());if(this.expander)this.expander.ows=record.get("url");},scope:this}});this.metaStore.on("add",function(store,records,index){this.sourceComboBox.onSelect(records[0],index);},this);this.tbar=this.tbar||[];this.tbar.push(""+this.layerSelectionLabel);this.tbar.push(this.sourceComboBox);}
if(this.allowNewSources){var grid=this;if(!this.newSourceWindow){this.newSourceWindow=new gxp.NewSourceWindow({modal:true,metaStore:this.metaStore,addSource:function(){grid.addSource.apply(grid,arguments);}});}
this.tbar.push(new Ext.Button({iconCls:"gxp-icon-addserver",text:this.layerAdditionLabel,handler:function(){this.newSourceWindow.show();},scope:this}));}
gxp.grid.CapabilitiesGrid.superclass.initComponent.call(this);},addSource:function(url,success,failure,scope){scope=scope||this;var layerStore=new GeoExt.data.WMSCapabilitiesStore({url:url,autoLoad:true});this.metaStore.add(new this.metaStore.recordType({url:url,store:layerStore,identifier:url,name:url}));success.apply(scope);},addLayers:function(base){var sm=this.getSelectionModel();var records=sm.getSelections();var record,layer,newRecords=[];for(var i=0;i<records.length;i++){Ext.data.Record.AUTO_ID++;record=records[i].copy(Ext.data.Record.AUTO_ID);if(this.alignToGrid){layer=record.getLayer().clone();layer.maxExtent=new OpenLayers.Bounds(-180,-90,180,90);}else{layer=record.getLayer();if(layer instanceof OpenLayers.Layer.WMS){layer=new OpenLayers.Layer.WMS(layer.name,layer.url,{layers:layer.params["LAYERS"]},{attribution:layer.attribution,maxExtent:OpenLayers.Bounds.fromArray(record.get("llbbox")).transform(new OpenLayers.Projection("EPSG:4326"),this.mapPanel.map.getProjectionObject())});}}
record.data["layer"]=layer;record.commit(true);newRecords.push(record);}
if(newRecords.length){var index=this.mapPanel.layers.findBy(function(r){return r.getLayer()instanceof OpenLayers.Layer.Vector;});if(index!==-1){this.mapPanel.layers.insert(index,newRecords);}else{this.mapPanel.layers.add(newRecords);}}}});Ext.reg('gxp_capabilitiesgrid',gxp.grid.CapabilitiesGrid);Ext.namespace("gxp.grid");gxp.grid.FeatureGrid=Ext.extend(Ext.grid.GridPanel,{map:null,ignoreFields:null,includeFields:null,layer:null,columnsSortable:true,columnMenuDisabled:false,initComponent:function(){this.ignoreFields=["feature","state","fid"].concat(this.ignoreFields);if(this.store){this.cm=this.createColumnModel(this.store);if(this.map){this.layer=new OpenLayers.Layer.Vector(this.id+"_layer");this.map.addLayer(this.layer);}}else{this.store=new Ext.data.Store();this.cm=new Ext.grid.ColumnModel({columns:[]});}
if(this.layer){this.sm=this.sm||new GeoExt.grid.FeatureSelectionModel({layerFromStore:false,layer:this.layer});if(this.store instanceof GeoExt.data.FeatureStore){this.store.bind(this.layer);}}
if(!this.dateFormat){this.dateFormat=Ext.form.DateField.prototype.format;}
if(!this.timeFormat){this.timeFormat=Ext.form.TimeField.prototype.format;}
gxp.grid.FeatureGrid.superclass.initComponent.call(this);},onDestroy:function(){if(this.initialConfig&&this.initialConfig.map&&!this.initialConfig.layer){this.layer.destroy();delete this.layer;}
gxp.grid.FeatureGrid.superclass.onDestroy.apply(this,arguments);},setStore:function(store,schema){if(schema){this.schema=schema;}
if(store){if(this.store instanceof GeoExt.data.FeatureStore){this.store.unbind();}
if(this.layer){this.layer.destroyFeatures();store.bind(this.layer);}
this.reconfigure(store,this.createColumnModel(store));}else{this.reconfigure(new Ext.data.Store(),new Ext.grid.ColumnModel({columns:[]}));}},getColumns:function(store){function getRenderer(format){return function(value){var date=value;if(typeof value=="string"){date=Date.parseDate(value.replace(/Z$/,""),"c");}
return date?date.format(format):value;};}
var columns=[],customRenderers=this.customRenderers||{},name,type,xtype,format,renderer;(this.schema||store.fields).each(function(f){if(this.schema){name=f.get("name");type=f.get("type").split(":").pop();format=null;switch(type){case"date":format=this.dateFormat;break;case"datetime":format=format?format:this.dateFormat+" "+this.timeFormat;xtype=undefined;renderer=getRenderer(format);break;case"boolean":xtype="booleancolumn";break;case"string":xtype="gridcolumn";break;default:xtype="numbercolumn";break;}}else{name=f.name;}
if(this.ignoreFields.indexOf(name)===-1&&(this.includeFields===null||this.includeFields.indexOf(name)>=0)){columns.push({dataIndex:name,hidden:this.fieldVisibility?(!this.fieldVisibility[name]):false,header:this.propertyNames?(this.propertyNames[name]||name):name,sortable:this.columnsSortable,menuDisabled:this.columnMenuDisabled,xtype:xtype,format:format,renderer:customRenderers[name]||(xtype?undefined:renderer)});}},this);return columns;},createColumnModel:function(store){var columns=this.getColumns(store);return new Ext.grid.ColumnModel(columns);}});Ext.reg('gxp_featuregrid',gxp.grid.FeatureGrid);Ext.namespace("gxp");gxp.GoogleEarthPanel=Ext.extend(Ext.Panel,{HORIZONTAL_FIELD_OF_VIEW:(30*Math.PI)/180,map:null,mapPanel:null,layers:null,earth:null,projection:null,layerCache:null,initComponent:function(){this.addEvents("beforeadd","pluginfailure","pluginready");gxp.GoogleEarthPanel.superclass.initComponent.call(this);var mapPanel=this.mapPanel;if(mapPanel&&!(mapPanel instanceof GeoExt.MapPanel)){mapPanel=Ext.getCmp(mapPanel);}
if(!mapPanel){throw new Error("Could not get map panel from config: "+this.mapPanel);}
this.map=mapPanel.map;this.layers=mapPanel.layers;this.projection=new OpenLayers.Projection("EPSG:4326");this.on("render",this.onRenderEvent,this);this.on("show",this.onShowEvent,this);this.on("hide",function(){if(this.earth!=null){this.updateMap();}
this.body.dom.innerHTML="";this.earth=null;},this);},onEarthReady:function(object){this.earth=object;if(this.flyToSpeed===undefined){this.earth.getOptions().setFlyToSpeed(this.earth.SPEED_TELEPORT);}else if(this.flyToSpeed!==null){this.earth.getOptions().setFlyToSpeed(this.flyToSpeed);}
this.resetCamera();this.setExtent(this.map.getExtent());this.earth.getNavigationControl().setVisibility(this.earth.VISIBILITY_SHOW);var screenXY=this.earth.getNavigationControl().getScreenXY();screenXY.setXUnits(this.earth.UNITS_PIXELS);screenXY.setYUnits(this.earth.UNITS_INSET_PIXELS);this.earth.getWindow().setVisibility(true);this.layers.each(function(record){this.addLayer(record);},this);this.layers.on("remove",this.updateLayers,this);this.layers.on("update",this.updateLayers,this);this.layers.on("add",this.updateLayers,this);this.fireEvent("pluginready",this.earth);},onRenderEvent:function(){var isCard=this.ownerCt&&this.ownerCt.layout instanceof Ext.layout.CardLayout;if(!this.hidden&&!isCard){this.onShowEvent();}},onShowEvent:function(){if(this.rendered){this.layerCache={};google.earth.createInstance(this.body.dom,this.onEarthReady.createDelegate(this),(function(code){this.fireEvent("pluginfailure",this,code);}).createDelegate(this));}},beforeDestroy:function(){this.layers.un("remove",this.updateLayers,this);this.layers.un("update",this.updateLayers,this);this.layers.un("add",this.updateLayers,this);gxp.GoogleEarthPanel.superclass.beforeDestroy.call(this);},updateLayers:function(){if(!this.earth)return;var features=this.earth.getFeatures();var f=features.getFirstChild();while(f!=null){features.removeChild(f);f=features.getFirstChild();}
this.layers.each(function(record){this.addLayer(record);},this);},addLayer:function(layer,order){var lyr=layer.getLayer();var ows=(lyr&&lyr.url);if(this.earth&&lyr instanceof OpenLayers.Layer.WMS&&typeof ows=="string"){var add=this.fireEvent("beforeadd",layer);if(add!==false){var name=lyr.id;var networkLink;if(this.layerCache[name]){networkLink=this.layerCache[name];}else{var link=this.earth.createLink('kl_'+name);ows=ows.replace(/\?.*/,'');var params=lyr.params;var kmlPath='/kml?mode=refresh&layers='+params.LAYERS+"&styles="+params.STYLES;link.setHref(ows+kmlPath);networkLink=this.earth.createNetworkLink('nl_'+name);networkLink.setName(name);networkLink.set(link,false,false);this.layerCache[name]=networkLink;}
networkLink.setVisibility(lyr.getVisibility());if(order!==undefined&&order<this.earth.getFeatures().getChildNodes().getLength()){this.earth.getFeatures().insertBefore(this.earth.getFeatures().getChildNodes().item(order));}else{this.earth.getFeatures().appendChild(networkLink);}}}},setExtent:function(extent){extent=extent.transform(this.map.getProjectionObject(),this.projection);var center=extent.getCenterLonLat();var width=this.getExtentWidth(extent);var height=width/(2*Math.tan(this.HORIZONTAL_FIELD_OF_VIEW));var lookAt=this.earth.getView().copyAsLookAt(this.earth.ALTITUDE_RELATIVE_TO_GROUND);lookAt.setLatitude(center.lat);lookAt.setLongitude(center.lon);lookAt.setRange(height);this.earth.getView().setAbstractView(lookAt);},resetCamera:function(){var camera=this.earth.getView().copyAsCamera(this.earth.ALTITUDE_RELATIVE_TO_GROUND);camera.setRoll(0);camera.setHeading(0);camera.setTilt(0);this.earth.getView().setAbstractView(camera);},getExtent:function(){var geBounds=this.earth.getView().getViewportGlobeBounds();var olBounds=new OpenLayers.Bounds(geBounds.getWest(),geBounds.getSouth(),geBounds.getEast(),geBounds.getNorth());return olBounds;},updateMap:function(){var lookAt=this.earth.getView().copyAsLookAt(this.earth.ALTITUDE_RELATIVE_TO_GROUND);var center=this.reprojectToMap(new OpenLayers.LonLat(lookAt.getLongitude(),lookAt.getLatitude()));var geExtent=this.reprojectToMap(this.getExtent());this.map.zoomToExtent(geExtent,true);this.map.setCenter(center);var height=lookAt.getRange();var width=2*height*Math.tan(this.HORIZONTAL_FIELD_OF_VIEW);var nextResolution=this.map.getResolutionForZoom(this.map.getZoom()+1);var currentExtent=this.map.getExtent();var nextExtent=new OpenLayers.Bounds(center.lon-(this.map.getSize().w/2*nextResolution),center.lat+(this.map.getSize().h/2*nextResolution),center.lon+(this.map.getSize().w/2*nextResolution),center.lat-(this.map.getSize().h/2*nextResolution));var currentWidthDiff=Math.abs(this.getExtentWidth(currentExtent)-width);var nextWidthDiff=Math.abs(this.getExtentWidth(nextExtent)-width);if(nextWidthDiff<currentWidthDiff){this.map.zoomTo(this.map.getZoom()+1);}},getExtentWidth:function(extent){var center=extent.getCenterLonLat();var middleLeft=new OpenLayers.LonLat(extent.left,center.lat);var middleRight=new OpenLayers.LonLat(extent.right,center.lat);return OpenLayers.Util.distVincenty(middleLeft,middleRight)*1000;},reprojectToGE:function(data){return data.clone().transform(this.map.getProjectionObject(),this.projection);},reprojectToMap:function(data){return data.clone().transform(this.projection,this.map.getProjectionObject());}});Ext.reg("gxp_googleearthpanel",gxp.GoogleEarthPanel);Ext.namespace("gxp");gxp.GoogleStreetViewPanel=Ext.extend(Ext.Panel,{panorama:null,heading:0,pitch:0,zoom:0,location:null,initComponent:function(){var defConfig={plain:true,border:false};Ext.applyIf(this,defConfig);return gxp.GoogleStreetViewPanel.superclass.initComponent.call(this);},afterRender:function(){var owner=this.ownerCt;if(owner){var size=owner.getSize();Ext.applyIf(this,size);if(!this.location){if(GeoExt.Popup){this.bubble(function(cmp){if(cmp instanceof GeoExt.Popup){this.location=cmp.location.clone().transform(cmp.map.getProjectionObject(),new OpenLayers.Projection("EPSG:4326"));return false;}},this);}}}
gxp.GoogleStreetViewPanel.superclass.afterRender.call(this);var options={position:new google.maps.LatLng(this.location.lat,this.location.lon),pov:{heading:this.heading,pitch:this.pitch,zoom:this.zoom}};this.panorama=new google.maps.StreetViewPanorama(this.body.dom,options);},beforeDestroy:function(){delete this.panorama;gxp.GoogleStreetViewPanel.superclass.beforeDestroy.apply(this,arguments);},onResize:function(w,h){gxp.GoogleStreetViewPanel.superclass.onResize.apply(this,arguments);if(this.panorama){if(typeof this.panorama=="object"){google.maps.event.trigger(this.panorama,"resize");}}},setSize:function(width,height,animate){gxp.GoogleStreetViewPanel.superclass.setSize.apply(this,arguments);if(this.panorama){if(typeof this.panorama=="object"){google.maps.event.trigger(this.panorama,"resize");}}}});Ext.reg("gxp_googlestreetviewpanel",gxp.GoogleStreetViewPanel);Ext.namespace("gxp");gxp.Histogram=Ext.extend(Ext.BoxComponent,{onRender:function(ct,position){if(!this.el){var el=document.createElement("div");el.id=this.getId();this.el=Ext.get(el);}
this.el.addClass("gxp-histogram");if(this.quantities){this.setQuantities(this.quantities);}
gxp.Histogram.superclass.onRender.apply(this,arguments);},setQuantities:function(quantities){this.quantities=quantities;while(this.el.dom.firstChild){this.el.dom.removeChild(this.el.dom.firstChild);}
var quantity,max=0,min=Number.POSITIVE_INFINITY,i,ii=quantities.length;for(i=0;i<ii;++i){quantity=quantities[i];if(quantity<min){min=quantity;}
if(quantity>max){max=quantity;}}
var bar,factor=100/max,style,height,width=(100/ii);for(i=0;i<ii;++i){bar=document.createElement("div");bar.className="bar";style=bar.style;style.width=width+"%";style.left=(i*width)+"%";style.top=(100-(quantities[i]-min)*factor)+"%";this.el.dom.appendChild(bar);}}});Ext.reg("gxp_histogram",gxp.Histogram);Ext.namespace("gxp.slider");gxp.slider.Tip=Ext.extend(Ext.slider.Tip,{hover:true,dragging:false,init:function(slider){if(this.hover){slider.on("render",this.registerThumbListeners,this);}
this.slider=slider;gxp.slider.Tip.superclass.init.apply(this,arguments);},registerThumbListeners:function(){for(var i=0,len=this.slider.thumbs.length;i<len;++i){this.slider.thumbs[i].el.on({"mouseover":this.createHoverListener(i),"mouseout":function(){if(!this.dragging){this.hide.apply(this,arguments);}},scope:this});}},createHoverListener:function(index){return(function(){this.onSlide(this.slider,{},this.slider.thumbs[index]);this.dragging=false;}).createDelegate(this);},onSlide:function(slider,e,thumb){this.dragging=true;gxp.slider.Tip.superclass.onSlide.apply(this,arguments);}});Ext.namespace("gxp");gxp.PlaybackToolbar=Ext.extend(Ext.Toolbar,{control:null,mapPanel:null,initialTime:null,timeFormat:"l, F d, Y g:i:s A",toolbarCls:'x-toolbar gx-overlay-playback',ctCls:'gx-playback-wrap',slider:true,dynamicRange:false,playbackMode:"track",showIntervals:false,labelButtons:false,settingsButton:true,rateAdjuster:false,looped:false,autoPlay:false,optionsWindow:null,playing:false,playLabel:'Play',playTooltip:'Play',stopLabel:'Stop',stopTooltip:'Stop',fastforwardLabel:'FFWD',fastforwardTooltip:'Double Speed Playback',nextLabel:'Next',nextTooltip:'Advance One Frame',resetLabel:'Reset',resetTooltip:'Reset to the start',loopLabel:'Loop',loopTooltip:'Continously loop the animation',normalTooltip:'Return to normal playback',pauseLabel:'Pause',pauseTooltip:'Pause',initComponent:function(){if(!this.playbackActions){this.playbackActions=["settings","slider","reset","play","fastforward","next","loop"];}
if(!this.control){this.control=this.buildTimeManager();}
this.control.events.on({'play':function(evt){this.playing=true;},'stop':function(evt){this.playing=false;},scope:this});this.availableTools=Ext.applyIf(this.availableTools||{},this.getAvailableTools());Ext.applyIf(this,{defaults:{xtype:'button',flex:1,scale:'small'},items:this.buildPlaybackItems(),border:false,frame:false,unstyled:true,shadow:false,timeDisplayConfig:{'xtype':'tip',format:this.timeFormat,height:'auto',closeable:false,title:false,width:210}});this.addEvents("timechange","rangemodified");gxp.PlaybackToolbar.superclass.initComponent.call(this);},destroy:function(){if(this.control&&!this.initialConfig.control){this.control.map&&this.control.map.removeControl(this.control);this.control.destroy();this.control=null;}
this.mapPanel=null;gxp.PlaybackToolbar.superclass.destroy.call(this);},setTime:function(time){var timeVal=time.getTime();if(timeVal<this.slider.minValue||timeVal>this.slider.maxValue){return false;}else{this.control.setTime(time);return true;}},setTimeFormat:function(format){if(format){this.timeFormat=format;this.slider.setTimeFormat(format);}},setPlaybackMode:function(mode){if(mode){this.playbackMode=mode;this.slider.setPlaybackMode(mode);}},buildPlaybackItems:function(){var tools=this.playbackActions;var items=[];for(var i=0,len=tools.length;i<len;i++){var key=tools[i];var tool=this.availableTools[key];if(tool){items.push(tool);}else{if(['|',' ','->'].indexOf(key)>-1){items.push(key);}}}
return items;},getAvailableTools:function(){var tools={'slider':{xtype:'gxp_timeslider',ref:'slider',map:this.mapPanel.map,timeManager:this.control,playbackMode:this.playbackMode},'reset':{iconCls:'gxp-icon-reset',ref:'btnReset',handler:this.control.reset,scope:this.control,tooltip:this.resetTooltip,menuText:this.resetLabel,text:(this.labelButtons)?this.resetLabel:false},'pause':{iconCls:'gxp-icon-pause',ref:'btnPause',handler:this.control.stop,scope:this.control,tooltip:this.stopTooltip,menuText:this.stopLabel,text:(this.labelButtons)?this.stopLabel:false,toggleGroup:'timecontrol',enableToggle:true,allowDepress:false},'play':{iconCls:'gxp-icon-play',ref:'btnPlay',toggleHandler:this.toggleAnimation,scope:this,toggleGroup:'timecontrol',enableToggle:true,allowDepress:true,tooltip:this.playTooltip,menuText:this.playLabel,text:(this.labelButtons)?this.playLabel:false},'next':{iconCls:'gxp-icon-next',ref:'btnNext',handler:function(){this.stop();this.tick();},scope:this.control,tooltip:this.nextTooltip,menuText:this.nextLabel,text:(this.labelButtons)?this.nextLabel:false},'end':{iconCls:'gxp-icon-last',ref:'btnEnd',handler:this.forwardToEnd,scope:this,tooltip:this.endTooltip,menuText:this.endLabel,text:(this.labelButtons)?this.endLabel:false},'loop':{iconCls:'gxp-icon-loop',ref:'btnLoop',tooltip:this.loopTooltip,enableToggle:true,allowDepress:true,pressed:this.looped,toggleHandler:this.toggleLoopMode,scope:this,menuText:this.loopLabel,text:(this.labelButtons)?this.loopLabel:false},'fastforward':{iconCls:'gxp-icon-ffwd',ref:'btnFastforward',tooltip:this.fastforwardTooltip,enableToggle:true,toggleGroup:'fastforward',toggleHandler:this.toggleDoubleSpeed,scope:this,disabled:true,menuText:this.fastforwardLabel,text:(this.labelButtons)?this.fastforwardLabel:false},'settings':{iconCls:'gxp-icon-settings',ref:'btnSettings',scope:this,handler:this.toggleOptionsWindow,enableToggle:false,tooltip:this.settingsTooltip,menuText:this.settingsLabel,text:(this.labelButtons)?this.settingsLabel:false}};return tools;},buildTimeManager:function(){this.controlConfig||(this.controlConfig={});if(this.controlConfig.range&&this.controlConfig.range.length){for(var i=0;i<this.controlConfig.range.length;i++){var dateString=this.controlConfig.range[i];if(dateString.indexOf('T')>-1&&dateString.indexOf('Z')==-1){dateString=dateString.substring(0,dateString.indexOf('T'));}
this.controlConfig.range[i]=dateString;}}
if(this.controlConfig.timeAgents){for(var i=0;i<this.controlConfig.timeAgents.length;i++){var config=this.controlConfig.timeAgents[i];var agentClass=config.type;var layers=[];Ext.each(config.layers,function(lyrJson){var ndx=this.mapPanel.layers.findBy(function(rec){return rec.json&&rec.json.source==lyrJson.source&&rec.json.title==lyrJson.title&&rec.json.name==lyrJson.name&&(rec.json.styles==lyrJson.styles||!!rec.json.styles==false&&!!lyrJson.styles==false);});if(ndx>-1){layers.push(this.mapPanel.layers.getAt(ndx).getLayer());}},this);config.layers=layers;delete config.type;var agent=agentClass?new OpenLayers.TimeAgent[agentClass](config):new OpenLayers.TimeAgent(config);this.controlConfig.timeAgents[i]=agent;}}
else{if(this.playbackMode=='ranged'){Ext.apply(this.controlConfig,{agentOptions:{'WMS':{rangeMode:'range',rangeInterval:this.rangedPlayInterval},'Vector':{rangeMode:'range',rangeInterval:this.rangedPlayInterval}}});}
else if(this.playbackMode=='cumulative'){Ext.apply(this.controlConfig,{agentOptions:{'WMS':{rangeMode:'cumulative'},'Vector':{rangeMode:'cumulative'}}});}}
var ctl=this.control=new OpenLayers.Control.TimeManager(this.controlConfig);ctl.loop=this.looped;this.mapPanel.map.addControl(ctl);if(ctl.layers){this.fireEvent('rangemodified',this,ctl.range);}
return ctl;},forwardToEnd:function(btn){var ctl=this.control;ctl.setTime(new Date(ctl.range[(ctl.step<0)?0:1].getTime()));},toggleAnimation:function(btn,pressed){if(!btn.bound&&pressed){this.control.events.on({'stop':function(evt){btn.toggle(false);if(evt.rangeExceeded){this._resetOnPlay=true;}},'play':function(evt){btn.toggle(true);if(this._resetOnPlay){this.reset();delete this._resetOnPlay;}}});btn.bound=true;}
if(pressed){if(!this.control.timer){this.control.play();}
btn.btnEl.removeClass('gxp-icon-play');btn.btnEl.addClass('gxp-icon-pause');btn.setTooltip(this.pauseTooltip);}else{if(this.control.timer){this.control.stop();}
btn.btnEl.addClass('gxp-icon-play');btn.btnEl.removeClass('gxp-icon-pause');btn.setTooltip(this.playTooltip);}
btn.el.removeClass('x-btn-pressed');btn.refOwner.btnFastforward.setDisabled(!pressed);if(this.labelButtons&&btn.text){btn.setText(pressed?this.pauseLabel:this.playLabel);}},toggleLoopMode:function(btn,pressed){this.control.loop=pressed;btn.setTooltip(pressed?this.normalTooltip:this.loopTooltip);if(this.labelButtons&&btn.text){btn.setText(pressed?this.normalLabel:this.loopLabel);}},toggleDoubleSpeed:function(btn,pressed){var framerate=this.control.frameRate*((pressed)?2:0.5);this.control.setFrameRate(framerate);btn.setTooltip((pressed)?this.normalTooltip:this.fastforwardTooltip);},toggleOptionsWindow:function(btn,pressed){if(pressed&&this.optionsWindow.hidden){if(!this.optionsWindow.optionsPanel.timeManager){this.optionsWindow.optionsPanel.timeManager=this.control;this.optionsWindow.optionsPanel.playbackToolbar=this;}
this.optionsWindow.show();}
else if(!pressed&&!this.optionsWindow.hidden){this.optionsWindow.hide();}}});gxp.PlaybackToolbar.guessTimeFormat=function(increment){if(increment){var resolution=gxp.PlaybackToolbar.smartIntervalFormat(increment).units;var format=this.timeFormat;switch(resolution){case'Minutes':format='l, F d, Y g:i A';break;case'Hours':format='l, F d, Y g A';break;case'Days':format='l, F d, Y';break;case'Months':format='F, Y';break;case'Years':format='Y';break;}
return format;}};gxp.PlaybackToolbar.smartIntervalFormat=function(diff){var unitText,diffValue,absDiff=Math.abs(diff);if(absDiff<5e3){unitText='Seconds';diffValue=(Math.round(diff/1e2))/10;}
else if(absDiff<35e5){unitText='Minutes';diffValue=(Math.round(diff/6e2))/10;}
else if(absDiff<828e5){unitText='Hours';diffValue=(Math.round(diff/36e4))/10;}
else if(absDiff<250e7){unitText='Days';diffValue=(Math.round(diff/864e4))/10;}
else if(absDiff<311e8){unitText='Months';diffValue=(Math.round(diff/2628e5))/10;}else{unitText='Years';diffValue=(Math.round(diff/31536e5))/10;}
return{units:unitText,value:diffValue};};Ext.reg('gxp_playbacktoolbar',gxp.PlaybackToolbar);Ext.namespace("gxp.form");gxp.form.PlaybackModeComboBox=Ext.extend(Ext.form.ComboBox,{modeFieldText:'Playback Mode',normalOptText:'Normal',cumulativeOptText:'Cumulative',rangedOptText:'Ranged',modes:[],defaultMode:false,timeAgents:null,allowBlank:false,mode:"local",triggerAction:"all",editable:false,constructor:function(config){this.addEvents({"modechange":true});if(!config.modes&&!this.modes.length){this.modes.push([false,this.normalOptText],['cumulative',this.cumulativeOptText],['ranged',this.rangedOptText]);}
gxp.form.PlaybackModeComboBox.superclass.constructor.call(this,config);},initComponent:function(){var modes=this.modes;var defaultMode=this.defaultMode;var defConfig={displayField:"field2",valueField:"field1",store:modes,value:defaultMode,listeners:{'select':this.setPlaybackMode,scope:this}};Ext.applyIf(this,defConfig);gxp.form.PlaybackModeComboBox.superclass.initComponent.call(this);},setPlaybackMode:function(combo,record,index){if(!this.timeAgents){this.timeAgents=this.guessTimeAgents();}
var mode=record.get('field1');Ext.each(this.timeAgents,function(agent){agent.rangeMode=mode;if(mode=='range'){if(!agent.rangeInterval){agent.rangeInterval=1;}}});this.fireEvent('modechange',this,mode,this.timeAgents);},guessTimeAgents:function(){}});Ext.reg("gxp_playbackmodecombo",gxp.form.PlaybackModeComboBox);Ext.namespace("gxp");gxp.PlaybackOptionsPanel=Ext.extend(Ext.Panel,{layout:"fit",titleText:"Date & Time Options",rangeFieldsetText:"Time Range",animationFieldsetText:"Animation Options",startText:'Start',endText:'End',listOnlyText:'Use Exact List Values Only',stepText:'Animation Step',unitsText:'Animation Units',noUnitsText:'Snap To Time List',loopText:'Loop Animation',reverseText:'Reverse Animation',rangeChoiceText:'Choose the range for the time control',rangedPlayChoiceText:'Playback Mode',initComponent:function(){var config=Ext.applyIf(this.initialConfig,{minHeight:400,minWidth:275,ref:'optionsPanel',items:[{xtype:'form',layout:'form',autoScroll:true,ref:'form',labelWidth:10,defaultType:'textfield',items:[{xtype:'fieldset',title:this.rangeFieldsetText,defaultType:'datefield',labelWidth:60,items:[{xtype:'displayfield',text:this.rangeChoiceText},{fieldLabel:this.startText,listeners:{'select':this.setStartTime,'change':this.setStartTime,scope:this},ref:'../../rangeStartField'},{fieldLabel:this.endText,listeners:{'select':this.setEndTime,'change':this.setEndTime,scope:this},ref:'../../rangeEndField'}]},{xtype:'fieldset',title:this.animationFieldsetText,labelWidth:100,items:[{boxLabel:this.listOnlyText,hideLabel:true,xtype:'checkbox',handler:this.toggleListMode,scope:this,ref:'../../listOnlyCheck'},{fieldLabel:this.stepText,xtype:'numberfield',anchor:'-25',enableKeyEvents:true,listeners:{'change':this.setStep,scope:this},ref:'../../stepValueField'},{fieldLabel:this.unitsText,xtype:'combo',anchor:'-5',store:[[OpenLayers.TimeUnit.SECONDS,'Seconds'],[OpenLayers.TimeUnit.MINUTES,'Minutes'],[OpenLayers.TimeUnit.HOURS,'Hours'],[OpenLayers.TimeUnit.DAYS,'Days'],[OpenLayers.TimeUnit.MONTHS,"Months"],[OpenLayers.TimeUnit.YEARS,'Years']],valueNotFoundText:this.noUnitsText,mode:'local',forceSelection:true,autoSelect:false,editable:false,triggerAction:'all',listeners:{'select':this.setUnits,scope:this},ref:'../../stepUnitsField'},{fieldLabel:this.rangedPlayChoiceText,xtype:'gxp_playbackmodecombo',timeAgents:this.timeManager&&this.timeManager.timeAgents,anchor:'-5',listeners:{'modechange':this.setPlaybackMode,scope:this},ref:'../../playbackModeField'}]},{xtype:'checkbox',boxLabel:this.loopText,handler:this.setLoopMode,scope:this,ref:'../loopModeCheck'},{xtype:'checkbox',boxLabel:this.reverseText,handler:this.setReverseMode,scope:this,ref:'../reverseModeCheck'}]}],listeners:{'show':this.populateForm,scope:this},bbar:[{text:'Save',handler:this.saveValues,scope:this},{text:'Cancel',handler:this.cancelChanges,scope:this}]});Ext.apply(this,config);gxp.PlaybackOptionsPanel.superclass.initComponent.call(this);},destroy:function(){this.timeManager=null;this.playbackToolbar=null;this.un('show',this,this.populateForm);gxp.PlaybackOptionsPanel.superclass.destroy.call(this);},setStartTime:function(cmp,date){this.timeManager.setStart(date);this.timeManager.fixedRange=true;},setEndTime:function(cmp,date){this.timeManager.setEnd(date);this.timeManager.fixedRange=true;},toggleListMode:function(cmp,checked){this.stepValueField.setDisabled(checked);this.stepUnitsField.setDisabled(checked);this.timeManager.snapToIntervals=checked;},setUnits:function(cmp,record,index){var units=record.get('field1');if(this.timeManager.units!=units){this.timeManager.units=units;if(this.playbackToolbar.playbackMode!='track'){this.timeManager.incrementTime();}}},setStep:function(cmp,newVal,oldVal){if(cmp.validate()&&newVal){this.timeManager.step=newVal;if(this.playbackToolbar.playbackMode=='ranged'&&this.timeManager.rangeInterval!=newVal){this.timeManager.rangeInterval=newVal;this.timeManager.incrementTime(newVal);}}},setPlaybackMode:function(cmp,mode,agents){switch(mode){case'cumulative':this.playbackToolbar.setPlaybackMode('cumulative');break;case'ranged':this.disableListMode(true);this.playbackToolbar.setPlaybackMode('ranged');break;default:this.playbackToolbar.setPlaybackMode('track');break;}
if(mode!='ranged'){this.disableListMode(false);}},disableListMode:function(state){var disable=state!==false;if(disable){this.listOnlyCheck.setValue(!disable);}
this.listOnlyCheck.setDisabled(disable);},setLoopMode:function(cmp,checked){this.timeManager.loop=checked;},setReverseMode:function(cmp,checked){this.timeManager.step*=-1;},populateForm:function(cmp){if(this.timeManager){this.rangeStartField.setValue(this.timeManager.range[0]);this.rangeStartField.originalValue=this.timeManager.range[0];this.rangeEndField.setValue(this.timeManager.range[1]);this.rangeEndField.originalValue=this.timeManager.range[1];this.stepValueField.setValue(this.timeManager.step);this.stepValueField.originalValue=this.timeManager.step;this.stepUnitsField.setValue(this.timeManager.units);this.stepUnitsField.originalValue=this.timeManager.units;this.listOnlyCheck.setValue(this.timeManager.snapToIntervals);this.listOnlyCheck.originalValue=this.timeManager.snapToIntervals;var playbackMode=this.playbackToolbar.playbackMode;if(playbackMode=='track'||!playbackMode){playbackMode=false;}
if(!this.playbackModeField.timeAgents||!this.playbackModeField.timeAgents.length){this.playbackModeField.timeAgents=this.timeManager.timeAgents;}
this.playbackModeField.setValue(playbackMode);this.playbackModeField.originalValue=playbackMode;this.loopModeCheck.setValue(this.timeManager.loop);this.loopModeCheck.originalValue=this.timeManager.loop;this.reverseModeCheck.setValue(this.timeManager.step<0);this.reverseModeCheck.originalValue=this.reverseModeCheck.getValue();}},saveValues:function(btn){if(this.ownerCt&&this.ownerCt.close){this.ownerCt[this.ownerCt.closeAction]();}},cancelChanges:function(btn){this.form.getForm().items.each(function(field){field.setValue(field.originalValue);});this.saveValues();}});Ext.reg('gxp_playbackoptions',gxp.PlaybackOptionsPanel);Ext.namespace("gxp.slider");gxp.slider.ClassBreakSlider=Ext.extend(Ext.slider.MultiSlider,{store:null,initComponent:function(){this.store=Ext.StoreMgr.lookup(this.store);if(!("constrainThumbs"in this.initialConfig)){this.constrainThumbs=this.store.reader.raw instanceof OpenLayers.Style;}
this.values=this.storeToValues();this.on("changecomplete",this.valuesToStore);this.store.on("update",this.storeToValues,this);gxp.slider.ClassBreakSlider.superclass.initComponent.call(this);},storeToValues:function(){var values=[];this.store.each(function(rec){var filter=rec.get("filter");if(filter instanceof OpenLayers.Filter){if(filter.type===OpenLayers.Filter.Comparison.BETWEEN){if(this.store.indexOf(rec)===0){values.push(filter.lowerBoundary);}
values.push(filter.upperBoundary);}else if(filter.type===OpenLayers.Filter.Comparison.LESS_THAN){values.push(filter.value);}}else{values.push(filter);}},this);if(this.thumbs){for(var i=values.length-1;i>=0;--i){this.setValue(i,values[i]);}}
return values;},valuesToStore:function(){var values=this.getValues(),store=this.store;store.un("update",this.storeToValues,this);store.each(function(rec){var filter=rec.get("filter"),value=values.shift();if(filter instanceof OpenLayers.Filter){filter=filter.clone();if(filter.type===OpenLayers.Filter.Comparison.BETWEEN){filter.upperBoundary=value;}else if(filter.type===OpenLayers.Filter.Comparison.LESS_THAN){filter.value=value;}
if(rec.get("filter").toString()!==filter.toString()){rec.set("filter",filter);}}else if(filter!=value){rec.set("filter",value);}},this);store.on("update",this.storeToValues,this);}});Ext.reg('gxp_classbreakslider',gxp.slider.ClassBreakSlider);Ext.namespace("gxp.slider");gxp.slider.RangeSliderTip=Ext.extend(gxp.slider.Tip,{template:'<div>{startDate}/{endDate}</div>',compiledTemplate:null,init:function(slider){this.slider=slider;this.compiledTemplate=new Ext.Template(this.template);gxp.slider.RangeSliderTip.superclass.init.call(this,slider);},getText:function(thumb){var data={startDate:this.slider.startDate,endDate:this.slider.endDate};return this.compiledTemplate.apply(data);}});Ext.namespace("gxp");Ext.override(Ext.Tip,{showBy:function(el,pos,offsets){var offsetX=offsets[0];var offsetY=offsets[1];if(pos.charAt(0)==='b'){offsetY=-offsetY;}
if(pos.charAt(0)==='r'||pos.charAt(1)==='r'){offsetX=-offsetX;}
if(pos.charAt(0)==='c'){offsetX=0;offsetY=0;}
if(pos.charAt(0)==='l'||pos.charAt(0)==='r'){offsetY=0;}
if(!this.rendered){this.render(Ext.getBody());}
this.showAt(this.el.getAlignToXY(el,pos||this.defaultAlign,[offsetX,offsetY]));}});GeoExt.FeatureTip=Ext.extend(Ext.Tip,{map:null,location:null,initComponent:function(){var centroid=this.location.geometry.getCentroid();this.location=new OpenLayers.LonLat(centroid.x,centroid.y);this.map.events.on({"move":this.show,scope:this});GeoExt.FeatureTip.superclass.initComponent.call(this);},beforeDestroy:function(){this.map.events.un({"move":this.show,scope:this});GeoExt.FeatureTip.superclass.beforeDestroy.call(this);},getPosition:function(){if(this.map.getExtent().containsLonLat(this.location)){var locationPx=this.map.getPixelFromLonLat(this.location),mapBox=Ext.fly(this.map.div).getBox(true),top=locationPx.y+mapBox.y,left=locationPx.x+mapBox.x;return[left,top];}else{return null;}},show:function(){var position=this.getPosition();if(position!==null){this.showAt(position);}else{this.hide();}}});window.Timeline&&window.SimileAjax&&(function(){SimileAjax.History.enabled=false;Timeline._Band.prototype._onDblClick=Ext.emptyFn;Timeline.DefaultEventSource.prototype.remove=function(id){this._events.remove(id);};SimileAjax.EventIndex.prototype.remove=function(id){var evt=this._idToEvent[id];this._events.remove(evt);delete this._idToEvent[id];};Timeline._Band.prototype.zoom=function(zoomIn,x,y,target){if(!this._zoomSteps){return;}
var center=this.getCenterVisibleDate();var netIntervalChange=this._ether.zoom(zoomIn);this._etherPainter.zoom(netIntervalChange);this.setCenterVisibleDate(center);};})();gxp.TimelinePanel=Ext.extend(Ext.Panel,{showRangeSlider:true,initialRangeSliderValue:25,scrollInterval:500,timeInfoEndpoint:"/maps/time_info.json?",annotationConfig:{timeAttr:'start_time',endTimeAttr:'end_time',filterAttr:'in_timeline',mapFilterAttr:'in_map'},loadingMessage:"Loading Timeline data...",instructionText:"There are too many events ({count}) to show in the timeline.<br/>Please zoom in or move the vertical slider down (maximum is {max})",errorText:"Something went wrong with retrieving the data for the timeline",layerCount:0,busyMask:null,schemaCache:{},propertyNamesCache:{},sldCache:{},maxFeatures:500,bufferFraction:1,layout:"border",initComponent:function(){Timeline.OriginalEventPainter.prototype._showBubble=this.handleEventClick.createDelegate(this);this.timelineContainer=new Ext.Container({region:"center"});this.eventSource=new Timeline.DefaultEventSource(0);this.items=[];if(this.showRangeSlider){this.items.push({region:"west",xtype:"container",layout:"vbox",margins:"10 5",width:20,items:[{xtype:"panel",margins:"3 1",cls:"x-tool x-tool-minus",listeners:{afterrender:function(c){c.getEl().on('click',function(){var value=this.rangeSlider.getValue();this.rangeSlider.setValue(0,value+10,true,true);},this);},scope:this}},{xtype:"slider",ref:"../rangeSlider",vertical:true,flex:1,value:this.initialRangeSliderValue,minValue:1,maxValue:100,listeners:{"change":this.onChange,"changecomplete":this.onChangeComplete,scope:this},plugins:[new gxp.slider.RangeSliderTip()]},{xtype:"panel",margins:"3 1",cls:"x-tool x-tool-plus",listeners:{afterrender:function(c){c.getEl().on('click',function(){var value=this.rangeSlider.getValue();this.rangeSlider.setValue(0,value-10,true,true);},this);},scope:this}}]});}
this.items.push(this.timelineContainer);if(this.initialConfig.viewer){delete this.viewer;this.bindViewer(this.initialConfig.viewer);}
if(this.initialConfig.featureEditor){delete this.featureEditor;this.bindFeatureEditor(this.initialConfig.featureEditor);}
if(this.initialConfig.playbackTool){delete this.playbackTool;this.bindPlaybackTool(this.initialConfig.playbackTool);}
if(this.ownerCt){this.ownerCt.on("beforecollapse",function(){this._silentMapMove=true;},this);this.ownerCt.on("beforeexpand",function(){delete this._silentMapMove;},this);this.ownerCt.on("afterlayout",function(){delete this._silent;},this);}
gxp.TimelinePanel.superclass.initComponent.call(this);},onChange:function(slider,value,thumb){var range=this.playbackTool.playbackToolbar.control.range;range=this.calculateNewRange(range,value);var start=new Date(range[0].getTime()-this.bufferFraction*(range[1]-range[0]));var end=new Date(range[1].getTime()+this.bufferFraction*(range[1]-range[0]));start=new Date(Math.max(this.originalRange[0],start));end=new Date(Math.min(this.originalRange[1],end));this.updateRangeSlider([start,end]);},onChangeComplete:function(slider,value){if(this.playbackTool){var range=this.playbackTool.playbackToolbar.control.range;range=this.calculateNewRange(range,value);var center=this.playbackTool.playbackToolbar.control.currentTime;var span=range[1]-range[0];var start=new Date(center.getTime()-span/2);var end=new Date(center.getTime()+span/2);for(var key in this.layerLookup){var layer=this.layerLookup[key].layer;layer&&this.setTimeFilter(key,this.createTimeFilter([start,end],key,this.bufferFraction));}
this.updateTimelineEvents({force:true});}},setFilterMatcher:function(filterMatcher){if(this.timeline){this.timeline.getBand(0).getEventPainter().setFilterMatcher(filterMatcher);this.timeline.getBand(1).getEventPainter().setFilterMatcher(filterMatcher);this.timeline.paint();}},setLayerVisibility:function(item,checked,record,clear){var keyToMatch=this.getKey(record);(clear!==false)&&this.clearEventsForKey(keyToMatch);Ext.apply(this.layerLookup[keyToMatch],{visible:checked});if(this.layerLookup[keyToMatch].layer){this.layerLookup[keyToMatch].layer.setVisibility(checked);}
var filterMatcher=function(evt){var key=evt.getProperty('key');if(key===keyToMatch){return checked;}else{return true;}};this.setFilterMatcher(filterMatcher);this.updateTimelineEvents();},applyFilter:function(record,filter,checked){var key=this.getKey(record);var layer=this.layerLookup[key].layer;if(checked){this.layerLookup[key].clientSideFilter=filter;}else{delete this.layerLookup[key].clientSideFilter;}
if(this.layerLookup[key].layer){this.layerLookup[key].layer.filter=this.assembleFullFilter(key);}
this.updateTimelineEvents({force:true});},setTitleAttribute:function(record,titleAttr){var key=this.getKey(record);this.layerLookup[key].titleAttr=titleAttr;this.clearEventsForKey(key);this.onFeaturesAdded({features:this.layerLookup[key].layer.features},key);},destroyPopup:function(){if(this.popup){this.popup.destroy();this.popup=null;}},handleEventClick:function(x,y,evt){var fid=evt.getProperty("fid");var key=evt.getProperty("key");var layer=this.layerLookup[key].layer;var feature=layer&&layer.getFeatureByFid(fid);if(feature){this.destroyPopup();if(!layer.protocol){if(this.featureEditor){this.featureEditor._forcePopupForNoGeometry=true;layer.events.triggerEvent("featureselected",{feature:feature});delete this.featureEditor._forcePopupForNoGeometry;}}else{if(!feature.geometry&&feature.bounds){feature.geometry=feature.bounds.toGeometry();}
var centroid=feature.geometry.getCentroid();var map=this.viewer.mapPanel.map;this._silentMapMove=true;map.setCenter(new OpenLayers.LonLat(centroid.x,centroid.y));delete this._silentMapMove;this.popup=new gxp.FeatureEditPopup({feature:feature,propertyGridNameText:"Attributes",title:evt.getProperty("title"),panIn:false,width:200,height:250,collapsible:true,readOnly:true,hideMode:'offsets'});this.popup.show();}}},bindFeatureEditor:function(featureEditor){this.featureEditor=featureEditor;this.featureManager=featureEditor.getFeatureManager();this.featureManager.on("layerchange",this.onLayerChange,this);},unbindFeatureEditor:function(){if(this.featureManager){if(this.featureManager.featureStore){this.featureManager.featureStore.un("write",this.onSave,this);}
this.featureManager.un("layerchange",this.onLayerChange,this);this.featureManager=null;}
this.featureEditor=null;},guessTitleAttribute:function(schema){var titleAttr=null;schema.each(function(record){if(record.get("type")==="xsd:string"){titleAttr=record.get("name");return false;}});return titleAttr;},onLayerChange:function(tool,record,schema){var key=this.getKey(record);var titleAttr=this.guessTitleAttribute(schema);var layer=this.featureManager.featureLayer;this.layerLookup[key]=Ext.apply({titleAttr:titleAttr,icon:Timeline.urlPrefix+"/images/note.png",layer:layer,visible:true},this.annotationConfig);this.featureManager.on("query",function(tool,store){var features=[];store.each(function(record){features.push(record.getFeature());});this.addFeatures(key,features);},this,{single:true});if(this.featureManager.featureStore){this.featureManager.featureStore.on("write",this.onSave,this);}
this.annotationsRecord=record;},onSave:function(store,action,data){var key=this.getKey(this.annotationsRecord);var features=[];for(var i=0,ii=data.length;i<ii;i++){var feature=data[i].feature;features.push(feature);var fid=feature.fid;this.clearEventsForFid(key,fid);if(this.tooltips&&this.tooltips[fid]){this.tooltips[fid].destroy();this.tooltips[fid]=null;}}
if(action!==Ext.data.Api.actions.destroy){this.addFeatures(key,features);}
this.showAnnotations(this.playbackTool.playbackToolbar.control.currentTime);},bindPlaybackTool:function(playbackTool){this.playbackTool=playbackTool;this.playbackTool.on("timechange",this.onTimeChange,this);this.playbackTool.on("rangemodified",this.onRangeModify,this);},unbindPlaybackTool:function(){if(this.playbackTool){this.playbackTool.un("timechange",this.onTimeChange,this);this.playbackTool.un("rangemodified",this.onRangeModify,this);this.playbackTool=null;}},onTimeChange:function(toolbar,currentTime){this._silent=true;this._ignoreTimeChange!==true&&this.setCenterDate(currentTime);delete this._silent;},onRangeModify:function(toolbar,range){this._silent=true;this.setRange(range);delete this._silent;},createTimeline:function(range){if(!this.rendered||(this.timelineContainer.el.getSize().width===0&&this.timelineContainer.el.getSize().height===0)){return;}
var theme=Timeline.ClassicTheme.create();var span=range[1]-range[0];var years=((((span/1000)/60)/60)/24)/365;var intervalUnits=[];if(years>=50){intervalUnits.push(Timeline.DateTime.DECADE);intervalUnits.push(Timeline.DateTime.CENTURY);}else{intervalUnits.push(Timeline.DateTime.YEAR);intervalUnits.push(Timeline.DateTime.DECADE);}
var d=new Date(range[0].getTime()+span/2);var bandInfos=[Timeline.createBandInfo({width:"80%",intervalUnit:intervalUnits[0],intervalPixels:200,eventSource:this.eventSource,date:d,theme:theme,layout:"original",zoomIndex:7,zoomSteps:[{pixelsPerInterval:25,unit:intervalUnits[0]},{pixelsPerInterval:50,unit:intervalUnits[0]},{pixelsPerInterval:75,unit:intervalUnits[0]},{pixelsPerInterval:100,unit:intervalUnits[0]},{pixelsPerInterval:125,unit:intervalUnits[0]},{pixelsPerInterval:150,unit:intervalUnits[0]},{pixelsPerInterval:175,unit:intervalUnits[0]},{pixelsPerInterval:200,unit:intervalUnits[0]},{pixelsPerInterval:225,unit:intervalUnits[0]},{pixelsPerInterval:250,unit:intervalUnits[0]},{pixelsPerInterval:275,unit:intervalUnits[0]},{pixelsPerInterval:300,unit:intervalUnits[0]},{pixelsPerInterval:325,unit:intervalUnits[0]},{pixelsPerInterval:350,unit:intervalUnits[0]},{pixelsPerInterval:375,unit:intervalUnits[0]}]}),Timeline.createBandInfo({width:"20%",intervalUnit:intervalUnits[1],intervalPixels:200,eventSource:this.eventSource,date:d,theme:theme,layout:"overview"})];bandInfos[1].syncWith=0;bandInfos[1].highlight=true;bandInfos[0].decorators=[new Timeline.PointHighlightDecorator({date:d,theme:theme})];this.timeline=Timeline.create(this.timelineContainer.el.dom,bandInfos,Timeline.HORIZONTAL);this._silent=true;this.timeline.getBand(0).addOnScrollListener(gxp.util.throttle(this.setPlaybackCenter.createDelegate(this),this.scrollInterval));},setPlaybackCenter:function(band){var time=band.getCenterVisibleDate();if(this._silent!==true&&this.playbackTool&&this.playbackTool.playbackToolbar.playing!==true){this._ignoreTimeChange=true;this.playbackTool.setTime(time);this.timeline.getBand(0)._decorators[0]._date=this.playbackTool.playbackToolbar.control.currentTime;this.timeline.getBand(0)._decorators[0].paint();delete this._ignoreTimeChange;this.showAnnotations(time);}},bindViewer:function(viewer){if(this.viewer){this.unbindViewer();}
this.viewer=viewer;if(!this.layerLookup){this.layerLookup={};}
var layerStore=viewer.mapPanel.layers;if(layerStore.getCount()>0){this.onLayerStoreAdd(layerStore,layerStore.getRange());}
layerStore.on({add:this.onLayerStoreAdd,remove:this.onLayerStoreRemove,scope:this});viewer.mapPanel.map.events.on({moveend:this.onMapMoveEnd,scope:this});},unbindViewer:function(){var mapPanel=this.viewer&&this.viewer.mapPanel;if(mapPanel){mapPanel.layers.unregister("add",this.onLayerStoreAdd,this);mapPanel.layers.unregister("remove",this.onLayerStoreRemove,this);mapPanel.map.un({moveend:this.onMapMoveEnd,scope:this});}
delete this.viewer;delete this.layerLookup;delete this.schemaCache;delete this.propertyNamesCache;},getKey:function(record){return record.get("source")+"/"+record.get("name");},getTimeAttribute:function(record,protocol,schema,callback){var key=this.getKey(record);Ext.Ajax.request({method:"GET",url:this.timeInfoEndpoint,params:{layer:record.get('name')},success:function(response){var result=Ext.decode(response.responseText);if(result){callback.call(this,result,key,record,protocol,schema);}},scope:this});},onLayerStoreRemove:function(store,record,index){var key=this.getKey(record);if(this.layerLookup[key]){var layer=this.layerLookup[key].layer;if(layer){this.clearEventsForKey(key);layer.events.un({loadstart:this.onLoadStart,loadend:this.onLoadEnd,featuresremoved:this.onFeaturesRemoved,scope:this});delete this.schemaCache[key];delete this.propertyNamesCache[key];delete this.layerLookup[key];layer.destroy();}}},parseSLD:function(response,key,callback){var parser=new OpenLayers.Format.SLD();this.sldCache[key]=parser.read(response.responseXML||response.responseText);callback&&callback.call(this);},getFilterFromSLD:function(key,styleName){var sld=this.sldCache[key];if(sld===undefined){return false;}
var filters=[];var elseFilter=false;for(var lyr in sld.namedLayers){for(var i=0,ii=sld.namedLayers[lyr].userStyles.length;i<ii;++i){var style=sld.namedLayers[lyr].userStyles[i];if((styleName===""&&style.isDefault===true)||(style.name===styleName)){for(var j=0,jj=style.rules.length;j<jj;++j){var rule=style.rules[j];if(rule.elseFilter===true){elseFilter=true;break;}else if(rule.filter){filters.push(rule.filter);}}}}}
if(elseFilter===true){return false;}
else if(filters.length===1){return filters[0];}
else if(filters.length>0){return new OpenLayers.Filter.Logical({type:OpenLayers.Filter.Logical.OR,filters:filters});}else{return false;}},getSLD:function(record,callback){var key=this.getKey(record);var layer=record.getLayer();Ext.Ajax.request({url:layer.url,params:{"SERVICE":"WMS","VERSION":"1.1.1","REQUEST":"GetStyles","LAYERS":[layer.params["LAYERS"]].join(",")},method:"GET",disableCaching:false,success:this.parseSLD.createDelegate(this,[key,callback],1),scope:this});},onLayerStoreAdd:function(store,records){var record;for(var i=0,ii=records.length;i<ii;++i){record=records[i];var layer=record.getLayer();if(layer.dimensions&&layer.dimensions.time){var source=this.viewer.getSource(record);if(gxp.plugins.WMSSource&&(source instanceof gxp.plugins.WMSSource)){source.getWFSProtocol(record,function(protocol,schema,record){if(!protocol){throw new Error("Failed to get protocol for record: "+record.get("name"));}
var key=this.getKey(record);this.schemaCache[key]=schema;var callback=function(result,key,record,protocol,schema){if(result.attribute){this.layerLookup[key]=Ext.applyIf(this.layerLookup[key]||{},{timeAttr:result.attribute,endTimeAttr:result.endAttribute,visible:false});this.addVectorLayer(record,protocol,schema);}};var sldCallback;if(this.layerLookup&&this.layerLookup[key]&&this.layerLookup[key].timeAttr){sldCallback=function(){if(this.layerLookup[key].clientSideFilter){this.layerLookup[key].clientSideFilter=new OpenLayers.Filter(this.layerLookup[key].clientSideFilter);}
this.addVectorLayer(record,protocol,schema);};}else{sldCallback=function(){this.getTimeAttribute(record,protocol,schema,callback);};}
if(!this.sldCache[key]){this.getSLD(record,sldCallback);}else{sldCallback.call(this);}},this);}}}},onLayout:function(){gxp.TimelinePanel.superclass.onLayout.call(this,arguments);if(!this.timeline){if(this.playbackTool&&this.playbackTool.playbackToolbar){this.setRange(this.playbackTool.playbackToolbar.control.range);this.setCenterDate(this.playbackTool.playbackToolbar.control.currentTime);}}},findBestZoomLevel:function(range){if(this.timeline){this._silent=true;var diff=range[1]-range[0];var band=this.timeline.getBand(0);var length=band.getViewLength()/2;if(length>0){var level=diff/band.getEther()._interval;var pixels=length/level;var delta;var prevDelta=Number.POSITIVE_INFINITY;var idx;for(var i=0,ii=band._zoomSteps.length;i<ii;++i){delta=Math.abs(band._zoomSteps[i].pixelsPerInterval-pixels);if(delta<prevDelta){idx=i;}
prevDelta=delta;}
if(idx!==band._zoomIndex){var zoomIn=idx<band._zoomIndex;while(idx!=band._zoomIndex){band.zoom(zoomIn);}}
this.timeline.paint();delete this._silent;}}},setRange:function(range){this.originalRange=range;if(!this.timeline){this.createTimeline(range);}
if(this.timeline){var firstBand=this.timeline.getBand(0);firstBand.setMinVisibleDate(range[0]);firstBand.setMaxVisibleDate(range[1]);var secondBand=this.timeline.getBand(1);secondBand.getEtherPainter().setHighlight(range[0],range[1]);}},updateRangeSlider:function(range){if(this.showRangeSlider){this.rangeSlider.startDate=range[0].dateFormat('Y-m-d');this.rangeSlider.endDate=range[1].dateFormat('Y-m-d');}},displayTooltip:function(record){var hasGeometry=(record.getFeature().geometry!==null);if(!this.tooltips){this.tooltips={};}
var fid=record.getFeature().fid;if(!this.tooltips[fid]){if(!hasGeometry){this.tooltips[fid]=new Ext.Tip({cls:'gxp-annotations-tip',html:'<h4>'+record.get("title")+'</h4>'+record.get('content')});}else{this.tooltips[fid]=new GeoExt.FeatureTip({map:this.viewer.mapPanel.map,location:record.getFeature(),cls:'gxp-annotations-tip',html:'<h4>'+record.get("title")+'</h4>'+record.get('content')});}}
var tooltip=this.tooltips[fid];if(!hasGeometry){tooltip.showBy(this.viewer.mapPanel.body,record.get("appearance"),[10,10]);tooltip.showBy(this.viewer.mapPanel.body,record.get("appearance"),[10,10]);}else{tooltip.show();}},hideTooltip:function(record){var fid=record.getFeature().fid;if(this.tooltips&&this.tooltips[fid]){this.tooltips[fid].hide();}},showAnnotations:function(time){if(!this.annotationsLayer){this.annotationsLayer=new OpenLayers.Layer.Vector(null,{displayInLayerSwitcher:false,styleMap:new OpenLayers.StyleMap({'default':{label:"${title}\n${content}",fontColor:"black",fontSize:"12px",fontFamily:"Courier New, monospace",fontWeight:"bold",labelOutlineColor:"white",labelAlign:"middle",labelOutlineWidth:3}})});this.viewer&&this.viewer.mapPanel.map.addLayer(this.annotationsLayer);}
var compare=time.getTime()/1000;if(this.featureManager&&this.featureManager.featureStore){this.featureManager.featureStore.each(function(record){var mapFilterAttr=this.annotationConfig.mapFilterAttr;if(Ext.isBoolean(record.get(mapFilterAttr))?record.get(mapFilterAttr):(record.get(mapFilterAttr)==="true")){var startTime=parseFloat(record.get(this.annotationConfig.timeAttr));var endTime=record.get(this.annotationConfig.endTimeAttr);var ranged=(endTime!=startTime);if(endTime==""||endTime==null){endTime=this.playbackTool.playbackToolbar.control.range[1].getTime();}
if(ranged===true){if(compare<=parseFloat(endTime)&&compare>=startTime){this.displayTooltip(record);}else{this.hideTooltip(record);}}else{var diff=Math.abs(Math.abs(startTime)-Math.abs(compare));var percentage=diff/Math.abs(startTime)*100;if(percentage<=2.5){this.displayTooltip(record);}else{this.hideTooltip(record);}}}},this);}},setCenterDate:function(time){if(this.timeline){this.timeline.getBand(0)._decorators[0]._date=time;this.timeline.getBand(0)._decorators[0].paint();this.timeline.getBand(0).setCenterVisibleDate(time);if(this.rangeInfo&&this.rangeInfo.current){var currentRange=this.rangeInfo.current;var originalRange=this.rangeInfo.original;if(time<originalRange[0]||time>originalRange[1]){var span=currentRange[1]-currentRange[0];var start=new Date(time.getTime()-span/2);var end=new Date(time.getTime()+span/2);start=new Date(Math.max(this.originalRange[0],start));end=new Date(Math.min(this.originalRange[1],end));this.rangeInfo.current=[start,end];var startOriginal=new Date(time.getTime()-span/4);var endOriginal=new Date(time.getTime()+span/4);this.rangeInfo.original=[startOriginal,endOriginal];if(start>currentRange[0]&&start<currentRange[1]){start=currentRange[1];}
if(start<currentRange[0]&&end>currentRange[0]){end=currentRange[0];}
for(var key in this.layerLookup){var layer=this.layerLookup[key].layer;layer&&this.setTimeFilter(key,this.createTimeFilter([start,end],key,0,false));}
this.updateTimelineEvents({force:true,noAbort:true},true);}}}
this.showAnnotations(time);},calculateNewRange:function(range,percentage){if(this.playbackTool){if(percentage===undefined){percentage=this.showRangeSlider?this.rangeSlider.getValue():this.initialRangeSliderValue;}
var span=range[1]-range[0];var center=this.playbackTool.playbackToolbar.control.currentTime;var newSpan=(percentage/100)*span;var start=new Date(center.getTime()-newSpan/2);var end=new Date(center.getTime()+newSpan/2);return[start,end];}},createTimeFilter:function(range,key,fraction,updateRangeInfo){var start=new Date(range[0].getTime()-fraction*(range[1]-range[0]));var end=new Date(range[1].getTime()+fraction*(range[1]-range[0]));if(this.originalRange){start=new Date(Math.max(this.originalRange[0],start));end=new Date(Math.min(this.originalRange[1],end));}
if(updateRangeInfo!==false){this.rangeInfo={original:range,current:[start,end]};}
this.updateRangeSlider(this.rangeInfo.current);if(this.playbackTool&&this.playbackTool.playbackToolbar.playing!==true){this.findBestZoomLevel([start,end]);}
if(this.layerLookup[key].endTimeAttr){return new OpenLayers.Filter({type:OpenLayers.Filter.Logical.OR,filters:[new OpenLayers.Filter({type:OpenLayers.Filter.Comparison.BETWEEN,property:this.layerLookup[key].timeAttr,lowerBoundary:OpenLayers.Date.toISOString(start),upperBoundary:OpenLayers.Date.toISOString(end)}),new OpenLayers.Filter({type:OpenLayers.Filter.Comparison.BETWEEN,property:this.layerLookup[key].endTimeAttr,lowerBoundary:OpenLayers.Date.toISOString(start),upperBoundary:OpenLayers.Date.toISOString(end)})]});}else{return new OpenLayers.Filter({type:OpenLayers.Filter.Comparison.BETWEEN,property:this.layerLookup[key].timeAttr,lowerBoundary:OpenLayers.Date.toISOString(start),upperBoundary:OpenLayers.Date.toISOString(end)});}},onLoadStart:function(){this.layerCount++;if(!this.busyMask){this.busyMask=new Ext.LoadMask(this.bwrap,{msg:this.loadingMessage});}
this.busyMask.show();},onLoadEnd:function(){this.layerCount--;if(this.layerCount===0){this.busyMask.hide();}},createHitCountProtocol:function(protocolOptions){return new OpenLayers.Protocol.WFS(Ext.apply({version:"1.1.0",readOptions:{output:"object"},resultType:"hits"},protocolOptions));},assembleFullFilter:function(key){var lookup=this.layerLookup[key];var filters=[];if(lookup.sldFilter!==false){filters.push(lookup.sldFilter);}
if(lookup.timeFilter){filters.push(lookup.timeFilter);}
if(lookup.clientSideFilter){filters.push(lookup.clientSideFilter);}
var filter=null;if(filters.length===1){filter=filters[0];}else if(filters.length>1){filter=new OpenLayers.Filter.Logical({type:OpenLayers.Filter.Logical.AND,filters:filters});}
return filter;},setTimeFilter:function(key,filter){this.layerLookup[key].timeFilter=filter;if(this.layerLookup[key].layer){this.layerLookup[key].layer.filter=this.assembleFullFilter(key);}},addVectorLayer:function(record,protocol,schema){var key=this.getKey(record);var style=record.getLayer().params.STYLES;this.layerLookup[key].sldFilter=this.getFilterFromSLD(key,style);if(this.playbackTool){var range=this.playbackTool.playbackToolbar.control.range;range=this.calculateNewRange(range);this.setCenterDate(this.playbackTool.playbackToolbar.control.currentTime);this.setTimeFilter(key,this.createTimeFilter(range,key,this.bufferFraction));}
var filter=this.assembleFullFilter(key);var layer=new OpenLayers.Layer.Vector(key,{strategies:[new OpenLayers.Strategy.BBOX({ratio:1.1,resFactor:1,autoActivate:false})],filter:filter,protocol:protocol,displayInLayerSwitcher:false,style:{pointRadius:0,strokeWidth:0,fillOpacity:1},visibility:false});layer.events.on({featuresadded:this.onFeaturesAdded.createDelegate(this,[key],1),featuresremoved:this.onFeaturesRemoved,scope:this});var titleAttr=this.guessTitleAttribute(schema);Ext.applyIf(this.layerLookup[key],{layer:layer,titleAttr:titleAttr,hitCount:this.createHitCountProtocol(protocol.options)});this.viewer.mapPanel.map.addLayer(layer);},onMapMoveEnd:function(){this._silentMapMove!==true&&this.updateTimelineEvents();this.filterAnnotationsByBBOX();},filterAnnotationsByBBOX:function(){if(this.featureManager&&this.featureManager.featureStore){var fids=[];this.featureManager.featureStore.each(function(record){var feature=record.getFeature();if(feature.geometry!==null){var bounds=feature.geometry.getBounds();if(!bounds.intersectsBounds(this.viewer.mapPanel.map.getExtent())){fids.push(feature.fid);}}},this);var filterMatcher=function(evt){return(fids.indexOf(evt.getProperty('fid'))===-1);};this.setFilterMatcher(filterMatcher);}},updateTimelineEvents:function(options,clearWhenInvisible){if(!this.rendered){return;}
var dispatchQueue=[];var layer,key;for(key in this.layerLookup){layer=this.layerLookup[key].layer;if(this.layerLookup[key].visible&&layer&&layer.strategies!==null){var protocol=this.layerLookup[key].hitCount;var bounds=layer.strategies[0].bounds;layer.strategies[0].calculateBounds();var filter=new OpenLayers.Filter.Spatial({type:OpenLayers.Filter.Spatial.BBOX,value:layer.strategies[0].bounds,projection:layer.projection});layer.strategies[0].bounds=bounds;if(layer.filter){filter=new OpenLayers.Filter.Logical({type:OpenLayers.Filter.Logical.AND,filters:[layer.filter,filter]});}
protocol.filter=protocol.options.filter=filter;var func=function(done,storage){this.read({callback:function(response){if(storage.numberOfFeatures===undefined){storage.numberOfFeatures=0;}
storage.numberOfFeatures+=response.numberOfFeatures;done();}});};dispatchQueue.push(func.createDelegate(protocol));}}
gxp.util.dispatch(dispatchQueue,function(storage){if(storage.numberOfFeatures<=this.maxFeatures){this.timelineContainer.el.unmask(true);for(key in this.layerLookup){layer=this.layerLookup[key].layer;if(layer&&layer.strategies!==null){if(clearWhenInvisible===true){this.clearInvisibleEvents(key);}else{this.clearEventsForKey(key);}
var schema=this.schemaCache[key];var propertyNames=this.propertyNamesCache[key];if(!propertyNames){propertyNames=[];schema.each(function(r){var name=r.get("name");var type=r.get("type");if(!type.match(/^[^:]*:?((Multi)?(Point|Line|Polygon|Curve|Surface|Geometry))/)){propertyNames.push(name);}});this.propertyNamesCache[key]=propertyNames;}
options=options||{};options.propertyNames=propertyNames;layer.strategies[0].activate();layer.strategies[0].update(options);}}}else{for(key in this.layerLookup){layer=this.layerLookup[key].layer;if(layer&&layer.strategies!==null){layer.strategies[0].deactivate();}}
var msg;if(isNaN(storage.numberOfFeatures)){msg=this.errorText;}else{var tpl=new Ext.Template(this.instructionText);msg=tpl.applyTemplate({count:storage.numberOfFeatures,max:this.maxFeatures});}
this.timelineContainer.el.mask(msg,'');this.eventSource.clear();}},this);},clearEventsForKey:function(key){var iterator=this.eventSource.getAllEventIterator();var eventIds=[];while(iterator.hasNext()){var evt=iterator.next();if(evt.getProperty('key')===key){eventIds.push(evt.getID());}}
for(var i=0,len=eventIds.length;i<len;++i){this.eventSource.remove(eventIds[i]);}
this.timeline&&this.timeline.layout();},clearInvisibleEvents:function(key){if(this.timeline){var band=this.timeline.getBand(0);var min=band.getMinVisibleDate();var max=band.getMaxVisibleDate();var iterator=this.eventSource.getAllEventIterator();var eventIds=[];while(iterator.hasNext()){var evt=iterator.next();var start=evt.getProperty('start');var visible=start>=min&&start<=max;if(evt.getProperty('key')===key&&!visible){eventIds.push(evt.getID());}}
for(var i=0,len=eventIds.length;i<len;++i){this.eventSource.remove(eventIds[i]);}
this.timeline.layout();}},clearEventsForRange:function(key,range){var iterator=this.eventSource.getAllEventIterator();var eventIds=[];while(iterator.hasNext()){var evt=iterator.next();var start=evt.getProperty('start');if(evt.getProperty('key')===key&&start>=range[0]&&start<=range[1]){eventIds.push(evt.getID());}}
for(var i=0,len=eventIds.length;i<len;++i){this.eventSource.remove(eventIds[i]);}
this.timeline&&this.timeline.layout();},clearEventsForFid:function(key,fid){var iterator=this.eventSource.getAllEventIterator();var eventIds=[];while(iterator.hasNext()){var evt=iterator.next();if(evt.getProperty('key')===key&&evt.getProperty('fid')===fid){eventIds.push(evt.getID());}}
for(var i=0,len=eventIds.length;i<len;++i){this.eventSource.remove(eventIds[i]);}
this.timeline&&this.timeline.layout();},onFeaturesRemoved:function(event){for(var i=0,len=event.features.length;i<len;i++){event.features[i].destroy();}},addFeatures:function(key,features){var hasFeature=function(fid){var iterator=this.eventSource.getAllEventIterator();while(iterator.hasNext()){var evt=iterator.next();if(evt.getProperty('key')===key&&evt.getProperty('fid')===fid){return true;}}
return false;};var isDuration=false;var titleAttr=this.layerLookup[key].titleAttr;var timeAttr=this.layerLookup[key].timeAttr;var endTimeAttr=this.layerLookup[key].endTimeAttr;var filterAttr=this.layerLookup[key].filterAttr;if(endTimeAttr){isDuration=true;}
var num=features.length;var events=[];var attributes,str;for(var i=0;i<num;++i){if(hasFeature.call(this,features[i].fid)===false){attributes=features[i].attributes;if(isDuration===false){events.push({start:OpenLayers.Date.parse(attributes[timeAttr]),title:attributes[titleAttr],durationEvent:false,key:key,icon:this.layerLookup[key].icon,fid:features[i].fid});}else if(Ext.isBoolean(attributes[filterAttr])?attributes[filterAttr]:(attributes[filterAttr]==="true")){var start=attributes[timeAttr];var end=attributes[endTimeAttr];var durationEvent=(start!=end);if(!Ext.isEmpty(start)){start=parseFloat(start);if(Ext.isNumber(start)){start=new Date(start*1000);}else{start=OpenLayers.Date.parse(start);}}
if(!Ext.isEmpty(end)){end=parseFloat(end);if(Ext.isNumber(end)){end=new Date(end*1000);}else{end=OpenLayers.Date.parse(end);}}
if(durationEvent===false){end=undefined;}else{if(end==""||end==null){end=this.playbackTool.playbackToolbar.control.range[1];}}
events.push({start:start,end:end,icon:this.layerLookup[key].icon,title:attributes[titleAttr],durationEvent:durationEvent,key:key,fid:features[i].fid});}}}
var feed={dateTimeFormat:"javascriptnative",events:events};this.eventSource.loadJSON(feed,"mapstory.org");},onFeaturesAdded:function(event,key){var features=event.features;this.addFeatures(key,features);},onResize:function(){gxp.TimelinePanel.superclass.onResize.apply(this,arguments);this.timeline&&this.timeline.layout();},beforeDestroy:function(){gxp.TimelinePanel.superclass.beforeDestroy.call(this);for(var key in this.layerLookup){var layer=this.layerLookup[key].layer;if(layer){layer.events.un({loadstart:this.onLoadStart,loadend:this.onLoadEnd,featuresremoved:this.onFeaturesRemoved,scope:this});layer.destroy();}}
this.annotationsRecord=null;this.annotationsLayer=null;this.destroyPopup();this.unbindViewer();this.unbindFeatureEditor();this.unbindPlaybackTool();if(this.rendered){Ext.destroy(this.busyMask);}
this.eventSource=null;if(this.timeline){this.timeline.dispose();this.timeline=null;}
this.busyMask=null;},getState:function(){var result={layerLookup:{}};for(var key in this.layerLookup){var info=this.layerLookup[key];result.layerLookup[key]={titleAttr:info.titleAttr,timeAttr:info.timeAttr,endTimeAttr:info.endTimeAttr,visible:info.visible,clientSideFilter:info.clientSideFilter};}
return result;}});Ext.reg("gxp_timelinepanel",gxp.TimelinePanel);Ext.namespace("gxp.form");gxp.form.CSWFilterField=Ext.extend(Ext.form.CompositeField,{clearTooltip:"Clear the filter for this category",emptyText:'Select filter',property:null,map:null,type:OpenLayers.Filter.Comparison.EQUAL_TO,name:null,comboFieldLabel:null,comboStoreData:null,target:null,getFilter:function(){if(this.property==='BoundingBox'){return new OpenLayers.Filter.Spatial({type:OpenLayers.Filter.Spatial.BBOX,property:this.property,projection:"EPSG:4326",value:this.map.getExtent().transform(this.map.getProjectionObject(),new OpenLayers.Projection("EPSG:4326"))});}else{return new OpenLayers.Filter.Comparison({type:this.type,property:this.property,value:this.combo.getValue()});}},initComponent:function(){this.items=[{ref:'combo',xtype:"combo",fieldLabel:this.comboFieldLabel,store:new Ext.data.ArrayStore({fields:['id','value'],data:this.comboStoreData}),displayField:'value',valueField:'id',mode:'local',listeners:{'select':function(cmb,record){if(this.filter){this.target.removeFilter(this.filter);}
this.filter=this.getFilter();this.target.addFilter(this.filter);return false;},scope:this},emptyText:this.emptyText,triggerAction:'all'},{xtype:'button',iconCls:'gxp-icon-removelayers',tooltip:this.clearTooltip,handler:function(btn){this.target.removeFilter(this.filter);this.hide();},scope:this}];this.hidden=true;gxp.form.CSWFilterField.superclass.initComponent.apply(this,arguments);},destroy:function(){this.filter=null;this.target=null;this.map=null;gxp.form.CSWFilterField.superclass.destroy.call(this);}});Ext.reg('gxp_cswfilterfield',gxp.form.CSWFilterField);Ext.namespace("gxp");gxp.CatalogueSearchPanel=Ext.extend(Ext.Panel,{width:400,border:false,maxRecords:10,map:null,selectedSource:null,sources:null,searchFieldEmptyText:"Search",searchButtonText:"Search",addTooltip:"Create filter",addMapTooltip:"Add to map",advancedTitle:"Advanced",datatypeLabel:"Data type",extentLabel:"Spatial extent",categoryLabel:"Category",datasourceLabel:"Data source",filterLabel:"Filter search by",removeSourceTooltip:"Switch back to original source",initComponent:function(){this.addEvents("addlayer");this.filters=[];var sourceComboData=[];for(var key in this.sources){sourceComboData.push([key,this.sources[key].title]);}
if(sourceComboData.length>=1){this.selectedSource=sourceComboData[0][0];}
var filterOptions=[['datatype','data type'],['extent','spatial extent'],['category','category']];if(sourceComboData.length>1){filterOptions.push(['csw','data source']);}
this.items=[{xtype:'form',border:false,ref:'form',hideLabels:true,autoHeight:true,style:"margin-left: 5px; margin-right: 5px; margin-bottom: 5px; margin-top: 5px",items:[{xtype:"compositefield",items:[{xtype:"textfield",emptyText:this.searchFieldEmptyText,ref:"../../search",name:"search",listeners:{specialkey:function(field,e){if(e.getKey()==e.ENTER){this.performQuery();}},scope:this},width:300},{xtype:"button",text:this.searchButtonText,handler:this.performQuery,scope:this}]},{xtype:"fieldset",collapsible:true,collapsed:true,hideLabels:false,title:this.advancedTitle,items:[{xtype:'gxp_cswfilterfield',name:'datatype',property:'apiso:Type',comboFieldLabel:this.datatypeLabel,comboStoreData:[['dataset','Dataset'],['datasetcollection','Dataset collection'],['application','Application'],['service','Service']],target:this},{xtype:'gxp_cswfilterfield',name:'extent',property:'BoundingBox',map:this.map,comboFieldLabel:this.extentLabel,comboStoreData:[['map','spatial extent of the map']],target:this},{xtype:'gxp_cswfilterfield',name:'category',property:'apiso:TopicCategory',comboFieldLabel:this.categoryLabel,comboStoreData:[['farming','Farming'],['biota','Biota'],['boundaries','Boundaries'],['climatologyMeteorologyAtmosphere','Climatology/Meteorology/Atmosphere'],['economy','Economy'],['elevation','Elevation'],['environment','Environment'],['geoscientificinformation','Geoscientific Information'],['health','Health'],['imageryBaseMapsEarthCover','Imagery/Base Maps/Earth Cover'],['intelligenceMilitary','Intelligence/Military'],['inlandWaters','Inland Waters'],['location','Location'],['oceans','Oceans'],['planningCadastre','Planning Cadastre'],['society','Society'],['structure','Structure'],['transportation','Transportation'],['utilitiesCommunications','Utilities/Communications']],target:this},{xtype:"compositefield",id:"csw",ref:"../../cswCompositeField",hidden:true,items:[{xtype:"combo",ref:"../../../sourceCombo",fieldLabel:this.datasourceLabel,store:new Ext.data.ArrayStore({fields:['id','value'],data:sourceComboData}),displayField:'value',valueField:'id',mode:'local',listeners:{'select':function(cmb,record){this.setSource(cmb.getValue());},'render':function(){this.sourceCombo.setValue(this.selectedSource);},scope:this},triggerAction:'all'},{xtype:'button',iconCls:'gxp-icon-removelayers',tooltip:this.removeSourceTooltip,handler:function(btn){this.setSource(this.initialConfig.selectedSource);this.sourceCombo.setValue(this.initialConfig.selectedSource);this.cswCompositeField.hide();},scope:this}]},{xtype:'compositefield',items:[{xtype:"combo",fieldLabel:this.filterLabel,store:new Ext.data.ArrayStore({fields:['id','value'],data:filterOptions}),displayField:'value',valueField:'id',mode:'local',triggerAction:'all'},{xtype:'button',iconCls:'gxp-icon-addlayers',tooltip:this.addTooltip,handler:function(btn){btn.ownerCt.items.each(function(item){if(item.getXType()==="combo"){var id=item.getValue();item.clearValue();var field=this.form.getForm().findField(id);if(field){field.show();}}},this);},scope:this}]}]},{xtype:"grid",width:'100%',anchor:'99%',viewConfig:{scrollOffset:0,forceFit:true},border:false,ref:"../grid",bbar:new Ext.PagingToolbar({paramNames:this.sources[this.selectedSource].getPagingParamNames(),store:this.sources[this.selectedSource].store,pageSize:this.maxRecords}),loadMask:true,hideHeaders:true,store:this.sources[this.selectedSource].store,columns:[{id:'title',xtype:"templatecolumn",tpl:new Ext.XTemplate('<b>{title}</b><br/>{abstract}'),sortable:true},{xtype:"actioncolumn",width:30,items:[{iconCls:"gxp-icon-addlayers",tooltip:this.addMapTooltip,handler:function(grid,rowIndex,colIndex){var rec=this.grid.store.getAt(rowIndex);this.addLayer(rec);},scope:this}]}],autoExpandColumn:'title',autoHeight:true}]}];gxp.CatalogueSearchPanel.superclass.initComponent.apply(this,arguments);},destroy:function(){this.sources=null;this.map=null;gxp.CatalogueSearchPanel.superclass.destroy.call(this);},setSource:function(key){this.selectedSource=key;var store=this.sources[key].store;this.grid.reconfigure(store,this.grid.getColumnModel());this.grid.getBottomToolbar().bindStore(store);},performQuery:function(){var plugin=this.sources[this.selectedSource];plugin.filter({queryString:this.search.getValue(),limit:this.maxRecords,filters:this.filters});},addFilter:function(filter){this.filters.push(filter);},removeFilter:function(filter){this.filters.remove(filter);},findWMS:function(links){var url=null,name=null;for(var i=0,ii=links.length;i<ii;++i){var link=links[i];if(link&&link.toLowerCase().indexOf('service=wms')>0){var obj=OpenLayers.Util.createUrlObject(link);url=obj.protocol+"//"+obj.host+":"+obj.port+obj.pathname;name=obj.args.layers;break;}}
if(url!==null&&name!==null){return{url:url,name:name};}else{return false;}},addLayer:function(record){var uri=record.get("URI");var bounds=record.get("bounds");var bLeft=bounds.left,bRight=bounds.right,bBottom=bounds.bottom,bTop=bounds.top;var left=Math.min(bLeft,bRight),right=Math.max(bLeft,bRight),bottom=Math.min(bBottom,bTop),top=Math.max(bBottom,bTop);var wmsInfo=this.findWMS(uri);if(wmsInfo===false){var references=record.get("references");wmsInfo=this.findWMS(references);}
if(wmsInfo!==false){this.fireEvent("addlayer",this,this.selectedSource,Ext.apply({title:record.get('title')[0],bbox:[left,bottom,right,top],srs:"EPSG:4326"},wmsInfo));}}});Ext.reg('gxp_cataloguesearchpanel',gxp.CatalogueSearchPanel);Ext.namespace("gxp.plugins");gxp.plugins.LayerSource=Ext.extend(Ext.util.Observable,{store:null,lazy:false,hidden:false,title:"",constructor:function(config){this.initialConfig=config;Ext.apply(this,config);this.addEvents("ready","failure");gxp.plugins.LayerSource.superclass.constructor.apply(this,arguments);},init:function(target){this.target=target;this.createStore();},getMapProjection:function(){var projConfig=this.target.mapPanel.map.projection;return this.target.mapPanel.map.getProjectionObject()||(projConfig&&new OpenLayers.Projection(projConfig))||new OpenLayers.Projection("EPSG:4326");},getProjection:function(layerRecord){var layer=layerRecord.getLayer();var mapProj=this.getMapProjection();var proj=layer.projection?layer.projection instanceof OpenLayers.Projection?layer.projection:new OpenLayers.Projection(layer.projection):mapProj;return proj.equals(mapProj)?mapProj:null;},createStore:function(){this.fireEvent("ready",this);},createLayerRecord:function(config){},getConfigForRecord:function(record){var layer=record.getLayer();return{source:record.get("source"),name:record.get("name"),title:record.get("title"),visibility:layer.getVisibility(),opacity:layer.opacity||undefined,group:record.get("group"),fixed:record.get("fixed"),selected:record.get("selected")};},getState:function(){return Ext.apply({},this.initialConfig);}});Ext.namespace("gxp.plugins");gxp.plugins.BingSource=Ext.extend(gxp.plugins.LayerSource,{ptype:"gxp_bingsource",title:"Bing Layers",roadTitle:"Bing Roads",aerialTitle:"Bing Aerial",labeledAerialTitle:"Bing Aerial With Labels",apiKey:"AqTGBsziZHIJYYxgivLBf0hVdrAk9mWO5cQcb8Yux8sW5M8c8opEC2lZqKR1ZZXf",createStore:function(){var layers=[new OpenLayers.Layer.Bing({key:this.apiKey,name:this.roadTitle,type:"Road",buffer:1,transitionEffect:"resize"}),new OpenLayers.Layer.Bing({key:this.apiKey,name:this.aerialTitle,type:"Aerial",buffer:1,transitionEffect:"resize"}),new OpenLayers.Layer.Bing({key:this.apiKey,name:this.labeledAerialTitle,type:"AerialWithLabels",buffer:1,transitionEffect:"resize"})];this.store=new GeoExt.data.LayerStore({layers:layers,fields:[{name:"source",type:"string"},{name:"name",type:"string",mapping:"type"},{name:"abstract",type:"string",mapping:"attribution"},{name:"group",type:"string",defaultValue:"background"},{name:"fixed",type:"boolean",defaultValue:true},{name:"selected",type:"boolean"}]});this.store.each(function(l){l.set("group","background");});this.fireEvent("ready",this);},createLayerRecord:function(config){var record;var index=this.store.findExact("name",config.name);if(index>-1){record=this.store.getAt(index).copy(Ext.data.Record.id({}));var layer=record.getLayer().clone();if(config.title){layer.setName(config.title);record.set("title",config.title);}
if("visibility"in config){layer.visibility=config.visibility;}
record.set("selected",config.selected||false);record.set("source",config.source);record.set("name",config.name);if("group"in config){record.set("group",config.group);}
record.data.layer=layer;record.commit();}
return record;}});Ext.preg(gxp.plugins.BingSource.prototype.ptype,gxp.plugins.BingSource);(function(){function keepRaw(data){var format=this.meta.format;if(typeof data==="string"||data.nodeType){data=format.read(data);var origRead=format.read;format.read=function(){format.read=origRead;return data;};}
this.raw=data;}
Ext.intercept(GeoExt.data.WMSCapabilitiesReader.prototype,"readRecords",keepRaw);GeoExt.data.AttributeReader&&Ext.intercept(GeoExt.data.AttributeReader.prototype,"readRecords",keepRaw);})();Ext.namespace("gxp.plugins");gxp.plugins.WMSSource=Ext.extend(gxp.plugins.LayerSource,{ptype:"gxp_wmssource",baseParams:null,format:null,describeLayerStore:null,describedLayers:null,schemaCache:null,ready:false,requiredProperties:["title","bbox"],constructor:function(config){if(config&&config.forceLazy===true){config.requiredProperties=[];delete config.forceLazy;if(window.console){console.warn("Deprecated config option 'forceLazy: true' for layer source '"+
config.id+"'. Use 'requiredProperties: []' instead.");}}
gxp.plugins.WMSSource.superclass.constructor.apply(this,arguments);if(!this.format){this.format=new OpenLayers.Format.WMSCapabilities({keepData:true});}},init:function(target){gxp.plugins.WMSSource.superclass.init.apply(this,arguments);this.target.on("authorizationchange",this.onAuthorizationChange,this);},onAuthorizationChange:function(){if(this.store&&this.url.charAt(0)==="/"){this.store.reload();}},destroy:function(){this.target.un("authorizationchange",this.onAuthorizationChange,this);gxp.plugins.WMSSource.superclass.destroy.apply(this,arguments);},isLazy:function(){var lazy=true;var mapConfig=this.target.initialConfig.map;if(mapConfig&&mapConfig.layers){var layerConfig;for(var i=0,ii=mapConfig.layers.length;i<ii;++i){layerConfig=mapConfig.layers[i];if(layerConfig.source===this.id){lazy=this.layerConfigComplete(layerConfig);if(lazy===false){break;}}}}
return lazy;},layerConfigComplete:function(config){var lazy=true;if(!Ext.isObject(config.capability)){var props=this.requiredProperties;for(var i=props.length-1;i>=0;--i){lazy=!!config[props[i]];if(lazy===false){break;}}}
return lazy;},createStore:function(){var baseParams=this.baseParams||{SERVICE:"WMS",REQUEST:"GetCapabilities"};if(this.version){baseParams.VERSION=this.version;}
var lazy=this.isLazy();this.store=new GeoExt.data.WMSCapabilitiesStore({url:this.trimUrl(this.url,baseParams),baseParams:baseParams,format:this.format,autoLoad:!lazy,layerParams:{exceptions:null},listeners:{load:function(){if(!this.store.reader.raw||!this.store.reader.raw.service){this.fireEvent("failure",this,"Invalid capabilities document.");}else{if(!this.title){this.title=this.store.reader.raw.service.title;}
if(!this.ready){this.ready=true;this.fireEvent("ready",this);}else{this.lazy=false;}}
delete this.format.data;},exception:function(proxy,type,action,options,response,error){delete this.store;var msg,details="";if(type==="response"){if(typeof error=="string"){msg=error;}else{msg="Invalid response from server.";var data=this.format&&this.format.data;if(data&&data.parseError){msg+="  "+data.parseError.reason+" - line: "+data.parseError.line;}
var status=response.status;if(status>=200&&status<300){var report=error&&error.arg&&error.arg.exceptionReport;details=gxp.util.getOGCExceptionText(report);}else{details="Status: "+status;}}}else{msg="Trouble creating layer store from response.";details="Unable to handle response.";}
this.fireEvent("failure",this,msg,details);delete this.format.data;},scope:this}});if(lazy){this.lazy=true;Ext.Ajax.request({method:"GET",url:this.url,params:{SERVICE:"WMS"},callback:function(options,success,response){var status=response.status;if(status>=200&&status<403&&response.responseText){this.ready=true;this.fireEvent("ready",this);}else{this.fireEvent("failure",this,"Layer source not available.","Unable to contact WMS service.");}},scope:this});}},trimUrl:function(url,params,respectCase){var urlParams=OpenLayers.Util.getParameters(url);params=OpenLayers.Util.upperCaseObject(params);var keys=0;for(var key in urlParams){++keys;if(key.toUpperCase()in params){--keys;delete urlParams[key];}}
return url.split("?").shift()+(keys?"?"+OpenLayers.Util.getParameterString(urlParams):"");},createLazyLayerRecord:function(config){config=Ext.apply({},config);var srs=config.srs||this.target.map.projection;config.srs={};config.srs[srs]=true;var bbox=config.bbox||this.target.map.maxExtent||OpenLayers.Projection.defaults[srs].maxExtent;config.bbox={};config.bbox[srs]={bbox:bbox};var record;if(this.store&&this.store instanceof GeoExt.data.WMSCapabilitiesStore){record=new this.store.recordType(config);}else{record=new GeoExt.data.LayerRecord(config);}
record.setLayer(new OpenLayers.Layer.WMS(config.title||config.name,config.url||this.url,{layers:config.name,transparent:"transparent"in config?config.transparent:true,cql_filter:config.cql_filter,format:config.format},{projection:srs}));record.json=config;return record;},createLayerRecord:function(config){var record,original;var index=this.store.findExact("name",config.name);if(index>-1){original=this.store.getAt(index);}else if(Ext.isObject(config.capability)){original=this.store.reader.readRecords({capability:{request:{getmap:{href:this.trimUrl(this.url,this.baseParams)}},layers:[config.capability]}}).records[0];}else if(this.layerConfigComplete(config)){original=this.createLazyLayerRecord(config);}
if(original){var layer=original.getLayer().clone();var projection=this.getMapProjection();var layerProjection=this.getProjection(original);var projCode=(layerProjection||projection).getCode(),bbox=original.get("bbox"),maxExtent;if(bbox&&bbox[projCode]){layer.addOptions({projection:layerProjection});maxExtent=OpenLayers.Bounds.fromArray(bbox[projCode].bbox,layer.reverseAxisOrder());}else{var llbbox=original.get("llbbox");if(llbbox){var extent=OpenLayers.Bounds.fromArray(llbbox).transform("EPSG:4326",projection);if((1/extent.getHeight()>0)&&(1/extent.getWidth()>0)){maxExtent=extent;}}}
layer.mergeNewParams({STYLES:config.styles,FORMAT:config.format,TRANSPARENT:config.transparent,CQL_FILTER:config.cql_filter});var singleTile=false;if("tiled"in config){singleTile=!config.tiled;}else{if(original.data.dimensions&&original.data.dimensions.time){singleTile=true;}}
layer.setName(config.title||layer.name);layer.addOptions({attribution:layer.attribution,maxExtent:maxExtent,restrictedExtent:maxExtent,singleTile:singleTile,ratio:config.ratio||1,visibility:("visibility"in config)?config.visibility:true,opacity:("opacity"in config)?config.opacity:1,buffer:("buffer"in config)?config.buffer:1,dimensions:original.data.dimensions,transitionEffect:singleTile?'resize':null,minScale:config.minscale,maxScale:config.maxscale});var data=Ext.applyIf({title:layer.name,group:config.group,infoFormat:config.infoFormat,source:config.source,properties:"gxp_wmslayerpanel",fixed:config.fixed,selected:"selected"in config?config.selected:false,restUrl:this.restUrl,layer:layer},original.data);var fields=[{name:"source",type:"string"},{name:"group",type:"string"},{name:"properties",type:"string"},{name:"fixed",type:"boolean"},{name:"selected",type:"boolean"},{name:"restUrl",type:"string"},{name:"infoFormat",type:"string"}];original.fields.each(function(field){fields.push(field);});var Record=GeoExt.data.LayerRecord.create(fields);record=new Record(data,layer.id);record.json=config;}else{if(window.console&&this.store.getCount()>0&&config.name!==undefined){console.warn("Could not create layer record for layer '"+config.name+"'. Check if the layer is found in the WMS GetCapabilities response.");}}
return record;},getProjection:function(layerRecord){var projection=this.getMapProjection();var compatibleProjection=projection;var availableSRS=layerRecord.get("srs");if(!availableSRS[projection.getCode()]){compatibleProjection=null;var p,srs;for(srs in availableSRS){if((p=new OpenLayers.Projection(srs)).equals(projection)){compatibleProjection=p;break;}}}
return compatibleProjection;},initDescribeLayerStore:function(){var raw=this.store.reader.raw;if(this.lazy){raw={capability:{request:{describelayer:{href:this.url}}},version:this.version||"1.1.1"};}
var req=raw.capability.request.describelayer;if(req){var version=raw.version;if(parseFloat(version)>1.1){version="1.1.1";}
var params={SERVICE:"WMS",VERSION:version,REQUEST:"DescribeLayer"};this.describeLayerStore=new GeoExt.data.WMSDescribeLayerStore({url:this.trimUrl(req.href,params),baseParams:params});}},describeLayer:function(rec,callback,scope){if(!this.describeLayerStore){this.initDescribeLayerStore();}
function delayedCallback(arg){window.setTimeout(function(){callback.call(scope,arg);},0);}
if(!this.describeLayerStore){delayedCallback(false);return;}
if(!this.describedLayers){this.describedLayers={};}
var layerName=rec.getLayer().params.LAYERS;var cb=function(){var recs=Ext.isArray(arguments[1])?arguments[1]:arguments[0];var rec,name;for(var i=recs.length-1;i>=0;i--){rec=recs[i];name=rec.get("layerName");if(name==layerName){this.describeLayerStore.un("load",arguments.callee,this);this.describedLayers[name]=true;callback.call(scope,rec);return;}else if(typeof this.describedLayers[name]=="function"){var fn=this.describedLayers[name];this.describeLayerStore.un("load",fn,this);fn.apply(this,arguments);}}
delete describedLayers[layerName];callback.call(scope,false);};var describedLayers=this.describedLayers;var index;if(!describedLayers[layerName]){describedLayers[layerName]=cb;this.describeLayerStore.load({params:{LAYERS:layerName},add:true,callback:cb,scope:this});}else if((index=this.describeLayerStore.findExact("layerName",layerName))==-1){this.describeLayerStore.on("load",cb,this);}else{delayedCallback(this.describeLayerStore.getAt(index));}},fetchSchema:function(url,typeName,callback,scope){var schema=this.schemaCache[typeName];if(schema){if(schema.getCount()==0){schema.on("load",function(){callback.call(scope,schema);},this,{single:true});}else{callback.call(scope,schema);}}else{schema=new GeoExt.data.AttributeStore({url:url,baseParams:{SERVICE:"WFS",VERSION:"1.1.0",REQUEST:"DescribeFeatureType",TYPENAME:typeName},autoLoad:true,listeners:{"load":function(){callback.call(scope,schema);},scope:this}});this.schemaCache[typeName]=schema;}},getSchema:function(rec,callback,scope){if(!this.schemaCache){this.schemaCache={};}
this.describeLayer(rec,function(r){if(r&&r.get("owsType")=="WFS"){var typeName=r.get("typeName");var url=r.get("owsURL");this.fetchSchema(url,typeName,callback,scope);}else if(!r){this.fetchSchema(this.url,rec.get('name'),callback,scope);}else{callback.call(scope,false);}},this);},getWFSProtocol:function(record,callback,scope){this.getSchema(record,function(schema){var protocol=false;if(schema){var geometryName;var geomRegex=/gml:((Multi)?(Point|Line|Polygon|Curve|Surface|Geometry)).*/;schema.each(function(r){var match=geomRegex.exec(r.get("type"));if(match){geometryName=r.get("name");}},this);protocol=new OpenLayers.Protocol.WFS({version:"1.1.0",srsName:record.getLayer().projection.getCode(),url:schema.url,featureType:schema.reader.raw.featureTypes[0].typeName,featureNS:schema.reader.raw.targetNamespace,geometryName:geometryName});}
callback.call(scope,protocol,schema,record);},this);},getConfigForRecord:function(record){var config=Ext.applyIf(gxp.plugins.WMSSource.superclass.getConfigForRecord.apply(this,arguments),record.json),layer=record.getLayer(),params=layer.params,options=layer.options;var name=config.name,raw=this.store.reader.raw;if(raw){var capLayers=raw.capability.layers;for(var i=capLayers.length-1;i>=0;--i){if(capLayers[i].name===name){config.capability=Ext.apply({},capLayers[i]);var srs={};srs[layer.projection.getCode()]=true;config.capability.srs=srs;break;}}}
if(!config.capability){if(layer.maxExtent){config.bbox=layer.maxExtent.toArray();}
config.srs=layer.projection.getCode();}
return Ext.apply(config,{format:params.FORMAT,styles:params.STYLES,transparent:params.TRANSPARENT,cql_filter:params.CQL_FILTER,minscale:options.minScale,maxscale:options.maxScale,infoFormat:record.get("infoFormat")});},getState:function(){var state=gxp.plugins.WMSSource.superclass.getState.apply(this,arguments);return Ext.applyIf(state,{title:this.title});}});Ext.preg(gxp.plugins.WMSSource.prototype.ptype,gxp.plugins.WMSSource);Ext.namespace("gxp.plugins");gxp.plugins.WMSCSource=Ext.extend(gxp.plugins.WMSSource,{ptype:"gxp_wmscsource",version:"1.1.1",constructor:function(config){config.baseParams={SERVICE:"WMS",REQUEST:"GetCapabilities",TILED:true};if(!config.format){this.format=new OpenLayers.Format.WMSCapabilities({keepData:true,profile:"WMSC"});}
gxp.plugins.WMSCSource.superclass.constructor.apply(this,arguments);},createLayerRecord:function(config){var record=gxp.plugins.WMSCSource.superclass.createLayerRecord.apply(this,arguments);if(!record){return;}
var caps,srs;if(this.store.reader.raw){caps=this.store.reader.raw.capability;}
var tileSets=(caps&&caps.vendorSpecific)?caps.vendorSpecific.tileSets:(config.capability&&config.capability.tileSets);var layer=record.get("layer");if(tileSets){var mapProjection=this.getProjection(record)||this.getMapProjection();for(var i=0,len=tileSets.length;i<len;i++){var tileSet=tileSets[i];if(tileSet.layers===layer.params.LAYERS){var tileProjection;for(srs in tileSet.srs){tileProjection=new OpenLayers.Projection(srs);break;}
if(mapProjection.equals(tileProjection)){var bbox=tileSet.bbox[srs].bbox;layer.projection=tileProjection;layer.addOptions({resolutions:tileSet.resolutions,tileSize:new OpenLayers.Size(tileSet.width,tileSet.height),tileOrigin:new OpenLayers.LonLat(bbox[0],bbox[1])});break;}}}}else if(this.lazy){var tileSize=config.tileSize,tileOrigin=config.tileOrigin;layer.addOptions({resolutions:config.resolutions,tileSize:tileSize?new OpenLayers.Size(tileSize[0],tileSize[1]):undefined,tileOrigin:tileOrigin?OpenLayers.LonLat.fromArray(tileOrigin):undefined});if(!tileOrigin){var maxExtent;if(this.target.map.maxExtent){maxExtent=this.target.map.maxExtent;}else{srs=config.srs||this.target.map.projection;maxExtent=OpenLayers.Projection.defaults[srs].maxExtent;}
if(maxExtent){layer.tileOrigin=OpenLayers.LonLat.fromArray(maxExtent);}}}
layer.params.TILED=(config.cached!==false)&&true;return record;},getConfigForRecord:function(record){var config=gxp.plugins.WMSCSource.superclass.getConfigForRecord.apply(this,arguments),name=config.name,tileSetsCap,layer=record.getLayer();if(config.capability&&this.store.reader.raw){var capability=this.store.reader.raw.capability;var tileSets=capability.vendorSpecific&&capability.vendorSpecific.tileSets;if(tileSets){for(var i=tileSets.length-1;i>=0;--i){tileSetsCap=tileSets[i];if(tileSetsCap.layers===name&&tileSetsCap.srs[layer.projection]){config.capability.tileSets=[tileSetsCap];break;}}}}
if(!(config.capability&&config.capability.tileSets)){var tileSize=layer.options.tileSize;if(tileSize){config.tileSize=[tileSize.w,tileSize.h];}
config.tileOrigin=layer.options.tileOrigin;config.resolutions=layer.options.resolutions;}
return Ext.applyIf(config,{cached:!!layer.params.TILED});}});Ext.preg(gxp.plugins.WMSCSource.prototype.ptype,gxp.plugins.WMSCSource);Ext.namespace("gxp.plugins");gxp.plugins.OSMSource=Ext.extend(gxp.plugins.LayerSource,{ptype:"gxp_osmsource",title:"OpenStreetMap Layers",mapnikAttribution:"&copy; <a href='http://www.openstreetmap.org/copyright'>OpenStreetMap</a> contributors",osmarenderAttribution:"Data CC-By-SA by <a href='http://openstreetmap.org/' target='_blank'>OpenStreetMap</a>",createStore:function(){var options={projection:"EPSG:900913",maxExtent:new OpenLayers.Bounds(-128*156543.0339,-128*156543.0339,128*156543.0339,128*156543.0339),maxResolution:156543.03390625,numZoomLevels:19,units:"m",buffer:1,transitionEffect:"resize"};var layers=[new OpenLayers.Layer.OSM("OpenStreetMap",["http://a.tile.openstreetmap.org/${z}/${x}/${y}.png","http://b.tile.openstreetmap.org/${z}/${x}/${y}.png","http://c.tile.openstreetmap.org/${z}/${x}/${y}.png"],OpenLayers.Util.applyDefaults({attribution:this.mapnikAttribution,type:"mapnik"},options))];this.store=new GeoExt.data.LayerStore({layers:layers,fields:[{name:"source",type:"string"},{name:"name",type:"string",mapping:"type"},{name:"abstract",type:"string",mapping:"attribution"},{name:"group",type:"string",defaultValue:"background"},{name:"fixed",type:"boolean",defaultValue:true},{name:"selected",type:"boolean"}]});this.store.each(function(l){l.set("group","background");});this.fireEvent("ready",this);},createLayerRecord:function(config){var record;var index=this.store.findExact("name",config.name);if(index>-1){record=this.store.getAt(index).copy(Ext.data.Record.id({}));var layer=record.getLayer().clone();if(config.title){layer.setName(config.title);record.set("title",config.title);}
if("visibility"in config){layer.visibility=config.visibility;}
record.set("selected",config.selected||false);record.set("source",config.source);record.set("name",config.name);if("group"in config){record.set("group",config.group);}
record.data.layer=layer;record.commit();}
return record;}});Ext.preg(gxp.plugins.OSMSource.prototype.ptype,gxp.plugins.OSMSource);Ext.namespace("gxp.plugins");gxp.plugins.GoogleSource=Ext.extend(gxp.plugins.LayerSource,{ptype:"gxp_googlesource",timeout:7000,title:"Google Layers",roadmapAbstract:"Show street map",satelliteAbstract:"Show satellite imagery",hybridAbstract:"Show imagery with street names",terrainAbstract:"Show street map with terrain",otherParams:"sensor=false",constructor:function(config){this.config=config;gxp.plugins.GoogleSource.superclass.constructor.apply(this,arguments);},createStore:function(){gxp.plugins.GoogleSource.loader.onLoad({otherParams:this.otherParams,timeout:this.timeout,callback:this.syncCreateStore,errback:function(){delete this.store;this.fireEvent("failure",this,"The Google Maps script failed to load within the provided timeout ("+(this.timeout/1000)+" s).");},scope:this});},syncCreateStore:function(){var mapTypes={"ROADMAP":{"abstract":this.roadmapAbstract,MAX_ZOOM_LEVEL:20},"SATELLITE":{"abstract":this.satelliteAbstract},"HYBRID":{"abstract":this.hybridAbstract},"TERRAIN":{"abstract":this.terrainAbstract,MAX_ZOOM_LEVEL:15}};var layers=[];var name,mapType;for(name in mapTypes){mapType=google.maps.MapTypeId[name];layers.push(new OpenLayers.Layer.Google("Google "+mapType.replace(/\w/,function(c){return c.toUpperCase();}),{type:mapType,typeName:name,MAX_ZOOM_LEVEL:mapTypes[name].MAX_ZOOM_LEVEL,maxExtent:new OpenLayers.Bounds(-20037508.34,-20037508.34,20037508.34,20037508.34),restrictedExtent:new OpenLayers.Bounds(-20037508.34,-20037508.34,20037508.34,20037508.34),projection:this.projection}));}
this.store=new GeoExt.data.LayerStore({layers:layers,fields:[{name:"source",type:"string"},{name:"name",type:"string",mapping:"typeName"},{name:"abstract",type:"string"},{name:"group",type:"string",defaultValue:"background"},{name:"fixed",type:"boolean",defaultValue:true},{name:"selected",type:"boolean"}]});this.store.each(function(l){l.set("abstract",mapTypes[l.get("name")]["abstract"]);});this.fireEvent("ready",this);},createLayerRecord:function(config){var record;var cmp=function(l){return l.get("name")===config.name;};if(this.target.mapPanel.layers.findBy(cmp)==-1){record=this.store.getAt(this.store.findBy(cmp)).clone();var layer=record.getLayer();if(config.title){layer.setName(config.title);record.set("title",config.title);}
if("visibility"in config){layer.visibility=config.visibility;}
record.set("selected",config.selected||false);record.set("source",config.source);record.set("name",config.name);if("group"in config){record.set("group",config.group);}
record.commit();}
return record;}});gxp.plugins.GoogleSource.loader=new(Ext.extend(Ext.util.Observable,{ready:!!(window.google&&google.maps),loading:false,constructor:function(){this.addEvents("ready","failure");return Ext.util.Observable.prototype.constructor.apply(this,arguments);},onScriptLoad:function(){var monitor=gxp.plugins.GoogleSource.loader;if(!monitor.ready){monitor.ready=true;monitor.loading=false;monitor.fireEvent("ready");}},onLoad:function(options){if(this.ready){window.setTimeout(function(){options.callback.call(options.scope);},0);}else if(!this.loading){this.loadScript(options);}else{this.on({ready:options.callback,failure:options.errback||Ext.emptyFn,scope:options.scope});}},loadScript:function(options){var params={autoload:Ext.encode({modules:[{name:"maps",version:3.3,nocss:"true",callback:"gxp.plugins.GoogleSource.loader.onScriptLoad",other_params:options.otherParams}]})};var script=document.createElement("script");script.src="http://www.google.com/jsapi?"+Ext.urlEncode(params);var errback=options.errback||Ext.emptyFn;var timeout=options.timeout||gxp.plugins.GoogleSource.prototype.timeout;window.setTimeout((function(){if(!gxp.plugins.GoogleSource.loader.ready){this.loading=false;this.ready=false;document.getElementsByTagName("head")[0].removeChild(script);errback.call(options.scope);this.fireEvent("failure");this.purgeListeners();}}).createDelegate(this),timeout);this.on({ready:options.callback,scope:options.scope});this.loading=true;function append(){document.getElementsByTagName("head")[0].appendChild(script);}
if(document.body){append();}else{Ext.onReady(append);}}}))();Ext.preg(gxp.plugins.GoogleSource.prototype.ptype,gxp.plugins.GoogleSource);Ext.namespace("gxp.plugins");gxp.plugins.OLSource=Ext.extend(gxp.plugins.LayerSource,{ptype:"gxp_olsource",createLayerRecord:function(config){var record;var Class=window;var parts=config.type.split(".");for(var i=0,ii=parts.length;i<ii;++i){Class=Class[parts[i]];if(!Class){break;}}
if(Class&&Class.prototype&&Class.prototype.initialize){var Constructor=function(){Class.prototype.initialize.apply(this,config.args);};Constructor.prototype=Class.prototype;var layer=new Constructor();if("visibility"in config){layer.visibility=config.visibility;}
var Record=GeoExt.data.LayerRecord.create([{name:"name",type:"string"},{name:"source",type:"string"},{name:"group",type:"string"},{name:"fixed",type:"boolean"},{name:"selected",type:"boolean"},{name:"type",type:"string"},{name:"args"}]);var data={layer:layer,title:layer.name,name:config.name||layer.name,source:config.source,group:config.group,fixed:("fixed"in config)?config.fixed:false,selected:("selected"in config)?config.selected:false,type:config.type,args:config.args,properties:("properties"in config)?config.properties:undefined};record=new Record(data,layer.id);}else{throw new Error("Cannot construct OpenLayers layer from given type: "+config.type);}
return record;},getConfigForRecord:function(record){var config=gxp.plugins.OLSource.superclass.getConfigForRecord.apply(this,arguments);var layer=record.getLayer();return Ext.apply(config,{type:record.get("type"),args:record.get("args")});}});Ext.preg(gxp.plugins.OLSource.prototype.ptype,gxp.plugins.OLSource);Ext.namespace("gxp.plugins");gxp.plugins.MapBoxSource=Ext.extend(gxp.plugins.LayerSource,{ptype:"gxp_mapboxsource",title:"MapBox Layers",blueMarbleTopoBathyJanTitle:"Blue Marble Topography & Bathymetry (January)",blueMarbleTopoBathyJulTitle:"Blue Marble Topography & Bathymetry (July)",blueMarbleTopoJanTitle:"Blue Marble Topography (January)",blueMarbleTopoJulTitle:"Blue Marble Topography (July)",controlRoomTitle:"Control Room",geographyClassTitle:"Geography Class",naturalEarthHypsoTitle:"Natural Earth Hypsometric",naturalEarthHypsoBathyTitle:"Natural Earth Hypsometric & Bathymetry",naturalEarth1Title:"Natural Earth I",naturalEarth2Title:"Natural Earth II",worldDarkTitle:"World Dark",worldLightTitle:"World Light",worldGlassTitle:"World Glass",worldPrintTitle:"World Print",createStore:function(){var options={projection:"EPSG:900913",numZoomLevels:19,serverResolutions:[156543.03390625,78271.516953125,39135.7584765625,19567.87923828125,9783.939619140625,4891.9698095703125,2445.9849047851562,1222.9924523925781,611.4962261962891,305.74811309814453,152.87405654907226,76.43702827453613,38.218514137268066,19.109257068634033,9.554628534317017,4.777314267158508,2.388657133579254,1.194328566789627,0.5971642833948135],buffer:1};var configs=[{name:"blue-marble-topo-bathy-jan",numZoomLevels:9},{name:"blue-marble-topo-bathy-jul",numZoomLevels:9},{name:"blue-marble-topo-jan",numZoomLevels:9},{name:"blue-marble-topo-jul",numZoomLevels:9},{name:"control-room",numZoomLevels:9},{name:"geography-class",numZoomLevels:9},{name:"natural-earth-hypso",numZoomLevels:7},{name:"natural-earth-hypso-bathy",numZoomLevels:7},{name:"natural-earth-1",numZoomLevels:7},{name:"natural-earth-2",numZoomLevels:7},{name:"world-dark",numZoomLevels:12},{name:"world-light",numZoomLevels:12},{name:"world-glass",numZoomLevels:11},{name:"world-print",numZoomLevels:10}];var len=configs.length;var layers=new Array(len);var config;for(var i=0;i<len;++i){config=configs[i];layers[i]=new OpenLayers.Layer.TMS(this[OpenLayers.String.camelize(config.name)+"Title"],["http://a.tiles.mapbox.com/mapbox/","http://b.tiles.mapbox.com/mapbox/","http://c.tiles.mapbox.com/mapbox/","http://d.tiles.mapbox.com/mapbox/"],OpenLayers.Util.applyDefaults({attribution:/^world/.test(name)?"<a href='http://mapbox.com'>MapBox</a> | Some Data &copy; OSM CC-BY-SA | <a href='http://mapbox.com/tos'>Terms of Service</a>":"<a href='http://mapbox.com'>MapBox</a> | <a href='http://mapbox.com/tos'>Terms of Service</a>",type:"png",tileOrigin:new OpenLayers.LonLat(-128*156543.03390625,-128*156543.03390625),layername:config.name,"abstract":'<div class="thumb-mapbox thumb-mapbox-'+config.name+'"></div>',numZoomLevels:config.numZoomLevels},options));}
this.store=new GeoExt.data.LayerStore({layers:layers,fields:[{name:"source",type:"string"},{name:"name",type:"string",mapping:"layername"},{name:"abstract",type:"string"},{name:"group",type:"string"},{name:"fixed",type:"boolean"},{name:"selected",type:"boolean"}]});this.fireEvent("ready",this);},createLayerRecord:function(config){var record;var index=this.store.findExact("name",config.name);if(index>-1){record=this.store.getAt(index).copy(Ext.data.Record.id({}));var layer=record.getLayer().clone();if(config.title){layer.setName(config.title);record.set("title",config.title);}
if("visibility"in config){layer.visibility=config.visibility;}
record.set("selected",config.selected||false);record.set("source",config.source);record.set("name",config.name);if("group"in config){record.set("group",config.group);}
record.data.layer=layer;record.commit();}
return record;}});Ext.preg(gxp.plugins.MapBoxSource.prototype.ptype,gxp.plugins.MapBoxSource);Ext.namespace("gxp.plugins");gxp.plugins.MapQuestSource=Ext.extend(gxp.plugins.LayerSource,{ptype:"gxp_mapquestsource",title:"MapQuest Layers",osmAttribution:"Tiles Courtesy of <a href='http://open.mapquest.co.uk/' target='_blank'>MapQuest</a> <img src='http://developer.mapquest.com/content/osm/mq_logo.png' border='0'>",osmTitle:"MapQuest OpenStreetMap",naipAttribution:"Tiles Courtesy of <a href='http://open.mapquest.co.uk/' target='_blank'>MapQuest</a> <img src='http://developer.mapquest.com/content/osm/mq_logo.png' border='0'>",naipTitle:"MapQuest Imagery",createStore:function(){var options={projection:"EPSG:900913",maxExtent:new OpenLayers.Bounds(-128*156543.0339,-128*156543.0339,128*156543.0339,128*156543.0339),maxResolution:156543.03390625,numZoomLevels:19,units:"m",buffer:1,transitionEffect:"resize",tileOptions:{crossOriginKeyword:null}};var layers=[new OpenLayers.Layer.OSM(this.osmTitle,["http://otile1.mqcdn.com/tiles/1.0.0/osm/${z}/${x}/${y}.png","http://otile2.mqcdn.com/tiles/1.0.0/osm/${z}/${x}/${y}.png","http://otile3.mqcdn.com/tiles/1.0.0/osm/${z}/${x}/${y}.png","http://otile4.mqcdn.com/tiles/1.0.0/osm/${z}/${x}/${y}.png"],OpenLayers.Util.applyDefaults({attribution:this.osmAttribution,type:"osm"},options)),new OpenLayers.Layer.OSM(this.naipTitle,["http://oatile1.mqcdn.com/naip/${z}/${x}/${y}.png","http://oatile2.mqcdn.com/naip/${z}/${x}/${y}.png","http://oatile3.mqcdn.com/naip/${z}/${x}/${y}.png","http://oatile4.mqcdn.com/naip/${z}/${x}/${y}.png"],OpenLayers.Util.applyDefaults({attribution:this.naipAttribution,type:"naip"},options))];this.store=new GeoExt.data.LayerStore({layers:layers,fields:[{name:"source",type:"string"},{name:"name",type:"string",mapping:"type"},{name:"abstract",type:"string",mapping:"attribution"},{name:"group",type:"string",defaultValue:"background"},{name:"fixed",type:"boolean",defaultValue:true},{name:"selected",type:"boolean"}]});this.store.each(function(l){l.set("group","background");});this.fireEvent("ready",this);},createLayerRecord:function(config){var record;var index=this.store.findExact("name",config.name);if(index>-1){record=this.store.getAt(index).copy(Ext.data.Record.id({}));var layer=record.getLayer().clone();if(config.title){layer.setName(config.title);record.set("title",config.title);}
if("visibility"in config){layer.visibility=config.visibility;}
record.set("selected",config.selected||false);record.set("source",config.source);record.set("name",config.name);if("group"in config){record.set("group",config.group);}
record.data.layer=layer;record.commit();}
return record;}});Ext.preg(gxp.plugins.MapQuestSource.prototype.ptype,gxp.plugins.MapQuestSource);Ext.namespace("gxp.plugins");gxp.plugins.CatalogueSource=Ext.extend(gxp.plugins.WMSSource,{url:null,title:null,lazy:true,hidden:true,proxyOptions:null,describeLayer:function(rec,callback,scope){var recordType=Ext.data.Record.create([{name:"owsType",type:"string"},{name:"owsURL",type:"string"},{name:"typeName",type:"string"}]);var record=new recordType({owsType:"WFS",owsURL:rec.get('url'),typeName:rec.get('name')});callback.call(scope,record);},destroy:function(){this.store&&this.store.destroy();this.store=null;gxp.plugins.CatalogueSource.superclass.destroy.apply(this,arguments);}});Ext.namespace("gxp.plugins");gxp.plugins.CSWCatalogueSource=Ext.extend(gxp.plugins.CatalogueSource,{ptype:"gxp_cataloguesource",createStore:function(){this.store=new Ext.data.Store({proxy:new GeoExt.data.ProtocolProxy(Ext.apply({setParamsAsOptions:true,protocol:new OpenLayers.Protocol.CSW({url:this.url})},this.proxyOptions||{})),reader:new GeoExt.data.CSWRecordsReader({fields:['title','abstract','URI','bounds','projection','references']})});gxp.plugins.LayerSource.prototype.createStore.apply(this,arguments);},getPagingParamNames:function(){return{start:'startPosition',limit:'maxRecords'};},getFullFilter:function(filter,otherFilters){var filters=[];if(filter!==undefined){filters.push(filter);}
filters=filters.concat(otherFilters);if(filters.length<=1){return filters[0];}else{return new OpenLayers.Filter.Logical({type:OpenLayers.Filter.Logical.AND,filters:filters});}},filter:function(options){var filter=undefined;if(options.queryString!==""){filter=new OpenLayers.Filter.Comparison({type:OpenLayers.Filter.Comparison.LIKE,matchCase:false,property:'csw:AnyText',value:'*'+options.queryString+'*'});}
var data={"resultType":"results","maxRecords":options.limit,"Query":{"typeNames":"gmd:MD_Metadata","ElementSetName":{"value":"full"}}};var fullFilter=this.getFullFilter(filter,options.filters);if(fullFilter!==undefined){Ext.apply(data.Query,{"Constraint":{version:"1.1.0",Filter:fullFilter}});}
Ext.apply(this.store.baseParams,data);this.store.load();}});Ext.preg(gxp.plugins.CSWCatalogueSource.prototype.ptype,gxp.plugins.CSWCatalogueSource);Ext.namespace("gxp.plugins");gxp.plugins.GeoNodeCatalogueSource=Ext.extend(gxp.plugins.CatalogueSource,{ptype:"gxp_geonodecataloguesource",rootProperty:'results',baseParams:null,fields:[{name:"title",convert:function(v){return[v];}},{name:"abstract",mapping:"description"},{name:"bounds",mapping:"bbox",convert:function(v){return{left:v.minx,right:v.maxx,bottom:v.miny,top:v.maxy};}},{name:"URI",mapping:"download_links",convert:function(v){var result=[];for(var i=0,ii=v.length;i<ii;++i){result.push(v[i][3]);}
return result;}}],createStore:function(){this.store=new Ext.data.Store({proxy:new Ext.data.HttpProxy(Ext.apply({url:this.url,method:'GET'},this.proxyOptions||{})),baseParams:Ext.apply({type:'layer'},this.baseParams),reader:new Ext.data.JsonReader({root:this.rootProperty},this.fields)});gxp.plugins.LayerSource.prototype.createStore.apply(this,arguments);},getPagingParamNames:function(){return{start:'startIndex',limit:'limit'};},filter:function(options){var bbox=undefined;for(var i=0,ii=options.filters.length;i<ii;++i){var f=options.filters[i];if(f instanceof OpenLayers.Filter.Spatial){bbox=f.value.toBBOX();break;}}
Ext.apply(this.store.baseParams,{'q':options.queryString,'limit':options.limit});if(bbox!==undefined){Ext.apply(this.store.baseParams,{'bbox':bbox});}else{delete this.store.baseParams.bbox;}
this.store.load();}});Ext.preg(gxp.plugins.GeoNodeCatalogueSource.prototype.ptype,gxp.plugins.GeoNodeCatalogueSource);Ext.namespace("gxp.plugins");gxp.plugins.StyleWriter=Ext.extend(Ext.util.Observable,{deletedStyles:null,constructor:function(config){this.initialConfig=config;Ext.apply(this,config);this.deletedStyles=[];gxp.plugins.StyleWriter.superclass.constructor.apply(this,arguments);},init:function(target){this.target=target;target.stylesStore.on({"remove":function(store,record,index){var styleName=record.get("name");record.get("name")===styleName&&this.deletedStyles.push(styleName);},scope:this});target.on({"beforesaved":this.write,scope:this});},write:function(target,options){target.stylesStore.commitChanges();target.fireEvent("saved",target,target.selectedStyle.get("name"));}});Ext.namespace("gxp.plugins");gxp.plugins.GeoServerStyleWriter=Ext.extend(gxp.plugins.StyleWriter,{baseUrl:"/geoserver/rest",constructor:function(config){this.initialConfig=config;Ext.apply(this,config);gxp.plugins.GeoServerStyleWriter.superclass.constructor.apply(this,arguments);},write:function(options){delete this._failed;options=options||{};var dispatchQueue=[];var store=this.target.stylesStore;store.each(function(rec){(rec.phantom||store.modified.indexOf(rec)!==-1)&&this.writeStyle(rec,dispatchQueue);},this);var success=function(){var target=this.target;if(this._failed!==true){this.deleteStyles();var modified=this.target.stylesStore.getModifiedRecords();for(var i=modified.length-1;i>=0;--i){modified[i].phantom=false;}
target.stylesStore.commitChanges();options.success&&options.success.call(options.scope);target.fireEvent("saved",target,target.selectedStyle.get("name"));}else{target.fireEvent("savefailed",target,target.selectedStyle.get("name"));}};if(dispatchQueue.length>0){gxp.util.dispatch(dispatchQueue,function(){this.assignStyles(options.defaultStyle,success);},this);}else{this.assignStyles(options.defaultStyle,success);}},writeStyle:function(styleRec,dispatchQueue){var styleName=styleRec.get("userStyle").name;dispatchQueue.push(function(callback,storage){Ext.Ajax.request({method:styleRec.phantom===true?"POST":"PUT",url:this.baseUrl+"/styles"+(styleRec.phantom===true?"":"/"+styleName+".xml"),headers:{"Content-Type":"application/vnd.ogc.sld+xml; charset=UTF-8"},xmlData:this.target.createSLD({userStyles:[styleName]}),failure:function(){this._failed=true;callback.call(this);},success:styleRec.phantom===true?function(){Ext.Ajax.request({method:"POST",url:this.baseUrl+"/layers/"+
this.target.layerRecord.get("name")+"/styles.json",jsonData:{"style":{"name":styleName}},failure:function(){this._failed=true;callback.call(this);},success:callback,scope:this});}:callback,scope:this});});},assignStyles:function(defaultStyle,callback){var styles=[];this.target.stylesStore.each(function(rec){if(!defaultStyle&&rec.get("userStyle").isDefault===true){defaultStyle=rec.get("name");}
if(rec.get("name")!==defaultStyle&&this.deletedStyles.indexOf(rec.id)===-1){styles.push({"name":rec.get("name")});}},this);Ext.Ajax.request({method:"PUT",url:this.baseUrl+"/layers/"+
this.target.layerRecord.get("name")+".json",jsonData:{"layer":{"defaultStyle":{"name":defaultStyle},"styles":styles.length>0?{"style":styles}:{},"enabled":true}},success:callback,failure:function(){this._failed=true;callback.call(this);},scope:this});},deleteStyles:function(){for(var i=0,len=this.deletedStyles.length;i<len;++i){Ext.Ajax.request({method:"DELETE",url:this.baseUrl+"/styles/"+this.deletedStyles[i]+"?purge=true"});}
this.deletedStyles=[];}});Ext.preg("gxp_geoserverstylewriter",gxp.plugins.GeoServerStyleWriter);Ext.namespace("gxp.plugins");gxp.plugins.Tool=Ext.extend(Ext.util.Observable,{ptype:"gxp_tool",autoActivate:true,actionTarget:"map.tbar",showButtonText:false,output:null,constructor:function(config){this.initialConfig=config||{};this.active=false;Ext.apply(this,config);if(!this.id){this.id=Ext.id();}
this.output=[];this.addEvents("activate","deactivate");gxp.plugins.Tool.superclass.constructor.apply(this,arguments);},init:function(target){target.tools[this.id]=this;this.target=target;this.autoActivate&&this.activate();this.target.on("portalready",this.addActions,this);},activate:function(){if(this.active===false){this.active=true;this.fireEvent("activate",this);return true;}},deactivate:function(){if(this.active===true){this.active=false;this.fireEvent("deactivate",this);return true;}},getContainer:function(target){var ct,item,meth,parts=target.split("."),ref=parts[0];if(ref){if(ref=="map"){ct=this.target.mapPanel;}else{ct=Ext.getCmp(ref)||this.target.portal[ref];if(!ct){throw new Error("Can't find component with id: "+ref);}}}else{ct=this.target.portal;}
item=parts.length>1&&parts[1];if(item){meth={"tbar":"getTopToolbar","bbar":"getBottomToolbar","fbar":"getFooterToolbar"}[item];if(meth){ct=ct[meth]();}else{ct=ct[item];}}
return ct;},addActions:function(actions){actions=actions||this.actions;if(!actions||this.actionTarget===null){this.addOutput();return;}
var actionTargets=this.actionTarget instanceof Array?this.actionTarget:[this.actionTarget];var a=actions instanceof Array?actions:[actions];var action,actionTarget,cmp,i,j,jj,ct,index=null;for(i=actionTargets.length-1;i>=0;--i){actionTarget=actionTargets[i];if(actionTarget){if(actionTarget instanceof Object){index=actionTarget.index;actionTarget=actionTarget.target;}
ct=this.getContainer(actionTarget);}
for(j=0,jj=a.length;j<jj;++j){if(!(a[j]instanceof Ext.Action||a[j]instanceof Ext.Component)){cmp=Ext.getCmp(a[j]);if(cmp){a[j]=cmp;}
if(typeof a[j]!="string"){if(j==this.defaultAction){a[j].pressed=true;}
a[j]=new Ext.Action(a[j]);}}
action=a[j];if(j==this.defaultAction&&action instanceof GeoExt.Action){action.isDisabled()?action.activateOnEnable=true:action.control.activate();}
if(ct){if(this.showButtonText){action.setText(action.initialConfig.buttonText);}
if(ct instanceof Ext.menu.Menu){action=Ext.apply(new Ext.menu.CheckItem(action),{text:action.initialConfig.menuText,group:action.initialConfig.toggleGroup,groupClass:null});}else if(!(ct instanceof Ext.Toolbar)){action=new Ext.Button(action);}
var addedAction=(index===null)?ct.add(action):ct.insert(index,action);action=action instanceof Ext.Button?action:addedAction;if(index!==null){index+=1;}
if(this.outputAction!=null&&j==this.outputAction){var cmp;action.on("click",function(){if(cmp){this.outputTarget?cmp.show():cmp.ownerCt.ownerCt.show();}else{cmp=this.addOutput();}},this);}}}
if(ct){ct.isVisible()?ct.doLayout():ct instanceof Ext.menu.Menu||ct.show();}}
this.actions=a;return this.actions;},addOutput:function(config){if(!config&&!this.outputConfig){return;}
config=config||{};var ref=this.outputTarget;var container;if(ref){container=this.getContainer(ref);if(!(config instanceof Ext.Component)){Ext.apply(config,this.outputConfig);}}else{var outputConfig=this.outputConfig||{};container=new Ext.Window(Ext.apply({hideBorders:true,shadow:false,closeAction:"hide",autoHeight:!outputConfig.height,layout:outputConfig.height?"fit":undefined,items:[{defaults:Ext.applyIf({autoHeight:!outputConfig.height&&!(outputConfig.defaults&&outputConfig.defaults.height)},outputConfig.defaults)}]},outputConfig)).show().items.get(0);}
if(container){var component=container.add(config);component.on("removed",function(cmp){this.output.remove(cmp);},this,{single:true});if(component instanceof Ext.Window){component.show();}else{container.doLayout();}
this.output.push(component);return component;}else{var ptype=this.ptype;if(window.console){console.error("Failed to create output for plugin with ptype: "+ptype);}}},removeOutput:function(){var cmp;for(var i=this.output.length-1;i>=0;--i){cmp=this.output[i];if(!this.outputTarget){cmp.findParentBy(function(p){return p instanceof Ext.Window;}).close();}else{if(cmp.ownerCt){cmp.ownerCt.remove(cmp);if(cmp.ownerCt instanceof Ext.Window){cmp.ownerCt[cmp.ownerCt.closeAction]();}}else{cmp.remove();}}}
this.output=[];},getState:function(){return Ext.apply({},this.initialConfig);}});Ext.preg(gxp.plugins.Tool.prototype.ptype,gxp.plugins.Tool);Ext.namespace("gxp.plugins");gxp.plugins.ClickableFeatures=Ext.extend(gxp.plugins.Tool,{featureManager:null,autoLoadFeature:false,autoLoadedFeature:null,toleranceParameters:["BUFFER","RADIUS"],constructor:function(config){if(config&&"autoLoadFeatures"in config){config.autoLoadFeature=config.autoLoadFeatures;delete config.autoLoadFeatures;if(window.console){console.warn("Deprecated config option 'autoLoadFeatures' for ptype: '"+config.ptype+"'. Use 'autoLoadFeature' instead.");}}
gxp.plugins.ClickableFeatures.superclass.constructor.apply(this,[config]);},noFeatureClick:function(evt){if(!this.selectControl){this.selectControl=new OpenLayers.Control.SelectFeature(this.target.tools[this.featureManager].featureLayer,this.initialConfig.controlOptions);}
var evtLL=this.target.mapPanel.map.getLonLatFromPixel(evt.xy);var featureManager=this.target.tools[this.featureManager];var page=featureManager.page;if(featureManager.visible()=="all"&&featureManager.paging&&page&&page.extent.containsLonLat(evtLL)){return;}
var layer=featureManager.layerRecord&&featureManager.layerRecord.getLayer();if(!layer){return;}
var map=this.target.mapPanel.map;var size=map.getSize();var params=Ext.applyIf({REQUEST:"GetFeatureInfo",BBOX:map.getExtent().toBBOX(),WIDTH:size.w,HEIGHT:size.h,X:parseInt(evt.xy.x),Y:parseInt(evt.xy.y),QUERY_LAYERS:layer.params.LAYERS,INFO_FORMAT:"application/vnd.ogc.gml",EXCEPTIONS:"application/vnd.ogc.se_xml",FEATURE_COUNT:1},layer.params);if(typeof this.tolerance==="number"){for(var i=0,ii=this.toleranceParameters.length;i<ii;++i){params[this.toleranceParameters[i]]=this.tolerance;}}
var projection=map.getProjectionObject();var layerProj=layer.projection;if(layerProj&&layerProj.equals(projection)){projection=layerProj;}
if(parseFloat(layer.params.VERSION)>=1.3){params.CRS=projection.getCode();}else{params.SRS=projection.getCode();}
var store=new GeoExt.data.FeatureStore({fields:{},proxy:new GeoExt.data.ProtocolProxy({protocol:new OpenLayers.Protocol.HTTP({url:(typeof layer.url==="string")?layer.url:layer.url[0],params:params,format:new OpenLayers.Format.WMSGetFeatureInfo()})}),autoLoad:true,listeners:{"load":function(store,records){if(records.length>0){var fid=records[0].get("fid");var filter=new OpenLayers.Filter.FeatureId({fids:[fid]});var autoLoad=function(){featureManager.loadFeatures(filter,function(features){if(features.length){this.autoLoadedFeature=features[0];this.select(features[0]);}},this);}.createDelegate(this);var feature=featureManager.featureLayer.getFeatureByFid(fid);if(feature){this.select(feature);}else if(featureManager.paging&&featureManager.pagingType===gxp.plugins.FeatureManager.QUADTREE_PAGING){var lonLat=this.target.mapPanel.map.getLonLatFromPixel(evt.xy);featureManager.setPage({lonLat:lonLat},function(){var feature=featureManager.featureLayer.getFeatureByFid(fid);if(feature){this.select(feature);}else if(this.autoLoadFeature===true){autoLoad();}},this);}else{autoLoad();}}},scope:this}});},select:function(feature){this.selectControl.unselectAll();this.selectControl.select(feature);}});Ext.namespace("gxp.plugins");gxp.plugins.DeleteSelectedFeatures=Ext.extend(gxp.plugins.Tool,{ptype:"gxp_deleteselectedfeatures",deleteMsgTitle:"Delete",deleteFeaturesMsg:"Are you sure you want to delete {0} selected features?",deleteFeatureMsg:"Are you sure you want to delete the selected feature?",menuText:"Delete selected features",tooltip:"Delete the currently selected features",iconCls:"delete",addActions:function(){var actions=gxp.plugins.DeleteSelectedFeatures.superclass.addActions.apply(this,[{text:this.buttonText,menuText:this.menuText,iconCls:this.iconCls,tooltip:this.tooltip,handler:this.deleteFeatures,scope:this}]);actions[0].disable();var layer=this.target.tools[this.featureManager].featureLayer;layer.events.on({"featureselected":function(){actions[0].isDisabled()&&actions[0].enable();},"featureunselected":function(){layer.selectedFeatures.length==0&&actions[0].disable();}});return actions;},deleteFeatures:function(){var featureManager=this.target.tools[this.featureManager];var features=featureManager.featureLayer.selectedFeatures;Ext.Msg.show({title:this.deleteMsgTitle,msg:features.length>1?String.format(this.deleteFeaturesMsg,features.length):this.deleteFeatureMsg,buttons:Ext.Msg.YESNO,fn:function(button){if(button==="yes"){var store=featureManager.featureStore;for(var feature,i=features.length-1;i>=0;--i){feature=features[i];feature.layer.selectedFeatures.remove(feature);feature.layer.events.triggerEvent("featureunselected",{feature:feature});if(feature.state!==OpenLayers.State.INSERT){feature.state=OpenLayers.State.DELETE;store._removing=true;}
store.remove(store.getRecordFromFeature(feature));delete store._removing;}
store.save();}},scope:this,icon:Ext.MessageBox.QUESTION});}});Ext.preg(gxp.plugins.DeleteSelectedFeatures.prototype.ptype,gxp.plugins.DeleteSelectedFeatures);Ext.namespace("gxp.plugins");gxp.plugins.GoogleGeocoder=Ext.extend(gxp.plugins.Tool,{ptype:"gxp_googlegeocoder",updateField:"viewport",init:function(target){var combo=new gxp.form.GoogleGeocoderComboBox(Ext.apply({listeners:{select:this.onComboSelect,scope:this}},this.outputConfig));var bounds=target.mapPanel.map.restrictedExtent;if(bounds&&!combo.bounds){target.on({ready:function(){combo.bounds=bounds.clone().transform(target.mapPanel.map.getProjectionObject(),new OpenLayers.Projection("EPSG:4326"));}});}
this.combo=combo;return gxp.plugins.GoogleGeocoder.superclass.init.apply(this,arguments);},addOutput:function(config){return gxp.plugins.GoogleGeocoder.superclass.addOutput.call(this,this.combo);},onComboSelect:function(combo,record){if(this.updateField){var map=this.target.mapPanel.map;var location=record.get(this.updateField).clone().transform(new OpenLayers.Projection("EPSG:4326"),map.getProjectionObject());if(location instanceof OpenLayers.Bounds){map.zoomToExtent(location,true);}else{map.setCenter(location);}}}});Ext.preg(gxp.plugins.GoogleGeocoder.prototype.ptype,gxp.plugins.GoogleGeocoder);Ext.namespace("gxp.plugins");gxp.plugins.GoogleEarth=Ext.extend(gxp.plugins.Tool,{ptype:"gxp_googleearth",timeout:7000,menuText:"3D Viewer",tooltip:"Switch to 3D Viewer",tooltipMap:"Switch back to normal map view",constructor:function(config){gxp.plugins.GoogleEarth.superclass.constructor.apply(this,arguments);},addActions:function(){var actions=[{menuText:this.menuText,enableToggle:true,iconCls:"gxp-icon-googleearth",tooltip:this.tooltip,toggleHandler:function(button,state){this.actions[0].each(function(cmp){if(cmp.toggle){cmp.toggle(false,true);}});this.togglePanelDisplay(state);},scope:this}];return gxp.plugins.GoogleEarth.superclass.addActions.apply(this,[actions]);},togglePanelDisplay:function(displayed){var ownerCt=this.target.mapPanel.ownerCt;var layout=ownerCt&&ownerCt.getLayout();if(layout&&layout instanceof Ext.layout.CardLayout){if(displayed===true){gxp.plugins.GoogleEarth.loader.onLoad({callback:function(){layout.setActiveItem(1);this.actions[0].enable();this.actions[0].items[0].setTooltip(this.tooltipMap);this.actions[0].each(function(cmp){if(cmp.toggle){cmp.toggle(true,true);}});},scope:this});}else{layout.setActiveItem(0);this.actions[0].items[0].setTooltip(this.tooltip);}}},getHost:function(){var name=window.location.host.split(":").shift();var port=window.location.port||"80";return name+":"+port;}});gxp.plugins.GoogleEarth.loader=new(Ext.extend(Ext.util.Observable,{ready:!!(window.google&&window.google.earth),loading:false,constructor:function(){this.addEvents("ready","failure");return Ext.util.Observable.prototype.constructor.apply(this,arguments);},onScriptLoad:function(){var monitor=gxp.plugins.GoogleEarth.loader;if(!monitor.ready){monitor.ready=true;monitor.loading=false;monitor.fireEvent("ready");}},onLoad:function(options){if(this.ready){window.setTimeout(function(){options.callback.call(options.scope);},0);}else if(!this.loading){this.loadScript(options);}else{this.on({ready:options.callback,failure:options.errback||Ext.emptyFn,scope:options.scope});}},loadScript:function(options){if(window.google){delete google.loader;}
var params={autoload:Ext.encode({modules:[{name:"earth",version:"1",callback:"gxp.plugins.GoogleEarth.loader.onScriptLoad"}]})};var script=document.createElement("script");script.src="http://www.google.com/jsapi?"+Ext.urlEncode(params);var errback=options.errback||Ext.emptyFn;var timeout=options.timeout||gxp.plugins.GoogleSource.prototype.timeout;window.setTimeout((function(){if(!gxp.plugins.GoogleEarth.loader.ready){this.fireEvent("failure");this.unload();}}).createDelegate(this),timeout);this.on({ready:options.callback,failure:options.errback||Ext.emptyFn,scope:options.scope});this.loading=true;function append(){document.getElementsByTagName("head")[0].appendChild(script);}
if(document.body){append();}else{Ext.onReady(append);}
this.script=script;},unload:function(){this.purgeListeners();if(this.script){document.getElementsByTagName("head")[0].removeChild(this.script);delete this.script;}
this.loading=false;this.ready=false;delete google.loader;delete google.earth;}}))();Ext.preg(gxp.plugins.GoogleEarth.prototype.ptype,gxp.plugins.GoogleEarth);Ext.namespace("gxp.plugins");gxp.plugins.WMSFilterView=Ext.extend(gxp.plugins.Tool,{ptype:"gxp_wmsfilterview",featureManager:null,init:function(target){gxp.plugins.WMSFilterView.superclass.init.apply(this,arguments);this.createFilterLayer();},createFilterLayer:function(){this.filterLayer=new OpenLayers.Layer.WMS(this.id+"filterlayer",Ext.BLANK_IMAGE_URL,{format:"image/png",transparent:true},{buffer:0,displayInLayerSwitcher:false,tileOptions:{maxGetUrlLength:2048}});var map=this.target.mapPanel.map;map.addLayer(this.filterLayer);map.events.on({addlayer:this.raiseLayer,scope:this});var featureManager=this.target.tools[this.featureManager];var format=new OpenLayers.Format.SLD();var clear=(function(){this.filterLayer.setUrl(Ext.BLANK_IMAGE_URL);this.filterLayer.setVisibility(false);}).bind(this);featureManager.on({"clearfeatures":clear,"beforelayerchange":clear,"beforequery":function(tool,filter){this.filterLayer.setUrl(Ext.BLANK_IMAGE_URL);this.filterLayer.setVisibility(false);},"query":function(tool,store,filter){if(!filter){return;}
var rule=new OpenLayers.Rule();var geomType=featureManager.geometryType.replace(/^Multi/,"");var symbolizer=featureManager.style["all"].rules[0].symbolizer;rule.symbolizer[geomType]=Ext.applyIf(Ext.apply({},symbolizer[geomType]||symbolizer),OpenLayers.Feature.Vector.style["default"]);var style=new OpenLayers.Style(null,{rules:[rule]});var layer=tool.layerRecord.getLayer();this.filterLayer.setUrl(layer.url);if(filter instanceof OpenLayers.Filter.Logical){var filters=filter.filters;for(var i=filters.length-1;i>=0;--i){if(filters[i].type===OpenLayers.Filter.Spatial.BBOX){filters.remove(filters[i]);}}
if(filters.length==1&&filter.type!==OpenLayers.Filter.Comparison.NOT){filter=filters[0];}else if(filters.length==0){filter=null;}}else if(filter.type===OpenLayers.Filter.Spatial.BBOX){filter=null;}
var params={};if(filter){if(filter instanceof OpenLayers.Filter.FeatureId){params.featureid=filter.fids;}else{params.cql_filter=new OpenLayers.Format.CQL().write(filter);}}
this.filterLayer.mergeNewParams(Ext.apply(params,{sld_body:format.write({namedLayers:[{name:featureManager.layerRecord.get("name"),userStyles:[style]}]}).replace(/( (xmlns|xsi):[^\"]*\"[^\"]*"|sld:)/g,"")}));this.filterLayer.setVisibility(true);},scope:this});},raiseLayer:function(){var map=this.filterLayer.map;map.setLayerIndex(this.filterLayer,map.layers.length);}});Ext.preg(gxp.plugins.WMSFilterView.prototype.ptype,gxp.plugins.WMSFilterView);Ext.namespace("gxp.plugins");gxp.plugins.WMSRasterStylesDialog={isRaster:null,init:function(target){Ext.apply(target,gxp.plugins.WMSRasterStylesDialog);},createRule:function(){var symbolizers=[new OpenLayers.Symbolizer[this.isRaster?"Raster":this.symbolType]];return new OpenLayers.Rule({symbolizers:symbolizers});},addRule:function(){var legend=this.items.get(2).items.get(0);if(this.isRaster){legend.rules.push(this.createPseudoRule());legend.rules.length==1&&legend.rules.push(this.createPseudoRule());this.savePseudoRules();}else{this.selectedStyle.get("userStyle").rules.push(this.createRule());legend.update();this.selectedStyle.store.afterEdit(this.selectedStyle);}
this.updateRuleRemoveButton();},removeRule:function(){if(this.isRaster){var legend=this.items.get(2).items.get(0);var rule=this.selectedRule;legend.unselect();legend.rules.remove(rule);legend.rules.length==1&&legend.rules.remove(legend.rules[0]);this.savePseudoRules();}else{gxp.WMSStylesDialog.prototype.removeRule.apply(this,arguments);}},duplicateRule:function(){var legend=this.items.get(2).items.get(0);if(this.isRaster){legend.rules.push(this.createPseudoRule({quantity:this.selectedRule.name,label:this.selectedRule.title,color:this.selectedRule.symbolizers[0].fillColor,opacity:this.selectedRule.symbolizers[0].fillOpacity}));this.savePseudoRules();}else{var newRule=this.selectedRule.clone();newRule.name=gxp.util.uniqueName((newRule.title||newRule.name)+" (copy)");delete newRule.title;this.selectedStyle.get("userStyle").rules.push(newRule);legend.update();}
this.updateRuleRemoveButton();},editRule:function(){this.isRaster?this.editPseudoRule():gxp.WMSStylesDialog.prototype.editRule.apply(this,arguments);},editPseudoRule:function(){var me=this;var rule=this.selectedRule;var pseudoRuleDlg=new Ext.Window({title:"Color Map Entry: "+rule.name,width:340,autoHeight:true,modal:true,items:[{bodyStyle:"padding-top: 5px",border:false,defaults:{autoHeight:true,hideMode:"offsets"},items:[{xtype:"form",border:false,labelAlign:"top",defaults:{border:false},style:{"padding":"0.3em 0 0 1em"},items:[{layout:"column",defaults:{border:false,style:{"padding-right":"1em"}},items:[{layout:"form",width:70,items:[{xtype:"numberfield",anchor:"95%",value:rule.name,allowBlank:false,fieldLabel:"Quantity",validator:function(value){var rules=me.items.get(2).items.get(0).rules;for(var i=rules.length-1;i>=0;i--){if(rule!==rules[i]&&rules[i].name==value){return"Quantity "+value+" is already defined";}}
return true;},listeners:{valid:function(cmp){this.selectedRule.name=String(cmp.getValue());this.savePseudoRules();},scope:this}}]},{layout:"form",width:130,items:[{xtype:"textfield",fieldLabel:"Label",anchor:"95%",value:rule.title,listeners:{valid:function(cmp){this.selectedRule.title=cmp.getValue();this.savePseudoRules();},scope:this}}]},{layout:"form",width:70,items:[new GeoExt.FeatureRenderer({symbolType:this.symbolType,symbolizers:[rule.symbolizers[0]],isFormField:true,fieldLabel:"Appearance"})]}]}]},{xtype:"gxp_polygonsymbolizer",symbolizer:rule.symbolizers[0],bodyStyle:{"padding":"10px"},border:false,labelWidth:70,defaults:{labelWidth:70},listeners:{change:function(symbolizer){var symbolizerSwatch=pseudoRuleDlg.findByType(GeoExt.FeatureRenderer)[0];symbolizerSwatch.setSymbolizers([symbolizer],{draw:symbolizerSwatch.rendered});this.selectedRule.symbolizers[0]=symbolizer;this.savePseudoRules();},scope:this}}]}]});var strokeSymbolizer=pseudoRuleDlg.findByType("gxp_strokesymbolizer")[0];strokeSymbolizer.ownerCt.remove(strokeSymbolizer);pseudoRuleDlg.show();},savePseudoRules:function(){var style=this.selectedStyle;var legend=this.items.get(2).items.get(0);var userStyle=style.get("userStyle");var pseudoRules=legend.rules;pseudoRules.sort(function(a,b){var left=parseFloat(a.name);var right=parseFloat(b.name);return left===right?0:(left<right?-1:1);});var symbolizer=userStyle.rules[0].symbolizers[0];symbolizer.colorMap=pseudoRules.length>0?new Array(pseudoRules.length):undefined;var pseudoRule;for(var i=0,len=pseudoRules.length;i<len;++i){pseudoRule=pseudoRules[i];symbolizer.colorMap[i]={quantity:parseFloat(pseudoRule.name),label:pseudoRule.title||undefined,color:pseudoRule.symbolizers[0].fillColor||undefined,opacity:pseudoRule.symbolizers[0].fill==false?0:pseudoRule.symbolizers[0].fillOpacity};}
this.afterRuleChange(this.selectedRule);},createLegend:function(rules,options){var R=OpenLayers.Symbolizer.Raster;if(R&&rules[0]&&rules[0].symbolizers[0]instanceof R){this.getComponent("rulesfieldset").setTitle("Color Map Entries");this.isRaster=true;this.addRasterLegend(rules,options);}else{this.isRaster=false;this.addVectorLegend(rules);}},addRasterLegend:function(rules,options){options=options||{};var symbolizer=rules[0].symbolizers[0];var colorMap=symbolizer.colorMap||[];var pseudoRules=[];var colorMapEntry;for(var i=0,len=colorMap.length;i<len;i++){pseudoRules.push(this.createPseudoRule(colorMap[i]));}
this.selectedRule=options.selectedRuleIndex!=null?pseudoRules[options.selectedRuleIndex]:null;return this.addVectorLegend(pseudoRules,{symbolType:"Polygon",enableDD:false});},createPseudoRule:function(colorMapEntry){var quantity=-1;if(!colorMapEntry){var fieldset=this.items.get(2);if(fieldset.items){rules=fieldset.items.get(0).rules;for(var i=rules.length-1;i>=0;i--){quantity=Math.max(quantity,parseFloat(rules[i].name));}}}
colorMapEntry=Ext.applyIf(colorMapEntry||{},{quantity:++quantity,color:"#000000",opacity:1});return new OpenLayers.Rule({title:colorMapEntry.label,name:String(colorMapEntry.quantity),symbolizers:[new OpenLayers.Symbolizer.Polygon({fillColor:colorMapEntry.color,fillOpacity:colorMapEntry.opacity,stroke:false,fill:colorMapEntry.opacity!==0})]});},updateRuleRemoveButton:function(){this.items.get(3).items.get(1).setDisabled(!this.selectedRule||(this.isRaster===false&&this.items.get(2).items.get(0).rules.length<=1));}};Ext.preg("gxp_wmsrasterstylesdialog",gxp.plugins.WMSRasterStylesDialog);Ext.namespace("gxp.plugins");gxp.plugins.WMSGetFeatureInfo=Ext.extend(gxp.plugins.Tool,{ptype:"gxp_wmsgetfeatureinfo",outputTarget:"map",popupCache:null,infoActionTip:"Get Feature Info",popupTitle:"Feature Info",buttonText:"Identify",format:"html",addActions:function(){this.popupCache={};var actions=gxp.plugins.WMSGetFeatureInfo.superclass.addActions.call(this,[{tooltip:this.infoActionTip,iconCls:"gxp-icon-getfeatureinfo",buttonText:this.buttonText,toggleGroup:this.toggleGroup,enableToggle:true,allowDepress:true,toggleHandler:function(button,pressed){for(var i=0,len=info.controls.length;i<len;i++){if(pressed){info.controls[i].activate();}else{info.controls[i].deactivate();}}}}]);var infoButton=this.actions[0].items[0];var info={controls:[]};var updateInfo=function(){var queryableLayers=this.target.mapPanel.layers.queryBy(function(x){return x.get("queryable");});var map=this.target.mapPanel.map;var control;for(var i=0,len=info.controls.length;i<len;i++){control=info.controls[i];control.deactivate();control.destroy();}
info.controls=[];queryableLayers.each(function(x){var layer=x.getLayer();var vendorParams=Ext.apply({},this.vendorParams),param;if(this.layerParams){for(var i=this.layerParams.length-1;i>=0;--i){param=this.layerParams[i].toUpperCase();vendorParams[param]=layer.params[param];}}
var infoFormat=x.get("infoFormat");if(infoFormat===undefined){infoFormat=this.format=="html"?"text/html":"application/vnd.ogc.gml";}
var control=new OpenLayers.Control.WMSGetFeatureInfo(Ext.applyIf({url:layer.url,queryVisible:true,layers:[layer],infoFormat:infoFormat,vendorParams:vendorParams,eventListeners:{getfeatureinfo:function(evt){var title=x.get("title")||x.get("name");if(infoFormat=="text/html"){var match=evt.text.match(/<body[^>]*>([\s\S]*)<\/body>/);if(match&&!match[1].match(/^\s*$/)){this.displayPopup(evt,title,match[1]);}}else if(infoFormat=="text/plain"){this.displayPopup(evt,title,'<pre>'+evt.text+'</pre>');}else if(evt.features&&evt.features.length>0){this.displayPopup(evt,title);}},scope:this}},this.controlOptions));map.addControl(control);info.controls.push(control);if(infoButton.pressed){control.activate();}},this);};this.target.mapPanel.layers.on("update",updateInfo,this);this.target.mapPanel.layers.on("add",updateInfo,this);this.target.mapPanel.layers.on("remove",updateInfo,this);return actions;},displayPopup:function(evt,title,text){var popup;var popupKey=evt.xy.x+"."+evt.xy.y;if(!(popupKey in this.popupCache)){popup=this.addOutput({xtype:"gx_popup",title:this.popupTitle,layout:"accordion",fill:false,autoScroll:true,location:evt.xy,map:this.target.mapPanel,width:250,height:300,defaults:{layout:"fit",autoScroll:true,autoHeight:true,autoWidth:true,collapsible:true},listeners:{close:(function(key){return function(panel){delete this.popupCache[key];};})(popupKey),scope:this}});this.popupCache[popupKey]=popup;}else{popup=this.popupCache[popupKey];}
var features=evt.features,config=[];if(!text&&features){var feature;for(var i=0,ii=features.length;i<ii;++i){feature=features[i];config.push(Ext.apply({xtype:"propertygrid",listeners:{'beforeedit':function(e){return false;}},title:feature.fid?feature.fid:title,source:feature.attributes},this.itemConfig));}}else if(text){config.push(Ext.apply({title:title,html:text},this.itemConfig));}
popup.add(config);popup.doLayout();}});Ext.preg(gxp.plugins.WMSGetFeatureInfo.prototype.ptype,gxp.plugins.WMSGetFeatureInfo);Ext.namespace("gxp.plugins");gxp.plugins.FeatureEditorGrid=Ext.extend(Ext.grid.PropertyGrid,{ptype:"gxp_editorgrid",feature:null,schema:null,fields:null,excludeFields:null,propertyNames:null,readOnly:null,border:false,initComponent:function(){if(!this.dateFormat){this.dateFormat=Ext.form.DateField.prototype.format;}
if(!this.timeFormat){this.timeFormat=Ext.form.TimeField.prototype.format;}
var customEditors={},customRenderers={},feature=this.feature,attributes;if(this.fields){attributes={};for(var i=0,ii=this.fields.length;i<ii;++i){attributes[this.fields[i]]=feature.attributes[this.fields[i]];}}else{attributes=feature.attributes;}
if(!this.excludeFields){this.excludeFields=[];}
if(this.schema){var ucFields=this.fields?this.fields.join(",").toUpperCase().split(","):[];this.schema.each(function(r){var type=r.get("type");if(type.match(/^[^:]*:?((Multi)?(Point|Line|Polygon|Curve|Surface|Geometry))/)){return;}
var name=r.get("name");if(this.fields){if(ucFields.indexOf(name.toUpperCase())==-1){this.excludeFields.push(name);}}
var value=feature.attributes[name];var fieldCfg=GeoExt.form.recordToField(r);var listeners;if(typeof value=="string"){var format;switch(type.split(":").pop()){case"date":format=this.dateFormat;fieldCfg.editable=false;break;case"dateTime":if(!format){format=this.dateFormat+" "+this.timeFormat;fieldCfg.editable=true;}
fieldCfg.format=format;listeners={"startedit":function(el,value){if(!(value instanceof Date)){var date=Date.parseDate(value.replace(/Z$/,""),"c");if(date){this.setValue(date);}}}};customRenderers[name]=(function(){return function(value){var date=value;if(typeof value=="string"){date=Date.parseDate(value.replace(/Z$/,""),"c");}
return date?date.format(format):value;};})();break;case"boolean":listeners={"startedit":function(el,value){this.setValue(Boolean(value));}};break;default:break;}}
customEditors[name]=new Ext.grid.GridEditor({field:Ext.create(fieldCfg),listeners:listeners});attributes[name]=value;},this);feature.attributes=attributes;}
this.source=attributes;this.customEditors=customEditors;this.customRenderers=customRenderers;var ucExcludeFields=this.excludeFields.length?this.excludeFields.join(",").toUpperCase().split(","):[];this.viewConfig={forceFit:true,getRowClass:function(record){if(ucExcludeFields.indexOf(record.get("name").toUpperCase())!==-1){return"x-hide-nosize";}}};this.listeners={"beforeedit":function(){return this.featureEditor.editing;},"propertychange":function(){this.featureEditor.setFeatureState(this.featureEditor.getDirtyState());},scope:this};var origSort=Ext.data.Store.prototype.sort;Ext.data.Store.prototype.sort=function(){};gxp.plugins.FeatureEditorGrid.superclass.initComponent.apply(this,arguments);Ext.data.Store.prototype.sort=origSort;this.propStore.isEditableValue=function(){return true;};},init:function(target){this.featureEditor=target;this.featureEditor.on("canceledit",this.onCancelEdit,this);this.featureEditor.add(this);this.featureEditor.doLayout();},destroy:function(){this.featureEditor.un("canceledit",this.onCancelEdit,this);this.featureEditor=null;gxp.plugins.FeatureEditorGrid.superclass.destroy.call(this);},onCancelEdit:function(panel,feature){if(feature){this.setSource(feature.attributes);}}});Ext.preg(gxp.plugins.FeatureEditorGrid.prototype.ptype,gxp.plugins.FeatureEditorGrid);Ext.namespace("gxp.plugins");gxp.plugins.FeatureEditorForm=Ext.extend(Ext.FormPanel,{ptype:'gxp_editorform',feature:null,schema:null,fieldConfig:null,fields:null,excludeFields:null,propertyNames:null,readOnly:null,monitorValid:true,initComponent:function(){this.defaults=Ext.apply(this.defaults||{},{readOnly:true});this.listeners={clientvalidation:function(panel,valid){if(valid&&this.getForm().isDirty()){Ext.apply(this.feature.attributes,this.getForm().getFieldValues());this.featureEditor.setFeatureState(this.featureEditor.getDirtyState());}},scope:this};gxp.plugins.FeatureEditorForm.superclass.initComponent.call(this);if(!this.excludeFields){this.excludeFields=[];}
var excludeFields=[],i,ii;for(i=0,ii=this.excludeFields.length;i<ii;++i){excludeFields[i]=this.excludeFields[i].toLowerCase();}
this.excludeFields=excludeFields;var ucFields=this.fields?this.fields.join(",").toUpperCase().split(","):[];var fields={};if(this.schema){this.schema.each(function(r){var name=r.get("name");var lower=name.toLowerCase();if(this.fields){if(ucFields.indexOf(name.toUpperCase())==-1){this.excludeFields.push(lower);}}
if(this.excludeFields.indexOf(lower)!=-1){return;}
var type=r.get("type");if(type.match(/^[^:]*:?((Multi)?(Point|Line|Polygon|Curve|Surface|Geometry))/)){return;}
var fieldCfg=GeoExt.form.recordToField(r);fieldCfg.fieldLabel=this.propertyNames?(this.propertyNames[name]||fieldCfg.fieldLabel):fieldCfg.fieldLabel;if(this.fieldConfig&&this.fieldConfig[name]){Ext.apply(fieldCfg,this.fieldConfig[name]);}
if(this.feature.attributes[name]!==undefined){fieldCfg.value=this.feature.attributes[name];}
if(fieldCfg.value&&fieldCfg.xtype=="checkbox"){fieldCfg.checked=Ext.isBoolean(fieldCfg.value)?fieldCfg.value:(fieldCfg.value==="true");}
if(fieldCfg.value&&fieldCfg.xtype=="gxp_datefield"){fieldCfg.value=new Date(fieldCfg.value*1000);}
if(fieldCfg.value&&fieldCfg.xtype=="datefield"){var dateFormat="Y-m-d";fieldCfg.format=dateFormat;fieldCfg.value=Date.parseDate(fieldCfg.value.replace(/Z$/,""),dateFormat);}
if(fieldCfg.xtype==="combo"){Ext.applyIf(fieldCfg,{store:new Ext.data.ArrayStore({fields:['id','value'],data:fieldCfg.comboStoreData}),displayField:'value',valueField:'id',mode:'local',triggerAction:'all'});}
fields[lower]=fieldCfg;},this);this.add(this.reorderFields(fields));}else{fields={};for(var name in this.feature.attributes){var lower=name.toLowerCase();if(this.fields){if(ucFields.indexOf(name.toUpperCase())==-1){this.excludeFields.push(lower);}}
if(this.excludeFields.indexOf(lower)===-1){var fieldCfg={xtype:"textfield",fieldLabel:this.propertyNames?(this.propertyNames[name]||name):name,name:name,value:this.feature.attributes[name]};fields[lower]=fieldCfg;}}
this.add(this.reorderFields(fields));}},reorderFields:function(fields){var orderedFields=[];if(this.fields){for(var i=0,ii=this.fields.length;i<ii;++i){if(fields[this.fields[i].toLowerCase()]){orderedFields.push(fields[this.fields[i].toLowerCase()]);}}}else{for(var key in fields){orderedFields.push(fields[key]);}}
return orderedFields;},init:function(target){this.featureEditor=target;this.featureEditor.on("startedit",this.onStartEdit,this);this.featureEditor.on("stopedit",this.onStopEdit,this);this.featureEditor.on("canceledit",this.onCancelEdit,this);this.featureEditor.add(this);this.featureEditor.doLayout();},destroy:function(){this.featureEditor.un("startedit",this.onStartEdit,this);this.featureEditor.un("stopedit",this.onStopEdit,this);this.featureEditor.un("canceledit",this.onCancelEdit,this);this.featureEditor=null;gxp.plugins.FeatureEditorForm.superclass.destroy.call(this);},onStartEdit:function(){this.getForm().items.each(function(field){this.readOnly!==true&&field.setReadOnly(false);},this);},onStopEdit:function(){this.getForm().items.each(function(field){field.setReadOnly(true);});},onCancelEdit:function(panel,feature){if(feature){var form=this.getForm();for(var key in feature.attributes){var field=form.findField(key);field&&field.setValue(feature.attributes[key]);}}}});Ext.preg(gxp.plugins.FeatureEditorForm.prototype.ptype,gxp.plugins.FeatureEditorForm);Ext.namespace("gxp.plugins");gxp.plugins.FeatureEditor=Ext.extend(gxp.plugins.ClickableFeatures,{ptype:"gxp_featureeditor",splitButton:null,iconClsAdd:"gxp-icon-addfeature",closeOnSave:false,supportAbstractGeometry:false,supportNoGeometry:false,iconClsEdit:"gxp-icon-editfeature",exceptionTitle:"Save Failed",exceptionText:"Trouble saving features",pointText:"Point",lineText:"Line",polygonText:"Polygon",noGeometryText:"Event",createFeatureActionTip:"Create a new feature",createFeatureActionText:"Create",editFeatureActionTip:"Edit existing feature",editFeatureActionText:"Modify",splitButtonText:"Edit",splitButtonTooltip:"Edit features on selected WMS layer",outputTarget:"map",snappingAgent:null,readOnly:false,modifyOnly:false,showSelectedOnly:true,roles:["ROLE_ADMINISTRATOR"],createAction:null,editAction:null,activeIndex:0,drawControl:null,popup:null,schema:null,constructor:function(config){this.addEvents("layereditable","featureeditable");gxp.plugins.FeatureEditor.superclass.constructor.apply(this,arguments);},init:function(target){gxp.plugins.FeatureEditor.superclass.init.apply(this,arguments);this.target.on("authorizationchange",this.onAuthorizationChange,this);},destroy:function(){this.target.un("authorizationchange",this.onAuthorizationChange,this);gxp.plugins.FeatureEditor.superclass.destroy.apply(this,arguments);},onAuthorizationChange:function(){if(!this.target.isAuthorized(this.roles)){this.selectControl.deactivate();this.drawControl.deactivate();}
this.enableOrDisable();},addActions:function(){var popup;var featureManager=this.getFeatureManager();var featureLayer=featureManager.featureLayer;var intercepting=false;function intercept(mgr,fn){var fnArgs=Array.prototype.slice.call(arguments);fnArgs.splice(0,2);if(!intercepting&&popup&&!popup.isDestroyed){if(popup.editing){function doIt(){intercepting=true;unregisterDoIt.call(this);if(fn==="setLayer"){this.target.selectLayer(fnArgs[0]);}else if(fn==="clearFeatures"){window.setTimeout(function(){mgr[fn].call(mgr);});}else{mgr[fn].apply(mgr,fnArgs);}}
function unregisterDoIt(){featureManager.featureStore.un("write",doIt,this);popup.un("canceledit",doIt,this);popup.un("cancelclose",unregisterDoIt,this);}
featureManager.featureStore.on("write",doIt,this);popup.on({canceledit:doIt,cancelclose:unregisterDoIt,scope:this});popup.close();}
return!popup.editing;}
intercepting=false;}
featureManager.on({"beforequery":intercept.createDelegate(this,"loadFeatures",1),"beforelayerchange":intercept.createDelegate(this,"setLayer",1),"beforesetpage":intercept.createDelegate(this,"setPage",1),"beforeclearfeatures":intercept.createDelegate(this,"clearFeatures",1),scope:this});this.drawControl=new OpenLayers.Control.DrawFeature(featureLayer,OpenLayers.Handler.Point,{eventListeners:{featureadded:function(evt){if(this.autoLoadFeature===true){this.autoLoadedFeature=evt.feature;}},activate:function(){this.target.doAuthorized(this.roles,function(){featureManager.showLayer(this.id,this.showSelectedOnly&&"selected");},this);},deactivate:function(){featureManager.hideLayer(this.id);},scope:this}});this.selectControl=new OpenLayers.Control.SelectFeature(featureLayer,{clickout:false,multipleKey:"fakeKey",eventListeners:{"activate":function(){this.target.doAuthorized(this.roles,function(){if(this.autoLoadFeature===true||featureManager.paging){this.target.mapPanel.map.events.register("click",this,this.noFeatureClick);}
featureManager.showLayer(this.id,this.showSelectedOnly&&"selected");this.selectControl.unselectAll(popup&&popup.editing&&{except:popup.feature});},this);},"deactivate":function(){if(this.autoLoadFeature===true||featureManager.paging){this.target.mapPanel.map.events.unregister("click",this,this.noFeatureClick);}
if(popup){if(popup.editing){popup.on("cancelclose",function(){this.selectControl.activate();},this,{single:true});}
popup.on("close",function(){featureManager.hideLayer(this.id);},this,{single:true});popup.close();}else{featureManager.hideLayer(this.id);}},scope:this}});featureLayer.events.on({"beforefeatureremoved":function(evt){if(this.popup&&evt.feature===this.popup.feature){this.selectControl.unselect(evt.feature);}},"featureunselected":function(evt){var feature=evt.feature;if(feature){this.fireEvent("featureeditable",this,feature,false);}
if(feature&&feature.geometry&&popup&&!popup.hidden){popup.close();}},"beforefeatureselected":function(evt){if(popup){return!popup.editing;}},"featureselected":function(evt){var feature=evt.feature;if(feature){this.fireEvent("featureeditable",this,feature,true);}
var featureStore=featureManager.featureStore;if(this._forcePopupForNoGeometry===true||(this.selectControl.active&&feature.geometry!==null)){if(this.readOnly===false){this.selectControl.deactivate();featureManager.showLayer(this.id,this.showSelectedOnly&&"selected");}
popup=this.addOutput({xtype:"gxp_featureeditpopup",collapsible:true,feature:featureStore.getByFeature(feature),vertexRenderIntent:"vertex",readOnly:this.readOnly,fields:this.fields,excludeFields:this.excludeFields,editing:feature.state===OpenLayers.State.INSERT,schema:this.schema,allowDelete:true,width:200,height:250,listeners:{"close":function(){if(this.readOnly===false){this.selectControl.activate();}
if(feature.layer&&feature.layer.selectedFeatures.indexOf(feature)!==-1){this.selectControl.unselect(feature);}
if(feature===this.autoLoadedFeature){if(feature.layer){feature.layer.removeFeatures([evt.feature]);}
this.autoLoadedFeature=null;}},"featuremodified":function(popup,feature){featureStore.on({beforesave:{fn:function(){if(popup&&popup.isVisible()){popup.disable();}},single:true},write:{fn:function(){if(popup){if(popup.isVisible()){popup.enable();}
if(this.closeOnSave){popup.close();}}
var layer=featureManager.layerRecord;this.target.fireEvent("featureedit",featureManager,{name:layer.get("name"),source:layer.get("source")});},single:true},exception:{fn:function(proxy,type,action,options,response,records){var msg=this.exceptionText;if(type==="remote"){if(response.exceptionReport){msg=gxp.util.getOGCExceptionText(response.exceptionReport);}}else{msg="Status: "+response.status;}
featureManager.fireEvent("exception",featureManager,response.exceptionReport||{},msg,records);if(featureManager.hasListener("exception")===false&&featureStore.hasListener("exception")===false){Ext.Msg.show({title:this.exceptionTitle,msg:msg,icon:Ext.MessageBox.ERROR,buttons:{ok:true}});}
if(popup&&popup.isVisible()){popup.enable();popup.startEditing();}},single:true},scope:this});if(feature.state===OpenLayers.State.DELETE){featureStore._removing=true;featureStore.remove(featureStore.getRecordFromFeature(feature));delete featureStore._removing;}
featureStore.save();},"canceledit":function(popup,feature){featureStore.commitChanges();},scope:this}});this.popup=popup;}},"sketchcomplete":function(evt){featureManager.featureLayer.events.register("featuresadded",this,function(evt){featureManager.featureLayer.events.unregister("featuresadded",this,arguments.callee);this.drawControl.deactivate();this.selectControl.activate();this.selectControl.select(evt.features[0]);});},scope:this});var toggleGroup=this.toggleGroup||Ext.id();var actions=[];var commonOptions={tooltip:this.createFeatureActionTip,menuText:this.initialConfig.createFeatureActionText,text:this.initialConfig.createFeatureActionText,iconCls:this.iconClsAdd,disabled:true,hidden:this.modifyOnly||this.readOnly,toggleGroup:toggleGroup,group:toggleGroup,groupClass:null,enableToggle:true,allowDepress:true,control:this.drawControl,deactivateOnDisable:true,map:this.target.mapPanel.map,listeners:{checkchange:this.onItemCheckchange,scope:this}};if(this.supportAbstractGeometry===true){var menuItems=[];if(this.supportNoGeometry===true){menuItems.push(new Ext.menu.CheckItem({text:this.noGeometryText,iconCls:"gxp-icon-event",groupClass:null,group:toggleGroup,listeners:{checkchange:function(item,checked){if(checked===true){var feature=new OpenLayers.Feature.Vector(null);feature.state=OpenLayers.State.INSERT;featureLayer.addFeatures([feature]);this._forcePopupForNoGeometry=true;featureLayer.events.triggerEvent("featureselected",{feature:feature});delete this._forcePopupForNoGeometry;}
if(this.createAction.items[0]instanceof Ext.menu.CheckItem){this.createAction.items[0].setChecked(false);}else{this.createAction.items[0].toggle(false);}},scope:this}}));}
var checkChange=function(item,checked,Handler){if(checked===true){this.setHandler(Handler,false);}
if(this.createAction.items[0]instanceof Ext.menu.CheckItem){this.createAction.items[0].setChecked(checked);}else{this.createAction.items[0].toggle(checked);}};menuItems.push(new Ext.menu.CheckItem({groupClass:null,text:this.pointText,group:toggleGroup,iconCls:'gxp-icon-point',listeners:{checkchange:checkChange.createDelegate(this,[OpenLayers.Handler.Point],2)}}),new Ext.menu.CheckItem({groupClass:null,text:this.lineText,group:toggleGroup,iconCls:'gxp-icon-line',listeners:{checkchange:checkChange.createDelegate(this,[OpenLayers.Handler.Path],2)}}),new Ext.menu.CheckItem({groupClass:null,text:this.polygonText,group:toggleGroup,iconCls:'gxp-icon-polygon',listeners:{checkchange:checkChange.createDelegate(this,[OpenLayers.Handler.Polygon],2)}}));actions.push(new GeoExt.Action(Ext.apply(commonOptions,{menu:new Ext.menu.Menu({items:menuItems})})));}else{actions.push(new GeoExt.Action(commonOptions));}
actions.push(new GeoExt.Action({tooltip:this.editFeatureActionTip,text:this.initialConfig.editFeatureActionText,menuText:this.initialConfig.editFeatureActionText,iconCls:this.iconClsEdit,disabled:true,toggleGroup:toggleGroup,group:toggleGroup,groupClass:null,enableToggle:true,allowDepress:true,control:this.selectControl,deactivateOnDisable:true,map:this.target.mapPanel.map,listeners:{checkchange:this.onItemCheckchange,scope:this}}));this.createAction=actions[0];this.editAction=actions[1];if(this.splitButton){this.splitButton=new Ext.SplitButton({menu:{items:[Ext.apply(new Ext.menu.CheckItem(actions[0]),{text:this.createFeatureActionText}),Ext.apply(new Ext.menu.CheckItem(actions[1]),{text:this.editFeatureActionText})]},disabled:true,buttonText:this.splitButtonText,tooltip:this.splitButtonTooltip,iconCls:this.iconClsAdd,enableToggle:true,toggleGroup:this.toggleGroup,allowDepress:true,handler:function(button,event){if(button.pressed){button.menu.items.itemAt(this.activeIndex).setChecked(true);}},scope:this,listeners:{toggle:function(button,pressed){if(!pressed){button.menu.items.each(function(i){i.setChecked(false);});}},render:function(button){Ext.ButtonToggleMgr.register(button);}}});actions=[this.splitButton];}
actions=gxp.plugins.FeatureEditor.superclass.addActions.call(this,actions);featureManager.on("layerchange",this.onLayerChange,this);var snappingAgent=this.getSnappingAgent();if(snappingAgent){snappingAgent.registerEditor(this);}
return actions;},onItemCheckchange:function(item,checked){if(this.splitButton){this.activeIndex=item.ownerCt.items.indexOf(item);this.splitButton.toggle(checked);if(checked){this.splitButton.setIconClass(item.iconCls);}}},getFeatureManager:function(){var manager=this.target.tools[this.featureManager];if(!manager){throw new Error("Unable to access feature manager by id: "+this.featureManager);}
return manager;},getSnappingAgent:function(){var agent;var snapId=this.snappingAgent;if(snapId){agent=this.target.tools[snapId];if(!agent){throw new Error("Unable to locate snapping agent with id: "+snapId);}}
return agent;},setHandler:function(Handler,multi){var control=this.drawControl;var active=control.active;if(active){control.deactivate();}
control.handler.destroy();control.handler=new Handler(control,control.callbacks,Ext.apply(control.handlerOptions,{multi:multi}));if(active){control.activate();}},enableOrDisable:function(){var disable=!this.schema;if(this.splitButton){this.splitButton.setDisabled(disable);}
this.createAction.setDisabled(disable);this.editAction.setDisabled(disable);return disable;},onLayerChange:function(mgr,layer,schema){this.schema=schema;var disable=this.enableOrDisable();if(disable){this.fireEvent("layereditable",this,layer,false);return;}
var control=this.drawControl;var button=this.createAction;var handlers={"Point":OpenLayers.Handler.Point,"Line":OpenLayers.Handler.Path,"Curve":OpenLayers.Handler.Path,"Polygon":OpenLayers.Handler.Polygon,"Surface":OpenLayers.Handler.Polygon};var simpleType=mgr.geometryType.replace("Multi","");var Handler=handlers[simpleType];if(Handler){var multi=(simpleType!=mgr.geometryType);this.setHandler(Handler,multi);button.enable();}else if(this.supportAbstractGeometry===true&&mgr.geometryType==='Geometry'){button.enable();}else{button.disable();}
this.fireEvent("layereditable",this,layer,true);},select:function(feature){this.selectControl.unselectAll(this.popup&&this.popup.editing&&{except:this.popup.feature});this.selectControl.select(feature);}});Ext.preg(gxp.plugins.FeatureEditor.prototype.ptype,gxp.plugins.FeatureEditor);Ext.namespace("gxp.plugins");gxp.plugins.FeatureGrid=Ext.extend(gxp.plugins.ClickableFeatures,{ptype:"gxp_featuregrid",schema:null,showTotalResults:false,alwaysDisplayOnMap:false,displayMode:"all",autoExpand:false,autoCollapse:false,selectOnMap:false,displayFeatureText:"Display on map",firstPageTip:"First page",previousPageTip:"Previous page",zoomPageExtentTip:"Zoom to page extent",nextPageTip:"Next page",lastPageTip:"Last page",totalMsg:"Features {1} to {2} of {0}",displayTotalResults:function(){var featureManager=this.target.tools[this.featureManager];if(this.showTotalResults===true){this.displayItem.setText(featureManager.numberOfFeatures!==null?String.format(this.totalMsg,featureManager.numberOfFeatures,featureManager.pageIndex*featureManager.maxFeatures+Math.min(featureManager.numberOfFeatures,1),Math.min((featureManager.pageIndex+1)*featureManager.maxFeatures,featureManager.numberOfFeatures)):"");}},addOutput:function(config){var featureManager=this.target.tools[this.featureManager];var map=this.target.mapPanel.map,smCfg;this.selectControl=new OpenLayers.Control.SelectFeature(featureManager.featureLayer,this.initialConfig.controlOptions);if(this.selectOnMap){if(this.autoLoadFeature||(featureManager.paging&&featureManager.pagingType===gxp.plugins.FeatureManager.QUADTREE_PAGING)){this.selectControl.events.on({"activate":function(){map.events.register("click",this,this.noFeatureClick);},"deactivate":function(){map.events.unregister("click",this,this.noFeatureClick);},scope:this});}
map.addControl(this.selectControl);smCfg={selectControl:this.selectControl};}else{smCfg={selectControl:this.selectControl,singleSelect:false,autoActivateControl:false,listeners:{"beforerowselect":function(){if((window.event&&window.event.type=="contextmenu")||this.selectControl.active||featureManager.featureStore.getModifiedRecords().length){return false;}},scope:this}};}
this.displayItem=new Ext.Toolbar.TextItem({});config=Ext.apply({xtype:"gxp_featuregrid",border:false,sm:new GeoExt.grid.FeatureSelectionModel(smCfg),autoScroll:true,columnMenuDisabled:!!featureManager.paging,bbar:(featureManager.paging?[{iconCls:"x-tbar-page-first",ref:"../firstPageButton",tooltip:this.firstPageTip,disabled:true,handler:function(){featureManager.setPage({index:0});}},{iconCls:"x-tbar-page-prev",ref:"../prevPageButton",tooltip:this.previousPageTip,disabled:true,handler:function(){featureManager.previousPage();}},{iconCls:"gxp-icon-zoom-to",ref:"../zoomToPageButton",tooltip:this.zoomPageExtentTip,disabled:true,hidden:(featureManager.pagingType!==gxp.plugins.FeatureManager.QUADTREE_PAGING)||featureManager.autoZoomPage,handler:function(){var extent=featureManager.getPageExtent();if(extent!==null){map.zoomToExtent(extent);}}},{iconCls:"x-tbar-page-next",ref:"../nextPageButton",tooltip:this.nextPageTip,disabled:true,handler:function(){featureManager.nextPage();}},{iconCls:"x-tbar-page-last",ref:"../lastPageButton",tooltip:this.lastPageTip,disabled:true,handler:function(){featureManager.setPage({index:"last"});}},{xtype:'tbspacer',width:10},this.displayItem]:[]).concat(["->"].concat(!this.alwaysDisplayOnMap?[{text:this.displayFeatureText,enableToggle:true,toggleHandler:function(btn,pressed){this.selectOnMap&&this.selectControl[pressed?"activate":"deactivate"]();featureManager[pressed?"showLayer":"hideLayer"](this.id,this.displayMode);},scope:this}]:[])),listeners:{"added":function(cmp,ownerCt){function onClear(){this.displayTotalResults();this.selectOnMap&&this.selectControl.deactivate();this.autoCollapse&&typeof ownerCt.collapse=="function"&&ownerCt.collapse();}
function onPopulate(){this.displayTotalResults();this.selectOnMap&&this.selectControl.activate();this.autoExpand&&typeof ownerCt.expand=="function"&&ownerCt.expand();}
featureManager.on({"query":function(tool,store){if(store&&store.getCount()){onPopulate.call(this);}else{onClear.call(this);}},"layerchange":onClear,"clearfeatures":onClear,scope:this});},contextmenu:function(event){if(featureGrid.contextMenu.items.getCount()>0){var rowIndex=featureGrid.getView().findRowIndex(event.getTarget());if(rowIndex!==false){featureGrid.getSelectionModel().selectRow(rowIndex);featureGrid.contextMenu.showAt(event.getXY());event.stopEvent();}}},scope:this},contextMenu:new Ext.menu.Menu({items:[]})},config||{});var featureGrid=gxp.plugins.FeatureGrid.superclass.addOutput.call(this,config);if(this.alwaysDisplayOnMap||(this.selectOnMap===true&&this.displayMode==="selected")){featureManager.showLayer(this.id,this.displayMode);}
featureManager.paging&&featureManager.on({"beforesetpage":function(){featureGrid.zoomToPageButton.disable();},"setpage":function(mgr,condition,callback,scope,pageIndex,numPages){var paging=(numPages>0);featureGrid.zoomToPageButton.setDisabled(!paging);var prev=(paging&&(pageIndex!==0));featureGrid.firstPageButton.setDisabled(!prev);featureGrid.prevPageButton.setDisabled(!prev);var next=(paging&&(pageIndex!==numPages-1));featureGrid.lastPageButton.setDisabled(!next);featureGrid.nextPageButton.setDisabled(!next);},scope:this});function onLayerChange(){var schema=featureManager.schema,ignoreFields=["feature","state","fid"];schema&&schema.each(function(r){r.get("type").indexOf("gml:")==0&&ignoreFields.push(r.get("name"));});featureGrid.ignoreFields=ignoreFields;featureGrid.setStore(featureManager.featureStore,schema);if(!featureManager.featureStore){featureGrid.lastPageButton.disable();featureGrid.nextPageButton.disable();featureGrid.firstPageButton.disable();featureGrid.prevPageButton.disable();featureGrid.zoomToPageButton.disable();this.displayTotalResults();}}
if(featureManager.featureStore){onLayerChange.call(this);}
featureManager.on("layerchange",onLayerChange,this);return featureGrid;}});Ext.preg(gxp.plugins.FeatureGrid.prototype.ptype,gxp.plugins.FeatureGrid);Ext.namespace("gxp.plugins");gxp.plugins.FeatureManager=Ext.extend(gxp.plugins.Tool,{ptype:"gxp_featuremanager",maxFeatures:100,paging:true,pagingType:null,autoZoomPage:false,autoSetLayer:true,autoLoadFeatures:false,layerRecord:null,featureStore:null,hitCountProtocol:null,featureLayer:null,schema:null,geometryType:null,toolsShowingLayer:null,selectStyle:null,style:null,pages:null,page:null,numberOfFeatures:null,numPages:null,pageIndex:null,constructor:function(config){this.addEvents("beforequery","query","beforelayerchange","layerchange","beforesetpage","setpage","beforeclearfeatures","clearfeatures","beforesave","exception");if(config&&!config.pagingType){this.pagingType=gxp.plugins.FeatureManager.QUADTREE_PAGING;}
if(config&&config.layer){this.autoSetLayer=false;}
gxp.plugins.FeatureManager.superclass.constructor.apply(this,arguments);},init:function(target){gxp.plugins.FeatureManager.superclass.init.apply(this,arguments);this.toolsShowingLayer={};this.style={"all":new OpenLayers.Style(null,{rules:[new OpenLayers.Rule({symbolizer:this.initialConfig.symbolizer||{"Point":{pointRadius:4,graphicName:"square",fillColor:"white",fillOpacity:1,strokeWidth:1,strokeOpacity:1,strokeColor:"#333333"},"Line":{strokeWidth:4,strokeOpacity:1,strokeColor:"#ff9933"},"Polygon":{strokeWidth:2,strokeOpacity:1,strokeColor:"#ff6633",fillColor:"white",fillOpacity:0.3}}})]}),"selected":new OpenLayers.Style(null,{rules:[new OpenLayers.Rule({symbolizer:{display:"none"}})]})};this.featureLayer=new OpenLayers.Layer.Vector(this.id,{displayInLayerSwitcher:false,visibility:false,styleMap:new OpenLayers.StyleMap({"select":Ext.applyIf(Ext.apply({display:""},this.selectStyle),OpenLayers.Feature.Vector.style["select"]),"vertex":this.style["all"]},{extendDefault:false})});this.target.on({ready:function(){this.target.mapPanel.map.addLayer(this.featureLayer);},scope:this});this.on({beforedestroy:function(){this.target.mapPanel.map.removeLayer(this.featureLayer);},scope:this});},activate:function(){if(gxp.plugins.FeatureManager.superclass.activate.apply(this,arguments)){if(this.autoSetLayer){this.target.on("beforelayerselectionchange",this.setLayer,this);}
if(this.layer){var config=Ext.apply({},this.layer);this.target.createLayerRecord(config,this.setLayer,this);}
this.on("layerchange",this.setSchema,this);return true;}},deactivate:function(){if(gxp.plugins.FeatureManager.superclass.deactivate.apply(this,arguments)){if(this.autoSetLayer){this.target.un("beforelayerselectionchange",this.setLayer,this);}
this.un("layerchange",this.setSchema,this);this.setLayer();return true;}},getPageExtent:function(){if(this.pagingType===gxp.plugins.FeatureManager.QUADTREE_PAGING){return this.page.extent;}else{return this.featureStore.layer.getDataExtent();}},setLayer:function(layerRecord){var change=this.fireEvent("beforelayerchange",this,layerRecord);if(change!==false){if(layerRecord){this.featureLayer.projection=layerRecord.getLayer().projection;}
if(layerRecord!==this.layerRecord){this.clearFeatureStore();this.layerRecord=layerRecord;if(layerRecord){this.autoLoadFeatures===true?this.loadFeatures():this.setFeatureStore();}else{this.fireEvent("layerchange",this,null);}}}
return change;},setSchema:function(mgr,layer,schema){this.schema=schema;},showLayer:function(id,display){this.toolsShowingLayer[id]=display||"all";this.setLayerDisplay();},hideLayer:function(id){delete this.toolsShowingLayer[id];this.setLayerDisplay();},setLayerDisplay:function(){var show=this.visible();var map=this.target.mapPanel.map;if(show){var style=this.style[show];if(style!==this.featureLayer.styleMap.styles["default"]){this.featureLayer.styleMap.styles["default"]=style;this.featureLayer.redraw();}
this.featureLayer.setVisibility(true);map.events.on({addlayer:this.raiseLayer,scope:this});}else if(this.featureLayer.map){this.featureLayer.setVisibility(false);map.events.un({addlayer:this.raiseLayer,scope:this});}},visible:function(){var show=false;for(var i in this.toolsShowingLayer){if(show!="all"){show=this.toolsShowingLayer[i];}}
return show;},raiseLayer:function(){var map=this.featureLayer&&this.featureLayer.map;if(map){map.setLayerIndex(this.featureLayer,map.layers.length);}},loadFeatures:function(filter,callback,scope){if(this.fireEvent("beforequery",this,filter,callback,scope)!==false){this.filter=filter;this.pages=null;if(callback){var me=this;me._activeQuery&&me.un("query",me._activeQuery);this.on("query",me._activeQuery=function(tool,store){delete me._activeQuery;this.un("query",arguments.callee,this);var len=store.getCount();if(store.getCount()==0){callback.call(scope,[]);}else{this.featureLayer.events.register("featuresadded",this,function(evt){this.featureLayer.events.unregister("featuresadded",this,arguments.callee);callback.call(scope,evt.features);});}},this,{single:true});}
if(!this.featureStore){this.paging&&this.on("layerchange",function(tool,rec,schema){if(schema){this.un("layerchange",arguments.callee,this);this.setPage();}},this);this.setFeatureStore(filter,!this.paging);}else{this.featureStore.setOgcFilter(filter);if(this.paging){this.setPage();}else{this.featureStore.load();}}}},clearFeatures:function(){var store=this.featureStore;if(store){if(this.fireEvent("beforeclearfeatures",this)!==false){store.removeAll();this.fireEvent("clearfeatures",this);var proxy=store.proxy;proxy.abortRequest();if(proxy.protocol.response){proxy.protocol.response.abort();}}}},getProjection:function(record){var projection=this.target.mapPanel.map.getProjectionObject();var layerProj=record.getLayer().projection;if(layerProj&&layerProj.equals(projection)){projection=layerProj;}
return projection;},setFeatureStore:function(filter,autoLoad){var record=this.layerRecord;var source=this.target.getSource(record);if(source&&source instanceof gxp.plugins.WMSSource){source.getSchema(record,function(schema){if(schema===false){this.clearFeatureStore();}else{var fields=[],geometryName;var geomRegex=/gml:((Multi)?(Point|Line|Polygon|Curve|Surface|Geometry)).*/;var types={"xsd:boolean":"boolean","xsd:int":"int","xsd:integer":"int","xsd:short":"int","xsd:long":"int","xsd:date":"date","xsd:string":"string","xsd:float":"float","xsd:double":"float"};schema.each(function(r){var match=geomRegex.exec(r.get("type"));if(match){geometryName=r.get("name");this.geometryType=match[1];}else{var type=types[r.get("type")];var field={name:r.get("name"),type:types[type]};if(type=="date"){field.dateFormat="Y-m-d\\Z";}
fields.push(field);}},this);var protocolOptions={srsName:this.getProjection(record).getCode(),url:schema.url,featureType:schema.reader.raw.featureTypes[0].typeName,featureNS:schema.reader.raw.targetNamespace,geometryName:geometryName};this.hitCountProtocol=new OpenLayers.Protocol.WFS(Ext.apply({version:"1.1.0",readOptions:{output:"object"},resultType:"hits",filter:filter},protocolOptions));this.featureStore=new gxp.data.WFSFeatureStore(Ext.apply({fields:fields,proxy:{protocol:{outputFormat:this.format,multi:this.multi}},maxFeatures:this.maxFeatures,layer:this.featureLayer,ogcFilter:filter,autoLoad:autoLoad,autoSave:false,listeners:{"beforewrite":function(store,action,rs,options){this.fireEvent("beforesave",this,store,options.params);},"write":function(store,action,result,res,rs){this.redrawMatchingLayers(record);},"load":function(store,rs,options){this.fireEvent("query",this,store,this.filter);},scope:this}},protocolOptions));}
this.fireEvent("layerchange",this,record,schema);},this);}else{this.clearFeatureStore();this.fireEvent("layerchange",this,record,false);}},redrawMatchingLayers:function(record){var name=record.get("name");var source=record.get("source");this.target.mapPanel.layers.each(function(candidate){if(candidate.get("source")===source&&candidate.get("name")===name){candidate.getLayer().redraw(true);}});},clearFeatureStore:function(){if(this.featureStore){this.featureStore.removeAll();this.featureStore.unbind();this.featureStore.destroy();this.numberOfFeatures=null;this.featureStore=null;this.geometryType=null;}},processPage:function(page,condition,callback,scope){condition=condition||{};var index=condition.lonLat?null:condition.index;var next=condition.next;var pages=this.pages;var i=this.pages.indexOf(page);this.setPageFilter(page);var nextOk=next?i==(pages.indexOf(next)||pages.length)-1:true;var lonLatOk=condition.lonLat?page.extent.containsLonLat(condition.lonLat):true;if(lonLatOk&&page.numFeatures&&page.numFeatures<=this.maxFeatures){callback.call(this,page);}else if(lonLatOk&&(i==index||nextOk)){this.hitCountProtocol.read({callback:function(response){var i=index,lonLat=condition.lonLat;if(next){i=(pages.indexOf(next)||pages.length)-1;}
if(!i&&lonLat&&page.extent.containsLonLat(lonLat)){i=pages.indexOf(page);}
page.numFeatures=response.numberOfFeatures;if(this.page){return;}
if(page.numFeatures>this.maxFeatures){this.createLeaf(page,Ext.applyIf({index:i,next:next},condition),callback,scope);}else if(page.numFeatures==0&&pages.length>1){pages.remove(page);condition.allowEmpty===false&&this.setPage({index:index%this.pages.length,allowEmpty:false});}else if(this.pages.indexOf(page)==i){callback.call(this,page);}},scope:this});}},createLeaf:function(page,condition,callback,scope){condition=condition||{};var layer=this.layerRecord.getLayer();var pageIndex=this.pages.indexOf(page);this.pages.remove(page);var extent=page.extent;var center=extent.getCenterLonLat();var l=[extent.left,center.lon,extent.left,center.lon];var b=[center.lat,center.lat,extent.bottom,extent.bottom];var r=[center.lon,extent.right,center.lon,extent.right];var t=[extent.top,extent.top,center.lat,center.lat];var i,leaf;for(i=3;i>=0;--i){leaf={extent:new OpenLayers.Bounds(l[i],b[i],r[i],t[i])};this.pages.splice(pageIndex,0,leaf);this.processPage(leaf,condition,callback,scope);}},getPagingExtent:function(meth){var layer=this.layerRecord.getLayer();var filter=this.getSpatialFilter();var extent=filter?filter.value:this.target.mapPanel.map[meth]();if(extent&&layer.maxExtent){if(extent.containsBounds(layer.maxExtent)){extent=layer.maxExtent;}}
return extent;},getSpatialFilter:function(){var filter;if(this.filter instanceof OpenLayers.Filter.Spatial&&this.filter.type===OpenLayers.Filter.Spatial.BBOX){filter=this.filter;}else if(this.filter instanceof OpenLayers.Filter.Logical&&this.filter.type===OpenLayers.Filter.Logical.AND){for(var f,i=this.filter.filters.length-1;i>=0;--i){f=this.filter.filters[i];if(f instanceof OpenLayers.Filter.Spatial&&f.type===OpenLayers.Filter.Spatial.BBOX){filter=f;break;}}}
return filter;},setPageFilter:function(page){var filter;if(page.extent){var bboxFilter=new OpenLayers.Filter.Spatial({type:OpenLayers.Filter.Spatial.BBOX,property:this.featureStore.geometryName,value:page.extent});filter=this.filter?new OpenLayers.Filter.Logical({type:OpenLayers.Filter.Logical.AND,filters:[this.filter,bboxFilter]}):bboxFilter;}else{filter=this.filter;}
this.featureStore.setOgcFilter(filter);this.hitCountProtocol.filter=filter;this.hitCountProtocol.options.filter=filter;return filter;},nextPage:function(callback,scope){var index;if(this.pagingType===gxp.plugins.FeatureManager.QUADTREE_PAGING){var page=this.page;this.page=null;index=(this.pages.indexOf(page)+1)%this.pages.length;}else{index=this.pageIndex+1%this.numPages;}
this.setPage({index:index,allowEmpty:false},callback,scope);},previousPage:function(callback,scope){var index;if(this.pagingType===gxp.plugins.FeatureManager.QUADTREE_PAGING){index=this.pages.indexOf(this.page)-1;if(index<0){index=this.pages.length-1;}}else{index=this.pageIndex-1;if(index<0){index=this.numPages-1;}}
this.setPage({index:index,allowEmpty:false,next:this.page},callback);},setPage:function(condition,callback,scope){if(this.pagingType===gxp.plugins.FeatureManager.QUADTREE_PAGING){if(this.filter instanceof OpenLayers.Filter.FeatureId){this.featureStore.load({callback:function(){callback&&callback.call(scope);}});return;}
if(this.fireEvent("beforesetpage",this,condition,callback,scope)!==false){if(!condition){var extent=this.getPagingExtent("getExtent");var lonLat=new OpenLayers.LonLat(extent.left,extent.top);var maxExtent=this.target.mapPanel.map.getMaxExtent();if(!maxExtent.containsLonLat(lonLat,true)){lonLat=new OpenLayers.LonLat(maxExtent.left,maxExtent.top);}
condition={lonLat:lonLat,allowEmpty:false};}
condition.index=condition.index||0;if(condition.index=="last"){condition.index=this.pages.length-1;condition.next=this.pages[0];}
this.page=null;if(!this.pages){var layer=this.layerRecord.getLayer();var queryExtent=this.getPagingExtent("getMaxExtent");this.pages=[{extent:queryExtent}];condition.index=0;}else if(condition.lonLat){for(var i=this.pages.length-1;i>=0;--i){if(this.pages[i].extent.containsLonLat(condition.lonLat)){condition.index=i;break;}}}
this.processPage(this.pages[condition.index],condition,function(page){var map=this.target.mapPanel.map;this.page=page;this.setPageFilter(page);if(this.autoZoomPage&&!map.getExtent().containsLonLat(page.extent.getCenterLonLat())){map.zoomToExtent(page.extent);}
var pageIndex=this.pages.indexOf(this.page);this.fireEvent("setpage",this,condition,callback,scope,pageIndex,this.pages.length);this.featureStore.load({callback:function(){callback&&callback.call(scope,page);}});},this);}}else{if(this.fireEvent("beforesetpage",this,condition,callback,scope)!==false){if(!condition){this.hitCountProtocol.read({filter:this.filter,callback:function(response){this.numberOfFeatures=response.numberOfFeatures;this.numPages=Math.ceil(this.numberOfFeatures/this.maxFeatures);this.pageIndex=0;this.fireEvent("setpage",this,condition,callback,scope,this.pageIndex,this.numPages);this.featureStore.load({output:"object",callback:function(){callback&&callback.call(scope);}});},scope:this});}else{if(condition.index!=null){if(condition.index==="last"){this.pageIndex=this.numPages-1;}else if(condition.index==="first"){this.pageIndex=0;}else{this.pageIndex=condition.index;}
var startIndex=this.pageIndex*this.maxFeatures;this.fireEvent("setpage",this,condition,callback,scope,this.pageIndex,this.numPages);this.featureStore.load({startIndex:startIndex,callback:function(){callback&&callback.call(scope);}});}}}}}});gxp.plugins.FeatureManager.QUADTREE_PAGING=0;gxp.plugins.FeatureManager.WFS_PAGING=1;Ext.preg(gxp.plugins.FeatureManager.prototype.ptype,gxp.plugins.FeatureManager);Ext.namespace("gxp.plugins");gxp.plugins.FeatureToField=Ext.extend(gxp.plugins.Tool,{ptype:"gxp_featuretofield",format:"GeoJSON",addActions:function(){var featureManager=this.target.tools[this.featureManager];var featureInField;var format=new OpenLayers.Format[this.format];featureManager.featureLayer.events.on({"featureselected":function(evt){this.target.field.setValue(format.write(evt.feature));featureInField=evt.feature;},"featureunselected":function(){this.target.field.setValue("");featureInField=null;},scope:this});featureManager.on("layerchange",function(){featureManager.featureStore&&featureManager.featureStore.on("save",function(store,batch,data){if(data.create){var i,feature;for(i=data.create.length-1;i>=0;--i){feature=data.create[i].feature;if(feature==featureInField){this.target.field.setValue(format.write(feature));}}}},this);});return gxp.plugins.FeatureToField.superclass.addActions.apply(this,arguments);}});Ext.preg(gxp.plugins.FeatureToField.prototype.ptype,gxp.plugins.FeatureToField);Ext.namespace("gxp.plugins");gxp.plugins.QueryForm=Ext.extend(gxp.plugins.Tool,{ptype:"gxp_queryform",featureManager:null,autoHide:false,schema:null,queryActionText:"Query",cancelButtonText:"Cancel",queryMenuText:"Query layer",queryActionTip:"Query the selected layer",queryByLocationText:"Query by current map extent",queryByAttributesText:"Query by attributes",queryMsg:"Querying...",noFeaturesTitle:"No Match",noFeaturesMessage:"Your query did not return any results.",outputAction:0,autoExpand:null,addActions:function(actions){if(!this.initialConfig.actions&&!actions){actions=[{text:this.queryActionText,menuText:this.queryMenuText,iconCls:"gxp-icon-find",tooltip:this.queryActionTip,disabled:true,toggleGroup:this.toggleGroup,enableToggle:true,allowDepress:true,toggleHandler:function(button,pressed){if(this.autoExpand&&this.output.length>0){var expandContainer=Ext.getCmp(this.autoExpand);expandContainer[pressed?'expand':'collapse']();if(pressed){expandContainer.expand();if(expandContainer.ownerCt&&expandContainer.ownerCt instanceof Ext.Panel){expandContainer.ownerCt.expand();}}else{this.target.tools[this.featureManager].loadFeatures();}}},scope:this}];}
this.actions=gxp.plugins.QueryForm.superclass.addActions.apply(this,actions);if(this.actionTarget!==null&&this.actions){this.target.tools[this.featureManager].on("layerchange",function(mgr,rec,schema){for(var i=this.actions.length-1;i>=0;--i){this.actions[i].setDisabled(!schema);}},this);}},addOutput:function(config){var featureManager=this.target.tools[this.featureManager];config=Ext.apply({border:false,bodyStyle:"padding: 10px",layout:"form",width:320,autoScroll:true,items:[{xtype:"fieldset",ref:"spatialFieldset",title:this.queryByLocationText,anchor:"97%",style:"margin-bottom:0; border-left-color:transparent; border-right-color:transparent; border-width:1px 1px 0 1px; padding-bottom:0",checkboxToggle:true},{xtype:"fieldset",ref:"attributeFieldset",title:this.queryByAttributesText,anchor:"97%",style:"margin-bottom:0",checkboxToggle:true}],bbar:["->",{text:this.cancelButtonText,iconCls:"cancel",handler:function(){var ownerCt=this.outputTarget?queryForm.ownerCt:queryForm.ownerCt.ownerCt;if(ownerCt&&ownerCt instanceof Ext.Window){ownerCt.hide();}
addFilterBuilder(featureManager,featureManager.layerRecord,featureManager.schema);featureManager.loadFeatures();}},{text:this.queryActionText,iconCls:"gxp-icon-find",handler:function(){var filters=[];if(queryForm.spatialFieldset.collapsed!==true){filters.push(new OpenLayers.Filter.Spatial({type:OpenLayers.Filter.Spatial.BBOX,property:featureManager.featureStore.geometryName,value:this.target.mapPanel.map.getExtent()}));}
if(queryForm.attributeFieldset.collapsed!==true){var attributeFilter=queryForm.filterBuilder.getFilter();attributeFilter&&filters.push(attributeFilter);}
featureManager.loadFeatures(filters.length>1?new OpenLayers.Filter.Logical({type:OpenLayers.Filter.Logical.AND,filters:filters}):filters[0]);},scope:this}]},config||{});var queryForm=gxp.plugins.QueryForm.superclass.addOutput.call(this,config);var expandContainer=null,userExpand=true;if(this.autoExpand){expandContainer=Ext.getCmp(this.autoExpand);function stopAutoExpand(){if(userExpand){expandContainer.un('expand',stopAutoExpand);expandContainer.un('collapse',stopAutoExpand);expandContainer=null;}
userExpand=true;}
expandContainer.on({'expand':stopAutoExpand,'collapse':stopAutoExpand});}
var addFilterBuilder=function(mgr,rec,schema){queryForm.attributeFieldset.removeAll();queryForm.setDisabled(!schema);if(expandContainer){userExpand=false;expandContainer[schema?'expand':'collapse']();if(schema&&expandContainer&&expandContainer.ownerCt&&expandContainer.ownerCt instanceof Ext.Panel){expandContainer.ownerCt.expand();}}
if(schema){queryForm.attributeFieldset.add({xtype:"gxp_filterbuilder",ref:"../filterBuilder",attributes:schema,allowBlank:true,allowGroups:false});queryForm.spatialFieldset.expand();queryForm.attributeFieldset.expand();}else{queryForm.attributeFieldset.rendered&&queryForm.attributeFieldset.collapse();queryForm.spatialFieldset.rendered&&queryForm.spatialFieldset.collapse();}
queryForm.attributeFieldset.doLayout();};featureManager.on("layerchange",addFilterBuilder);addFilterBuilder(featureManager,featureManager.layerRecord,featureManager.schema);featureManager.on({"beforequery":function(){new Ext.LoadMask(queryForm.getEl(),{store:featureManager.featureStore,msg:this.queryMsg}).show();},"query":function(tool,store){if(store){if(this.target.tools[this.featureManager].featureStore!==null){store.getCount()||Ext.Msg.show({title:this.noFeaturesTitle,msg:this.noFeaturesMessage,buttons:Ext.Msg.OK,icon:Ext.Msg.INFO});if(this.autoHide){var ownerCt=this.outputTarget?queryForm.ownerCt:queryForm.ownerCt.ownerCt;ownerCt instanceof Ext.Window&&ownerCt.hide();}}}},scope:this});return queryForm;}});Ext.preg(gxp.plugins.QueryForm.prototype.ptype,gxp.plugins.QueryForm);Ext.namespace("gxp.plugins");gxp.plugins.LayerTree=Ext.extend(gxp.plugins.Tool,{ptype:"gxp_layertree",shortTitle:"Layers",rootNodeText:"Layers",overlayNodeText:"Overlays",baseNodeText:"Base Layers",groups:null,defaultGroup:"default",treeNodeUI:null,constructor:function(config){gxp.plugins.LayerTree.superclass.constructor.apply(this,arguments);if(!this.groups){this.groups={"default":this.overlayNodeText,"background":{title:this.baseNodeText,exclusive:true}};}
if(!this.treeNodeUI){this.treeNodeUI=Ext.extend(GeoExt.tree.LayerNodeUI,new GeoExt.tree.TreeNodeUIEventMixin());}},addOutput:function(config){config=Ext.apply(this.createOutputConfig(),config||{});return gxp.plugins.LayerTree.superclass.addOutput.call(this,config);},createOutputConfig:function(){var treeRoot=new Ext.tree.TreeNode({text:this.rootNodeText,expanded:true,isTarget:false,allowDrop:false});var defaultGroup=this.defaultGroup,plugin=this,groupConfig,exclusive;for(var group in this.groups){groupConfig=typeof this.groups[group]=="string"?{title:this.groups[group]}:this.groups[group];exclusive=groupConfig.exclusive;treeRoot.appendChild(new GeoExt.tree.LayerContainer(Ext.apply({text:groupConfig.title,iconCls:"gxp-folder",expanded:true,group:group==this.defaultGroup?undefined:group,loader:new GeoExt.tree.LayerLoader({baseAttrs:exclusive?{checkedGroup:Ext.isString(exclusive)?exclusive:group}:undefined,store:this.target.mapPanel.layers,filter:(function(group){return function(record){return(record.get("group")||defaultGroup)==group&&record.getLayer().displayInLayerSwitcher==true;};})(group),createNode:function(attr){plugin.configureLayerNode(this,attr);return GeoExt.tree.LayerLoader.prototype.createNode.apply(this,arguments);}}),singleClickExpand:true,allowDrag:false,listeners:{append:function(tree,node){node.expand();}}},groupConfig)));}
return{xtype:"treepanel",root:treeRoot,rootVisible:false,shortTitle:this.shortTitle,border:false,enableDD:true,selModel:new Ext.tree.DefaultSelectionModel({listeners:{beforeselect:this.handleBeforeSelect,scope:this}}),listeners:{contextmenu:this.handleTreeContextMenu,beforemovenode:this.handleBeforeMoveNode,scope:this},contextMenu:new Ext.menu.Menu({items:[]})};},configureLayerNode:function(loader,attr){attr.uiProvider=this.treeNodeUI;var layer=attr.layer;var store=attr.layerStore;if(layer&&store){var record=store.getAt(store.findBy(function(r){return r.getLayer()===layer;}));if(record){attr.qtip=record.get('abstract');if(!record.get("queryable")){attr.iconCls="gxp-tree-rasterlayer-icon";}
if(record.get("fixed")){attr.allowDrag=false;}
attr.listeners={rendernode:function(node){if(record===this.target.selectedLayer){node.select();}
this.target.on("layerselectionchange",function(rec){if(!this.selectionChanging&&rec===record){node.select();}},this);},scope:this};}}},handleBeforeSelect:function(selModel,node){var changed=true;var layer=node&&node.layer;var record;if(layer){var store=node.layerStore;record=store.getAt(store.findBy(function(r){return r.getLayer()===layer;}));}
this.selectionChanging=true;changed=this.target.selectLayer(record);this.selectionChanging=false;return changed;},handleTreeContextMenu:function(node,e){if(node&&node.layer){node.select();var tree=node.getOwnerTree();if(tree.getSelectionModel().getSelectedNode()===node){var c=tree.contextMenu;c.contextNode=node;c.items.getCount()>0&&c.showAt(e.getXY());}}},handleBeforeMoveNode:function(tree,node,oldParent,newParent,i){if(oldParent!==newParent){var store=newParent.loader.store;var index=store.findBy(function(r){return r.getLayer()===node.layer;});var record=store.getAt(index);record.set("group",newParent.attributes.group);}}});Ext.preg(gxp.plugins.LayerTree.prototype.ptype,gxp.plugins.LayerTree);Ext.namespace("gxp.plugins");gxp.plugins.LayerManager=Ext.extend(gxp.plugins.LayerTree,{ptype:"gxp_layermanager",baseNodeText:"Base Maps",createOutputConfig:function(){var tree=gxp.plugins.LayerManager.superclass.createOutputConfig.apply(this,arguments);Ext.applyIf(tree,Ext.apply({cls:"gxp-layermanager-tree",lines:false,useArrows:true,plugins:[{ptype:"gx_treenodecomponent"}]},this.treeConfig));return tree;},configureLayerNode:function(loader,attr){gxp.plugins.LayerManager.superclass.configureLayerNode.apply(this,arguments);var legendXType;if(OpenLayers.Layer.WMS&&attr.layer instanceof OpenLayers.Layer.WMS){legendXType="gx_wmslegend";}else if(OpenLayers.Layer.Vector&&attr.layer instanceof OpenLayers.Layer.Vector){legendXType="gx_vectorlegend";}
if(legendXType){Ext.apply(attr,{component:{xtype:legendXType,baseParams:{transparent:true,format:"image/png",legend_options:"fontAntiAliasing:true;fontSize:11;fontName:Arial"},layerRecord:this.target.mapPanel.layers.getByLayer(attr.layer),showTitle:false,cls:"legend"}});}}});Ext.preg(gxp.plugins.LayerManager.prototype.ptype,gxp.plugins.LayerManager);Ext.namespace("gxp.plugins");gxp.plugins.AddLayers=Ext.extend(gxp.plugins.Tool,{ptype:"gxp_addlayers",addActionMenuText:"Add layers",findActionMenuText:"Find layers",addActionTip:"Add layers",addServerText:"Add a New Server",addButtonText:"Add layers",untitledText:"Untitled",addLayerSourceErrorText:"Error getting WMS capabilities ({msg}).\nPlease check the url and try again.",availableLayersText:"Available Layers",expanderTemplateText:"<p><b>Abstract:</b> {abstract}</p>",panelTitleText:"Title",layerSelectionText:"View available data from:",doneText:"Done",uploadRoles:["ROLE_ADMINISTRATOR"],uploadText:"Upload layers",relativeUploadOnly:true,startSourceId:null,catalogSourceKey:null,selectedSource:null,addServerId:null,constructor:function(config){this.addEvents("sourceselected");gxp.plugins.AddLayers.superclass.constructor.apply(this,arguments);},addActions:function(){var commonOptions={tooltip:this.addActionTip,text:this.addActionText,menuText:this.addActionMenuText,disabled:true,iconCls:"gxp-icon-addlayers"};var options,uploadButton;if(this.initialConfig.search||(this.uploadSource)){var items=[new Ext.menu.Item({iconCls:'gxp-icon-addlayers',text:this.addActionMenuText,handler:this.showCapabilitiesGrid,scope:this})];if(this.initialConfig.search){items.push(new Ext.menu.Item({iconCls:'gxp-icon-addlayers',text:this.findActionMenuText,handler:this.showCatalogueSearch,scope:this}));}
if(this.uploadSource){uploadButton=this.createUploadButton(Ext.menu.Item);if(uploadButton){items.push(uploadButton);}}
options=Ext.apply(commonOptions,{menu:new Ext.menu.Menu({items:items})});}else{options=Ext.apply(commonOptions,{handler:this.showCapabilitiesGrid,scope:this});}
var actions=gxp.plugins.AddLayers.superclass.addActions.apply(this,[options]);this.target.on("ready",function(){if(this.uploadSource){var source=this.target.layerSources[this.uploadSource];if(source){this.setSelectedSource(source);}else{delete this.uploadSource;if(uploadButton){uploadButton.hide();}}}
actions[0].enable();},this);return actions;},showCatalogueSearch:function(){var selectedSource=this.initialConfig.search.selectedSource;var sources={};for(var key in this.target.layerSources){var source=this.target.layerSources[key];if(source instanceof gxp.plugins.CatalogueSource){var obj={};obj[key]=source;Ext.apply(sources,obj);}}
var output=gxp.plugins.AddLayers.superclass.addOutput.apply(this,[{sources:sources,selectedSource:selectedSource,xtype:'gxp_cataloguesearchpanel',map:this.target.mapPanel.map,listeners:{'addlayer':function(cmp,sourceKey,layerConfig){var source=this.target.layerSources[sourceKey];var bounds=OpenLayers.Bounds.fromArray(layerConfig.bbox);var mapProjection=this.target.mapPanel.map.getProjection();var bbox=bounds.transform(layerConfig.srs,mapProjection);layerConfig.srs=mapProjection;layerConfig.bbox=bbox.toArray();layerConfig.source=this.catalogSourceKey||sourceKey;var record=source.createLayerRecord(layerConfig);this.target.mapPanel.layers.add(record);},scope:this}}]);var popup=output.findParentByType('window');popup&&popup.center();return output;},showCapabilitiesGrid:function(){if(!this.capGrid){this.initCapGrid();}else if(!(this.capGrid instanceof Ext.Window)){this.addOutput(this.capGrid);}
this.capGrid.show();},initCapGrid:function(){var source,data=[],target=this.target;for(var id in target.layerSources){source=target.layerSources[id];if(source.store&&!source.hidden){data.push([id,source.title||id,source.url]);}}
var sources=new Ext.data.ArrayStore({fields:["id","title","url"],data:data});var expander=this.createExpander();function addLayers(){var source=this.selectedSource;var records=capGridPanel.getSelectionModel().getSelections();var recordsToAdd=[],numRecords=records.length;function collectRecords(record){if(recordsToAdd){recordsToAdd.push(record);}
numRecords--;if(numRecords===0){this.addLayers(recordsToAdd);}}
for(var i=0,ii=records.length;i<ii;++i){var record=source.createLayerRecord({name:records[i].get("name"),source:source.id},collectRecords,this);if(record){collectRecords.call(this,record);}}}
var idx=0;if(this.startSourceId!==null){sources.each(function(record){if(record.get("id")===this.startSourceId){idx=sources.indexOf(record);}},this);}
source=this.target.layerSources[data[idx][0]];var capGridPanel=new Ext.grid.GridPanel({store:source.store,autoScroll:true,autoExpandColumn:"title",plugins:[expander],loadMask:true,colModel:new Ext.grid.ColumnModel([expander,{id:"title",header:this.panelTitleText,dataIndex:"title",sortable:true},{header:"Id",dataIndex:"name",width:120,sortable:true}]),listeners:{rowdblclick:addLayers,scope:this}});var sourceComboBox=new Ext.form.ComboBox({ref:"../sourceComboBox",width:165,store:sources,valueField:"id",displayField:"title",tpl:'<tpl for="."><div ext:qtip="{url}" class="x-combo-list-item">{title}</div></tpl>',triggerAction:"all",editable:false,allowBlank:false,forceSelection:true,mode:"local",value:data[idx][0],listeners:{select:function(combo,record,index){var id=record.get("id");if(id===this.addServerId){showNewSourceDialog();sourceComboBox.reset();return;}
var source=this.target.layerSources[id];capGridPanel.reconfigure(source.store,capGridPanel.getColumnModel());capGridPanel.getView().focusRow(0);this.setSelectedSource(source);(function(){combo.triggerBlur();combo.el.blur();}).defer(100);},focus:function(field){if(target.proxy){field.reset();}},scope:this}});var capGridToolbar=null;if(this.target.proxy||data.length>1){capGridToolbar=[new Ext.Toolbar.TextItem({text:this.layerSelectionText}),sourceComboBox];}
if(this.target.proxy){this.addServerId=Ext.id();sources.loadData([[this.addServerId,this.addServerText+"..."]],true);}
var newSourceDialog={xtype:"gxp_newsourcedialog",header:false,listeners:{"hide":function(cmp){if(!this.outputTarget){cmp.ownerCt.hide();}},"urlselected":function(newSourceDialog,url){newSourceDialog.setLoading();this.target.addLayerSource({config:{url:url},callback:function(id){var record=new sources.recordType({id:id,title:this.target.layerSources[id].title||this.untitledText});sources.insert(0,[record]);sourceComboBox.onSelect(record,0);newSourceDialog.hide();},fallback:function(source,msg){this.setError(new Ext.Template(this.addLayerSourceErrorText).apply({msg:msg}));},scope:this});},scope:this}};var me=this;function showNewSourceDialog(){if(me.outputTarget){me.addOutput(newSourceDialog);}else{new Ext.Window({title:gxp.NewSourceDialog.prototype.title,modal:true,hideBorders:true,width:300,items:newSourceDialog}).show();}}
var items={xtype:"container",region:"center",layout:"fit",hideBorders:true,items:[capGridPanel]};if(this.instructionsText){items.items.push({xtype:"box",autoHeight:true,autoEl:{tag:"p",cls:"x-form-item",style:"padding-left: 5px; padding-right: 5px"},html:this.instructionsText});}
var bbarItems=["->",new Ext.Button({text:this.addButtonText,iconCls:"gxp-icon-addlayers",handler:addLayers,scope:this}),new Ext.Button({text:this.doneText,handler:function(){this.capGrid.hide();},scope:this})];var uploadButton;if(!this.uploadSource){uploadButton=this.createUploadButton();if(uploadButton){bbarItems.unshift(uploadButton);}}
var Cls=this.outputTarget?Ext.Panel:Ext.Window;this.capGrid=new Cls(Ext.apply({title:this.availableLayersText,closeAction:"hide",layout:"border",height:300,width:315,modal:true,items:items,tbar:capGridToolbar,bbar:bbarItems,listeners:{hide:function(win){capGridPanel.getSelectionModel().clearSelections();},show:function(win){if(this.selectedSource===null){this.setSelectedSource(this.target.layerSources[data[idx][0]]);}else{this.setSelectedSource(this.selectedSource);}},scope:this}},this.initialConfig.outputConfig));if(Cls===Ext.Panel){this.addOutput(this.capGrid);}},addLayers:function(records,isUpload){var source=this.selectedSource;var layerStore=this.target.mapPanel.layers,extent,record,layer;for(var i=0,ii=records.length;i<ii;++i){record=source.createLayerRecord({name:records[i].get("name"),source:source.id})||records[i];if(record){layer=record.getLayer();if(layer.maxExtent){if(!extent){extent=record.getLayer().maxExtent.clone();}else{extent.extend(record.getLayer().maxExtent);}}
if(record.get("group")==="background"){layerStore.insert(1,[record]);}else{layerStore.add([record]);}}}
if(extent){this.target.mapPanel.map.zoomToExtent(extent);}
if(records.length===1&&record){this.target.selectLayer(record);if(isUpload&&this.postUploadAction){var outputConfig,actionPlugin=this.postUploadAction;if(!Ext.isString(actionPlugin)){outputConfig=actionPlugin.outputConfig;actionPlugin=actionPlugin.plugin;}
this.target.tools[actionPlugin].addOutput(outputConfig);}}},setSelectedSource:function(source,callback){this.selectedSource=source;var store=source.store;this.fireEvent("sourceselected",this,source);if(this.capGrid&&source.lazy){source.store.load({callback:(function(){var sourceComboBox=this.capGrid.sourceComboBox,store=sourceComboBox.store,valueField=sourceComboBox.valueField,index=store.findExact(valueField,sourceComboBox.getValue()),rec=store.getAt(index),source=this.target.layerSources[rec.get("id")];if(source){if(source.title!==rec.get("title")&&!Ext.isEmpty(source.title)){rec.set("title",source.title);sourceComboBox.setValue(rec.get(valueField));}}else{store.remove(rec);}}).createDelegate(this)});}},createUploadButton:function(Cls){Cls=Cls||Ext.Button;var button;var uploadConfig=this.initialConfig.upload||!!this.initialConfig.uploadSource;var url;if(uploadConfig){if(typeof uploadConfig==="boolean"){uploadConfig={};}
button=new Cls({text:this.uploadText,iconCls:"gxp-icon-filebrowse",hidden:!this.uploadSource,handler:function(){this.target.doAuthorized(this.uploadRoles,function(){var panel=new gxp.LayerUploadPanel(Ext.apply({title:this.outputTarget?this.uploadText:undefined,url:url,width:300,border:false,bodyStyle:"padding: 10px 10px 0 10px;",labelWidth:65,autoScroll:true,defaults:{anchor:"99%",allowBlank:false,msgTarget:"side"},listeners:{uploadcomplete:function(panel,detail){var layers=detail["import"].tasks[0].items;var item,names={},resource,layer;for(var i=0,len=layers.length;i<len;++i){item=layers[i];if(item.state==="ERROR"){Ext.Msg.alert(item.originalName,item.errorMessage);return;}
resource=item.resource;layer=resource.featureType||resource.coverage;names[layer.namespace.name+":"+layer.name]=true;}
this.selectedSource.store.load({callback:function(records,options,success){var gridPanel,sel;if(this.capGrid&&this.capGrid.isVisible()){gridPanel=this.capGrid.get(0).get(0);sel=gridPanel.getSelectionModel();sel.clearSelections();}
var newRecords=[];var last=0;this.selectedSource.store.each(function(record,index){if(record.get("name")in names){last=index;newRecords.push(record);}});if(gridPanel){window.setTimeout(function(){sel.selectRecords(newRecords);gridPanel.getView().focusRow(last);},100);}else{this.addLayers(newRecords,true);}},scope:this});if(this.outputTarget){panel.hide();}else{win.close();}},scope:this}},uploadConfig));var win;if(this.outputTarget){this.addOutput(panel);}else{win=new Ext.Window({title:this.uploadText,modal:true,resizable:false,items:[panel]});win.show();}},this);},scope:this});var urlCache={};function getStatus(url,callback,scope){if(url in urlCache){window.setTimeout(function(){callback.call(scope,urlCache[url]);},0);}else{Ext.Ajax.request({url:url,disableCaching:false,callback:function(options,success,response){var status=response.status;urlCache[url]=status;callback.call(scope,status);}});}}
this.on({sourceselected:function(tool,source){button[this.uploadSource?"show":"hide"]();var show=false;if(this.isEligibleForUpload(source)){url=this.getGeoServerRestUrl(source.url);if(this.target.isAuthorized()){getStatus(url+"/imports",function(status){button.setVisible(status===200);},this);}}},scope:this});}
return button;},getGeoServerRestUrl:function(url){var parts=url.split("/");parts.pop();parts.push("rest");return parts.join("/");},isEligibleForUpload:function(source){return(source.url&&(this.relativeUploadOnly?(source.url.charAt(0)==="/"):true)&&(this.nonUploadSources||[]).indexOf(source.id)===-1);},createExpander:function(){return new Ext.grid.RowExpander({tpl:new Ext.Template(this.expanderTemplateText)});}});Ext.preg(gxp.plugins.AddLayers.prototype.ptype,gxp.plugins.AddLayers);Ext.namespace("gxp.plugins");gxp.plugins.RemoveLayer=Ext.extend(gxp.plugins.Tool,{ptype:"gxp_removelayer",removeMenuText:"Remove layer",removeActionTip:"Remove layer",addActions:function(){var selectedLayer;var actions=gxp.plugins.RemoveLayer.superclass.addActions.apply(this,[{menuText:this.removeMenuText,iconCls:"gxp-icon-removelayers",disabled:true,tooltip:this.removeActionTip,handler:function(){var record=selectedLayer;if(record){this.target.mapPanel.layers.remove(record);}},scope:this}]);var removeLayerAction=actions[0];this.target.on("layerselectionchange",function(record){selectedLayer=record;removeLayerAction.setDisabled(this.target.mapPanel.layers.getCount()<=1||!record);},this);var enforceOne=function(store){removeLayerAction.setDisabled(!selectedLayer||store.getCount()<=1);};this.target.mapPanel.layers.on({"add":enforceOne,"remove":enforceOne});return actions;}});Ext.preg(gxp.plugins.RemoveLayer.prototype.ptype,gxp.plugins.RemoveLayer);Ext.namespace("gxp.plugins");gxp.plugins.SelectedFeatureActions=Ext.extend(gxp.plugins.Tool,{ptype:"gxp_selectedfeatureactions",addActions:function(){var featureManager=this.target.tools[this.featureManager];var len=this.actions.length,actions=new Array(len);var tool=this;for(var i=0;i<len;++i){actions[i]=Ext.apply({iconCls:"process",disabled:true,handler:function(){var feature=featureManager.featureLayer.selectedFeatures[0];var tpl=new Ext.Template(this.urlTemplate);var outputConfig=Ext.applyIf(this.outputConfig||{},tool.initialConfig.outputConfig);tool.outputConfig=Ext.apply(outputConfig,{title:this.menuText,bodyCfg:{tag:"iframe",src:tpl.apply(Ext.applyIf({fid:feature.fid.split(".").pop(),layer:featureManager.layerRecord.get("name")},feature.attributes)),style:{border:"0px none"}}});tool.addOutput();}},this.actions[i]);}
featureManager.featureLayer.events.on({"featureselected":function(evt){var disabled=evt.feature.layer.selectedFeatures.length!=1;for(var i=actions.length-1;i>=0;--i){actions[i].setDisabled(disabled);}},"featureunselected":function(evt){if(evt.feature.layer.selectedFeatures.length==0){for(var i=actions.length-1;i>=0;--i){actions[i].disable();}}},scope:this});gxp.plugins.SelectedFeatureActions.superclass.addActions.apply(this,[actions]);}});Ext.preg(gxp.plugins.SelectedFeatureActions.prototype.ptype,gxp.plugins.SelectedFeatureActions);Ext.namespace("gxp.plugins");gxp.plugins.SnappingAgent=Ext.extend(gxp.plugins.Tool,{ptype:"gxp_snappingagent",init:function(target){gxp.plugins.SnappingAgent.superclass.init.apply(this,arguments);this.snappingTargets=[];this.controls={};this.setSnappingTargets(this.targets);},setSnappingTargets:function(targets){this.clearSnappingTargets();if(targets){for(var i=0,ii=targets.length;i<ii;++i){this.addSnappingTarget(targets[i]);}}},clearSnappingTargets:function(){var target;for(var i=0,ii=this.snappingTargets.length;i<ii;++i){target=this.snappingTargets[i];if(target.layer){target.layer.destroy();}}
this.snappingTargets.length=0;},addSnappingTarget:function(snapTarget){snapTarget=Ext.apply({},snapTarget);var map=this.target.mapPanel.map;var layer=new OpenLayers.Layer.Vector(snapTarget.name,{strategies:[new OpenLayers.Strategy.BBOX({ratio:1.5,autoActivate:false})],displayInLayerSwitcher:false,visibility:false,minResolution:snapTarget.minResolution,maxResolution:snapTarget.maxResolution});snapTarget.layer=layer;this.snappingTargets.push(snapTarget);var featureManager=new gxp.plugins.FeatureManager({maxFeatures:null,paging:false,layer:{source:snapTarget.source,name:snapTarget.name},listeners:{layerchange:function(){layer.protocol=featureManager.featureStore.proxy.protocol;map.addLayer(layer);map.events.on({moveend:function(){this.updateSnappingTarget(snapTarget);},scope:this});this.updateSnappingTarget(snapTarget);this.target.on({featureedit:function(featureManager,layerCfg){if(layerCfg.name==snapTarget.name&&layerCfg.source==snapTarget.source){this.updateSnappingTarget(snapTarget,{force:true});}},scope:this});},scope:this}});featureManager.init(this.target);},updateSnappingTarget:function(snapTarget,options){var min=snapTarget.minResolution||Number.NEGATIVE_INFINITY;var max=snapTarget.maxResolution||Number.POSITIVE_INFINITY;var resolution=this.target.mapPanel.map.getResolution();if(min<=resolution&&resolution<max){var visibility=snapTarget.layer.visibility;snapTarget.layer.visibility=true;snapTarget.layer.strategies[0].update(options);snapTarget.layer.visibility=visibility;}},createSnappingControl:function(layer){var options=this.initialConfig.controlOptions||this.initialConfig.options;var control=new OpenLayers.Control.Snapping(Ext.applyIf({layer:layer},options||{}));return control;},registerEditor:function(editor){var featureManager=editor.getFeatureManager();var control=this.createSnappingControl(featureManager.featureLayer);this.controls[editor.id]=control;editor.on({layereditable:this.onLayerEditable,featureeditable:this.onFeatureEditable,scope:this});},onLayerEditable:function(editor,record,editable){var control=this.controls[editor.id];if(!editable){control.deactivate();}else{var targets=[];var snappingTarget,layerConfig,include;var source=record.get("source");var name=record.get("name");for(var i=0,ii=this.snappingTargets.length;i<ii;++i){snappingTarget=this.snappingTargets[i];if(snappingTarget.restrictedLayers){include=false;for(var j=0,jj=snappingTarget.restrictedLayers.length;j<jj;++j){layerConfig=snappingTarget.restrictedLayers[j];if(layerConfig.source===source&&layerConfig.name===name){include=true;break;}}
if(include){targets.push(snappingTarget);}}else{targets.push(snappingTarget);}}
control.setTargets(targets);control.activate();}},onFeatureEditable:function(editor,feature,editable){var manager=editor.getFeatureManager();var editableLayer=manager.layerRecord;var source=editableLayer.get("source");var name=editableLayer.get("name");var target,originalFilter,filter;for(var i=0,ii=this.snappingTargets.length;i<ii;++i){target=this.snappingTargets[i];if(source===target.source&&name===target.name){originalFilter=this.targets[i].filter;if(!feature||!feature.fid||!editable){target.filter=originalFilter;}else{filter=new OpenLayers.Filter.Logical({type:OpenLayers.Filter.Logical.NOT,filters:[new OpenLayers.Filter.FeatureId({fids:[feature.fid]})]});if(originalFilter){target.filter=new OpenLayers.Filter.Logical({type:OpenLayers.Filter.Logical.AND,filters:[originalFilter,filter]});}else{target.filter=filter;}}}}}});Ext.preg(gxp.plugins.SnappingAgent.prototype.ptype,gxp.plugins.SnappingAgent);Ext.namespace("gxp.plugins");gxp.plugins.Styler=Ext.extend(gxp.plugins.Tool,{ptype:"gxp_styler",menuText:"Edit Styles",tooltip:"Manage layer styles",roles:["ROLE_ADMINISTRATOR"],sameOriginStyling:true,rasterStyling:false,requireDescribeLayer:true,constructor:function(config){gxp.plugins.Styler.superclass.constructor.apply(this,arguments);if(!this.outputConfig){this.outputConfig={autoHeight:true,width:265};}
Ext.applyIf(this.outputConfig,{closeAction:"close"});},init:function(target){gxp.plugins.Styler.superclass.init.apply(this,arguments);this.target.on("authorizationchange",this.enableOrDisable,this);},destroy:function(){this.target.un("authorizationchange",this.enableOrDisable,this);gxp.plugins.Styler.superclass.destroy.apply(this,arguments);},enableOrDisable:function(){if(this.target&&this.target.selectedLayer!==null){this.handleLayerChange(this.target.selectedLayer);}},addActions:function(){var layerProperties;var actions=gxp.plugins.Styler.superclass.addActions.apply(this,[{menuText:this.menuText,iconCls:"gxp-icon-palette",disabled:true,tooltip:this.tooltip,handler:function(){this.target.doAuthorized(this.roles,this.addOutput,this);},scope:this}]);this.launchAction=actions[0];this.target.on({layerselectionchange:this.handleLayerChange,scope:this});return actions;},handleLayerChange:function(record){this.launchAction.disable();if(record){var source=this.target.getSource(record);if(source instanceof gxp.plugins.WMSSource){source.describeLayer(record,function(describeRec){this.checkIfStyleable(record,describeRec);},this);}}},checkIfStyleable:function(layerRec,describeRec){if(describeRec){var owsTypes=["WFS"];if(this.rasterStyling===true){owsTypes.push("WCS");}}
if(describeRec?owsTypes.indexOf(describeRec.get("owsType"))!==-1:!this.requireDescribeLayer){var editableStyles=false;var source=this.target.layerSources[layerRec.get("source")];var url;var restUrl=layerRec.get("restUrl");if(restUrl){url=restUrl+"/styles";}else{url=source.url.split("?").shift().replace(/\/(wms|ows)\/?$/,"/rest/styles");}
if(this.sameOriginStyling){editableStyles=url.charAt(0)==="/";if(this.target.authenticate&&editableStyles){this.launchAction.enable();return;}}else{editableStyles=true;}
if(editableStyles){if(this.target.isAuthorized()){this.enableActionIfAvailable(url);}}}},enableActionIfAvailable:function(url){Ext.Ajax.request({method:"PUT",url:url,callback:function(options,success,response){this.launchAction.setDisabled(response.status!==405);},scope:this});},addOutput:function(config){config=config||{};var record=this.target.selectedLayer;var origCfg=this.initialConfig.outputConfig||{};this.outputConfig.title=origCfg.title||this.menuText+": "+record.get("title");this.outputConfig.shortTitle=record.get("title");Ext.apply(config,gxp.WMSStylesDialog.createGeoServerStylerConfig(record));if(this.rasterStyling===true){config.plugins.push({ptype:"gxp_wmsrasterstylesdialog"});}
Ext.applyIf(config,{style:"padding: 10px"});var output=gxp.plugins.Styler.superclass.addOutput.call(this,config);if(!(output.ownerCt.ownerCt instanceof Ext.Window)){output.dialogCls=Ext.Panel;output.showDlg=function(dlg){dlg.layout="fit";dlg.autoHeight=false;output.ownerCt.add(dlg);};}
output.stylesStore.on("load",function(){if(!this.outputTarget&&output.ownerCt.ownerCt instanceof Ext.Window){output.ownerCt.ownerCt.center();}});}});Ext.preg(gxp.plugins.Styler.prototype.ptype,gxp.plugins.Styler);Ext.namespace("gxp.plugins");gxp.plugins.NavigationHistory=Ext.extend(gxp.plugins.Tool,{ptype:"gxp_navigationhistory",previousMenuText:"Zoom To Previous Extent",nextMenuText:"Zoom To Next Extent",previousTooltip:"Zoom To Previous Extent",nextTooltip:"Zoom To Next Extent",constructor:function(config){gxp.plugins.NavigationHistory.superclass.constructor.apply(this,arguments);},addActions:function(){var historyControl=new OpenLayers.Control.NavigationHistory();this.target.mapPanel.map.addControl(historyControl);var actions=[new GeoExt.Action({menuText:this.previousMenuText,iconCls:"gxp-icon-zoom-previous",tooltip:this.previousTooltip,disabled:true,control:historyControl.previous}),new GeoExt.Action({menuText:this.nextMenuText,iconCls:"gxp-icon-zoom-next",tooltip:this.nextTooltip,disabled:true,control:historyControl.next})];return gxp.plugins.NavigationHistory.superclass.addActions.apply(this,[actions]);}});Ext.preg(gxp.plugins.NavigationHistory.prototype.ptype,gxp.plugins.NavigationHistory);Ext.namespace("gxp.plugins");gxp.plugins.Zoom=Ext.extend(gxp.plugins.Tool,{ptype:"gxp_zoom",zoomMenuText:"Zoom Box",zoomInMenuText:"Zoom In",zoomOutMenuText:"Zoom Out",zoomTooltip:"Zoom by dragging a box",zoomInTooltip:"Zoom in",zoomOutTooltip:"Zoom out",constructor:function(config){gxp.plugins.Zoom.superclass.constructor.apply(this,arguments);},addActions:function(){var actions=[{menuText:this.zoomInMenuText,iconCls:"gxp-icon-zoom-in",tooltip:this.zoomInTooltip,handler:function(){this.target.mapPanel.map.zoomIn();},scope:this},{menuText:this.zoomOutMenuText,iconCls:"gxp-icon-zoom-out",tooltip:this.zoomOutTooltip,handler:function(){this.target.mapPanel.map.zoomOut();},scope:this}];if(this.showZoomBoxAction){actions.unshift(new GeoExt.Action({menuText:this.zoomText,iconCls:"gxp-icon-zoom",tooltip:this.zoomTooltip,control:new OpenLayers.Control.ZoomBox(this.controlOptions),map:this.target.mapPanel.map,enableToggle:true,allowDepress:false,toggleGroup:this.toggleGroup}));}
return gxp.plugins.Zoom.superclass.addActions.apply(this,[actions]);}});Ext.preg(gxp.plugins.Zoom.prototype.ptype,gxp.plugins.Zoom);Ext.namespace("gxp.plugins");gxp.plugins.ZoomToExtent=Ext.extend(gxp.plugins.Tool,{ptype:"gxp_zoomtoextent",menuText:"Zoom To Max Extent",tooltip:"Zoom To Max Extent",extent:null,closest:true,iconCls:"gxp-icon-zoomtoextent",closest:true,constructor:function(config){gxp.plugins.ZoomToExtent.superclass.constructor.apply(this,arguments);if(this.extent instanceof Array){this.extent=OpenLayers.Bounds.fromArray(this.extent);}},addActions:function(){return gxp.plugins.ZoomToExtent.superclass.addActions.apply(this,[{text:this.buttonText,menuText:this.menuText,iconCls:this.iconCls,tooltip:this.tooltip,handler:function(){var map=this.target.mapPanel.map;var extent=typeof this.extent=="function"?this.extent():this.extent;if(!extent){var layer,extended;for(var i=0,len=map.layers.length;i<len;++i){layer=map.layers[i];if(layer.getVisibility()){extended=layer.restrictedExtent||layer.maxExtent;if(extent){extent.extend(extended);}else if(extended){extent=extended.clone();}}}}
if(extent){var restricted=map.restrictedExtent||map.maxExtent;if(restricted){extent=new OpenLayers.Bounds(Math.max(extent.left,restricted.left),Math.max(extent.bottom,restricted.bottom),Math.min(extent.right,restricted.right),Math.min(extent.top,restricted.top));}
map.zoomToExtent(extent,this.closest);}},scope:this}]);}});Ext.preg(gxp.plugins.ZoomToExtent.prototype.ptype,gxp.plugins.ZoomToExtent);Ext.namespace("gxp.plugins");gxp.plugins.ZoomToDataExtent=Ext.extend(gxp.plugins.ZoomToExtent,{ptype:"gxp_zoomtodataextent",menuText:"Zoom to layer extent",tooltip:"Zoom to layer extent",closest:false,iconCls:"gxp-icon-zoom-to",extent:function(){return this.target.tools[this.featureManager].featureLayer.getDataExtent();},addActions:function(){var actions=gxp.plugins.ZoomToDataExtent.superclass.addActions.apply(this,arguments);actions[0].disable();var layer=this.target.tools[this.featureManager].featureLayer;layer.events.on({"featuresadded":function(){actions[0].isDisabled()&&actions[0].enable();},"featuresremoved":function(){layer.features.length==0&&actions[0].disable();}});return actions;}});Ext.preg(gxp.plugins.ZoomToDataExtent.prototype.ptype,gxp.plugins.ZoomToDataExtent);Ext.namespace("gxp.plugins");gxp.plugins.ZoomToLayerExtent=Ext.extend(gxp.plugins.ZoomToExtent,{ptype:"gxp_zoomtolayerextent",menuText:"Zoom to layer extent",tooltip:"Zoom to layer extent",iconCls:"gxp-icon-zoom-to",destroy:function(){this.selectedRecord=null;gxp.plugins.ZoomToLayerExtent.superclass.destroy.apply(this,arguments);},extent:function(){var layer=this.selectedRecord.getLayer(),dataExtent;if(OpenLayers.Layer.Vector){dataExtent=layer instanceof OpenLayers.Layer.Vector&&layer.getDataExtent();}
return layer.restrictedExtent||dataExtent||layer.maxExtent||map.maxExtent;},addActions:function(){var actions=gxp.plugins.ZoomToLayerExtent.superclass.addActions.apply(this,arguments);actions[0].disable();this.target.on("layerselectionchange",function(record){this.selectedRecord=record;actions[0].setDisabled(!record||!record.get('layer'));},this);return actions;}});Ext.preg(gxp.plugins.ZoomToLayerExtent.prototype.ptype,gxp.plugins.ZoomToLayerExtent);Ext.namespace("gxp.plugins");gxp.plugins.ZoomToSelectedFeatures=Ext.extend(gxp.plugins.ZoomToExtent,{ptype:"gxp_zoomtoselectedfeatures",menuText:"Zoom to selected features",tooltip:"Zoom to selected features",closest:false,layer:null,iconCls:"gxp-icon-zoom-to",extent:function(){var layer=this.target.tools[this.featureManager].featureLayer;var bounds,geom,extent,features=layer.selectedFeatures;for(var i=features.length-1;i>=0;--i){geom=features[i].geometry;if(geom){extent=geom.getBounds();if(bounds){bounds.extend(extent);}else{bounds=extent.clone();}}}
return bounds;},addActions:function(){var actions=gxp.plugins.ZoomToSelectedFeatures.superclass.addActions.apply(this,arguments);actions[0].disable();var handlers={"featureselected":function(evt){if(actions[0].isDisabled()&&evt.feature.geometry!==null){actions[0].enable();}},"featureunselected":function(){if(this.layer.selectedFeatures.length===0){actions[0].disable();}},scope:this};var featureManager=this.target.tools[this.featureManager];function register(){if(this.layer){this.layer.events.un(handlers);}
this.layer=featureManager.featureLayer;if(this.layer){this.layer.events.on(handlers);}}
this.target.on("layerselectionchange",register);featureManager.on("query",function(){actions[0].disable();});register.call(this);return actions;}});Ext.preg(gxp.plugins.ZoomToSelectedFeatures.prototype.ptype,gxp.plugins.ZoomToSelectedFeatures);Ext.namespace("gxp.plugins");gxp.plugins.Measure=Ext.extend(gxp.plugins.Tool,{ptype:"gxp_measure",outputTarget:"map",buttonText:"Measure",lengthMenuText:"Length",areaMenuText:"Area",lengthTooltip:"Measure length",areaTooltip:"Measure area",measureTooltip:"Measure",constructor:function(config){gxp.plugins.Measure.superclass.constructor.apply(this,arguments);},destroy:function(){this.button=null;gxp.plugins.Measure.superclass.destroy.apply(this,arguments);},createMeasureControl:function(handlerType,title){var styleMap=new OpenLayers.StyleMap({"default":new OpenLayers.Style(null,{rules:[new OpenLayers.Rule({symbolizer:{"Point":{pointRadius:4,graphicName:"square",fillColor:"white",fillOpacity:1,strokeWidth:1,strokeOpacity:1,strokeColor:"#333333"},"Line":{strokeWidth:3,strokeOpacity:1,strokeColor:"#666666",strokeDashstyle:"dash"},"Polygon":{strokeWidth:2,strokeOpacity:1,strokeColor:"#666666",fillColor:"white",fillOpacity:0.3}}})]})});var cleanup=function(){if(measureToolTip){measureToolTip.destroy();}};var makeString=function(metricData){var metric=metricData.measure;var metricUnit=metricData.units;measureControl.displaySystem="english";var englishData=metricData.geometry.CLASS_NAME.indexOf("LineString")>-1?measureControl.getBestLength(metricData.geometry):measureControl.getBestArea(metricData.geometry);var english=englishData[0];var englishUnit=englishData[1];measureControl.displaySystem="metric";var dim=metricData.order==2?'<sup>2</sup>':'';return metric.toFixed(2)+" "+metricUnit+dim+"<br>"+
english.toFixed(2)+" "+englishUnit+dim;};var measureToolTip;var controlOptions=Ext.apply({},this.initialConfig.controlOptions);Ext.applyIf(controlOptions,{geodesic:true,persist:true,handlerOptions:{layerOptions:{styleMap:styleMap}},eventListeners:{measurepartial:function(event){cleanup();measureToolTip=this.addOutput({xtype:'tooltip',html:makeString(event),title:title,autoHide:false,closable:true,draggable:false,mouseOffset:[0,0],showDelay:1,listeners:{hide:cleanup}});if(event.measure>0){var px=measureControl.handler.lastUp;var p0=this.target.mapPanel.getPosition();measureToolTip.targetXY=[p0[0]+px.x,p0[1]+px.y];measureToolTip.show();}},deactivate:cleanup,scope:this}});var measureControl=new OpenLayers.Control.Measure(handlerType,controlOptions);return measureControl;},addActions:function(){this.activeIndex=0;this.button=new Ext.SplitButton({iconCls:"gxp-icon-measure-length",tooltip:this.measureTooltip,buttonText:this.buttonText,enableToggle:true,toggleGroup:this.toggleGroup,allowDepress:true,handler:function(button,event){if(button.pressed){button.menu.items.itemAt(this.activeIndex).setChecked(true);}},scope:this,listeners:{toggle:function(button,pressed){if(!pressed){button.menu.items.each(function(i){i.setChecked(false);});}},render:function(button){Ext.ButtonToggleMgr.register(button);}},menu:new Ext.menu.Menu({items:[new Ext.menu.CheckItem(new GeoExt.Action({text:this.lengthMenuText,iconCls:"gxp-icon-measure-length",toggleGroup:this.toggleGroup,group:this.toggleGroup,listeners:{checkchange:function(item,checked){this.activeIndex=0;this.button.toggle(checked);if(checked){this.button.setIconClass(item.iconCls);}},scope:this},map:this.target.mapPanel.map,control:this.createMeasureControl(OpenLayers.Handler.Path,this.lengthTooltip)})),new Ext.menu.CheckItem(new GeoExt.Action({text:this.areaMenuText,iconCls:"gxp-icon-measure-area",toggleGroup:this.toggleGroup,group:this.toggleGroup,allowDepress:false,listeners:{checkchange:function(item,checked){this.activeIndex=1;this.button.toggle(checked);if(checked){this.button.setIconClass(item.iconCls);}},scope:this},map:this.target.mapPanel.map,control:this.createMeasureControl(OpenLayers.Handler.Polygon,this.areaTooltip)}))]})});return gxp.plugins.Measure.superclass.addActions.apply(this,[this.button]);}});Ext.preg(gxp.plugins.Measure.prototype.ptype,gxp.plugins.Measure);Ext.namespace("gxp.plugins");gxp.plugins.Navigation=Ext.extend(gxp.plugins.Tool,{ptype:"gxp_navigation",menuText:"Pan Map",tooltip:"Pan Map",constructor:function(config){gxp.plugins.Navigation.superclass.constructor.apply(this,arguments);},addActions:function(){var control;if(!this.controlOptions){candidates=this.target.mapPanel.map.getControlsByClass('OpenLayers.Control.Navigation');if(candidates.length){control=candidates[0];}}else{this.controlOptions=this.controlOptions||{};Ext.applyIf(this.controlOptions,{dragPanOptions:{enableKinetic:true}});control=new OpenLayers.Control.Navigation(this.controlOptions);}
var actions=[new GeoExt.Action({tooltip:this.tooltip,menuText:this.menuText,iconCls:"gxp-icon-pan",enableToggle:true,pressed:true,allowDepress:false,control:control,map:control.map?null:this.target.mapPanel.map,toggleGroup:this.toggleGroup})];return gxp.plugins.Navigation.superclass.addActions.apply(this,[actions]);}});Ext.preg(gxp.plugins.Navigation.prototype.ptype,gxp.plugins.Navigation);Ext.namespace("gxp.plugins");gxp.plugins.LayerProperties=Ext.extend(gxp.plugins.Tool,{ptype:"gxp_layerproperties",menuText:"Layer Properties",toolTip:"Layer Properties",constructor:function(config){gxp.plugins.LayerProperties.superclass.constructor.apply(this,arguments);if(!this.outputConfig){this.outputConfig={width:325,autoHeight:true};}},addActions:function(){var actions=gxp.plugins.LayerProperties.superclass.addActions.apply(this,[{menuText:this.menuText,iconCls:"gxp-icon-layerproperties",disabled:true,tooltip:this.toolTip,handler:function(){this.removeOutput();this.addOutput();},scope:this}]);var layerPropertiesAction=actions[0];this.target.on("layerselectionchange",function(record){layerPropertiesAction.setDisabled(!record||!record.get("properties"));},this);return actions;},addOutput:function(config){config=config||{};var record=this.target.selectedLayer;var origCfg=this.initialConfig.outputConfig||{};this.outputConfig.title=origCfg.title||this.menuText+": "+record.get("title");this.outputConfig.shortTitle=record.get("title");var xtype=record.get("properties")||"gxp_layerpanel";var panelConfig=this.layerPanelConfig;if(panelConfig&&panelConfig[xtype]){Ext.apply(config,panelConfig[xtype]);}
return gxp.plugins.LayerProperties.superclass.addOutput.call(this,Ext.apply({xtype:xtype,authorized:this.target.isAuthorized(),layerRecord:record,source:this.target.getSource(record),defaults:{style:"padding: 10px",autoHeight:this.outputConfig.autoHeight},listeners:{added:function(cmp){if(!this.outputTarget){cmp.on("afterrender",function(){cmp.ownerCt.ownerCt.center();},this,{single:true});}},scope:this}},config));}});Ext.preg(gxp.plugins.LayerProperties.prototype.ptype,gxp.plugins.LayerProperties);Ext.namespace("gxp.plugins");gxp.plugins.MapProperties=Ext.extend(gxp.plugins.Tool,{ptype:"gxp_mapproperties",colorManager:null,menuText:"Map Properties",toolTip:"Map Properties",wrapDateLineText:"Wrap dateline",numberOfZoomLevelsText:"Number of zoom levels",colorText:"Background color",addActions:function(){var baseLayer=this.target.mapPanel.map.baseLayer;var container=Ext.get(this.target.mapPanel.map.getViewport());if(this.initialConfig.backgroundColor){container.setStyle('background-color',this.initialConfig.backgroundColor);}
if(this.initialConfig.numZoomLevels){baseLayer.addOptions({numZoomLevels:this.initialConfig.numZoomLevels});this.target.mapPanel.map.events.triggerEvent('changebaselayer',{layer:baseLayer});}
if(this.initialConfig.wrapDateLine){baseLayer.wrapDateLine=this.initialConfig.wrapDateLine;}
return gxp.plugins.MapProperties.superclass.addActions.apply(this,[{menuText:this.menuText,iconCls:"gxp-icon-mapproperties",tooltip:this.toolTip,handler:function(){this.removeOutput();this.addOutput();},scope:this}]);},addOutput:function(){var colorFieldPlugins;if(this.colorManager){colorFieldPlugins=[new this.colorManager()];}
var baseLayer=this.target.mapPanel.map.baseLayer;var container=Ext.get(this.target.mapPanel.map.getViewport());return gxp.plugins.MapProperties.superclass.addOutput.call(this,{xtype:'form',border:false,bodyStyle:"padding: 10px",items:[{xtype:'numberfield',allowNegative:false,allowDecimals:false,fieldLabel:this.numberOfZoomLevelsText,minValue:1,value:baseLayer.numZoomLevels,listeners:{"change":function(fld,value){baseLayer.addOptions({numZoomLevels:value});this.target.mapPanel.map.events.triggerEvent('changebaselayer',{layer:baseLayer});},scope:this}},{xtype:'checkbox',fieldLabel:this.wrapDateLineText,checked:baseLayer.wrapDateLine,listeners:{"check":function(cb,value){baseLayer.wrapDateLine=value;},scope:this}},{xtype:"gxp_colorfield",fieldLabel:this.colorText,value:container.getColor('background-color'),plugins:colorFieldPlugins,listeners:{valid:function(field){container.setStyle('background-color',field.getValue());},scope:this}}]});},getState:function(){var baseLayer=this.target.mapPanel.map.baseLayer;var container=Ext.get(this.target.mapPanel.map.getViewport());return{ptype:this.ptype,backgroundColor:container.getColor('background-color'),numZoomLevels:baseLayer.numZoomLevels,wrapDateLine:baseLayer.wrapDateLine};}});Ext.preg(gxp.plugins.MapProperties.prototype.ptype,gxp.plugins.MapProperties);Ext.namespace("gxp.plugins");gxp.plugins.Legend=Ext.extend(gxp.plugins.Tool,{ptype:"gxp_legend",menuText:"Legend",tooltip:"Show Legend",actionTarget:null,constructor:function(config){gxp.plugins.Legend.superclass.constructor.apply(this,arguments);if(!this.outputConfig){this.outputConfig={width:300,height:400};}
Ext.applyIf(this.outputConfig,{title:this.menuText});},addActions:function(){var actions=[{menuText:this.menuText,iconCls:"gxp-icon-legend",tooltip:this.tooltip,handler:function(){this.removeOutput();this.addOutput();},scope:this}];return gxp.plugins.Legend.superclass.addActions.apply(this,[actions]);},getLegendPanel:function(){return this.output[0];},addOutput:function(config){return gxp.plugins.Legend.superclass.addOutput.call(this,Ext.apply({xtype:'gx_legendpanel',ascending:false,border:false,hideMode:"offsets",layerStore:this.target.mapPanel.layers,defaults:{cls:'gxp-legend-item'}},config));}});Ext.preg(gxp.plugins.Legend.prototype.ptype,gxp.plugins.Legend);Ext.namespace("gxp.plugins");gxp.plugins.Print=Ext.extend(gxp.plugins.Tool,{ptype:"gxp_print",printService:null,printCapabilities:null,customParams:null,includeLegend:false,menuText:"Print Map",tooltip:"Print Map",buttonText:"Print",notAllNotPrintableText:"Not All Layers Can Be Printed",nonePrintableText:"None of your current map layers can be printed",previewText:"Print Preview",openInNewWindow:false,constructor:function(config){gxp.plugins.Print.superclass.constructor.apply(this,arguments);},addActions:function(){if(this.printService!==null||this.printCapabilities!=null){var printProvider=new GeoExt.data.PrintProvider({capabilities:this.printCapabilities,url:this.printService,customParams:this.customParams,autoLoad:false,listeners:{beforedownload:function(provider,url){if(this.openInNewWindow===true){window.open(url);return false;}},beforeencodelegend:function(provider,jsonData,legend){if(legend&&legend.ptype==="gxp_layermanager"){var encodedLegends=[];var output=legend.output;if(output&&output[0]){output[0].getRootNode().cascade(function(node){if(node.component&&!node.component.hidden){var cmp=node.component;var encFn=this.encoders.legends[cmp.getXType()];encodedLegends=encodedLegends.concat(encFn.call(this,cmp,jsonData.pages[0].scale));}},provider);}
jsonData.legends=encodedLegends;return false;}},beforeprint:function(){printWindow.items.get(0).printMapPanel.layers.each(function(l){var params=l.get("layer").params;for(var p in params){if(params[p]instanceof Array){params[p]=params[p].join(",");}}});},loadcapabilities:function(){if(printButton){printButton.initialConfig.disabled=false;printButton.enable();}},print:function(){try{printWindow.close();}catch(err){}},printException:function(cmp,response){this.target.displayXHRTrouble&&this.target.displayXHRTrouble(response);},scope:this}});var actions=gxp.plugins.Print.superclass.addActions.call(this,[{menuText:this.menuText,buttonText:this.buttonText,tooltip:this.tooltip,iconCls:"gxp-icon-print",disabled:this.printCapabilities!==null?false:true,handler:function(){var supported=getPrintableLayers();if(supported.length>0){var printWindow=createPrintWindow.call(this);showPrintWindow.call(this);return printWindow;}else{Ext.Msg.alert(this.notAllNotPrintableText,this.nonePrintableText);}},scope:this,listeners:{render:function(){printProvider.loadCapabilities();}}}]);var printButton=actions[0].items[0];var printWindow;function destroyPrintComponents(){if(printWindow){try{var panel=printWindow.items.first();panel.printMapPanel.printPage.destroy();}catch(err){}
printWindow=null;}}
var mapPanel=this.target.mapPanel;function getPrintableLayers(){var supported=[];mapPanel.layers.each(function(record){var layer=record.getLayer();if(isPrintable(layer)){supported.push(layer);}});return supported;}
function isPrintable(layer){return layer.getVisibility()===true&&(layer instanceof OpenLayers.Layer.WMS||layer instanceof OpenLayers.Layer.OSM);}
function createPrintWindow(){var legend=null;if(this.includeLegend===true){var key,tool;for(key in this.target.tools){tool=this.target.tools[key];if(tool.ptype==="gxp_legend"){legend=tool.getLegendPanel();break;}}
if(legend===null){for(key in this.target.tools){tool=this.target.tools[key];if(tool.ptype==="gxp_layermanager"){legend=tool;break;}}}}
printWindow=new Ext.Window({title:this.previewText,modal:true,border:false,autoHeight:true,resizable:false,width:360,items:[new GeoExt.ux.PrintPreview({minWidth:336,mapTitle:this.target.about&&this.target.about["title"],comment:this.target.about&&this.target.about["abstract"],printMapPanel:{autoWidth:true,height:Math.min(420,Ext.get(document.body).getHeight()-150),limitScales:true,map:Ext.applyIf({controls:[new OpenLayers.Control.Navigation({zoomWheelEnabled:false,zoomBoxEnabled:false}),new OpenLayers.Control.PanPanel(),new OpenLayers.Control.ZoomPanel(),new OpenLayers.Control.Attribution()],eventListeners:{preaddlayer:function(evt){return isPrintable(evt.layer);}}},mapPanel.initialConfig.map),items:[{xtype:"gx_zoomslider",vertical:true,height:100,aggressive:true}],listeners:{afterlayout:function(evt){printWindow.setWidth(Math.max(360,this.getWidth()+24));printWindow.center();}}},printProvider:printProvider,includeLegend:this.includeLegend,legend:legend,sourceMap:mapPanel})],listeners:{beforedestroy:destroyPrintComponents}});return printWindow;}
function showPrintWindow(){printWindow.show();printWindow.setWidth(0);var tb=printWindow.items.get(0).items.get(0);var w=0;tb.items.each(function(item){if(item.getEl()){w+=item.getWidth();}});printWindow.setWidth(Math.max(printWindow.items.get(0).printMapPanel.getWidth(),w+20));printWindow.center();}
return actions;}}});Ext.preg(gxp.plugins.Print.prototype.ptype,gxp.plugins.Print);Ext.namespace("gxp.plugins");gxp.plugins.LoadingIndicator=Ext.extend(gxp.plugins.Tool,{ptype:"gxp_loadingindicator",onlyShowOnFirstLoad:false,loadingMapMessage:"Loading Map...",layerCount:0,busyMask:null,init:function(target){target.map.events.register("preaddlayer",this,function(e){var layer=e.layer;if(layer instanceof OpenLayers.Layer.WMS){layer.events.on({"loadstart":function(){this.layerCount++;if(!this.busyMask){this.busyMask=new Ext.LoadMask(target.map.div,{msg:this.loadingMapMessage});}
this.busyMask.show();if(this.onlyShowOnFirstLoad===true){layer.events.unregister("loadstart",this,arguments.callee);}},"loadend":function(){this.layerCount--;if(this.layerCount===0){this.busyMask.hide();}
if(this.onlyShowOnFirstLoad===true){layer.events.unregister("loadend",this,arguments.callee);}},scope:this});}});},destroy:function(){Ext.destroy(this.busyMask);this.busyMask=null;gxp.plugins.LoadingIndicator.superclass.destroy.apply(this,arguments);}});Ext.preg(gxp.plugins.LoadingIndicator.prototype.ptype,gxp.plugins.LoadingIndicator);Ext.namespace("gxp.plugins");gxp.plugins.Playback=Ext.extend(gxp.plugins.Tool,{ptype:"gxp_playback",autoStart:false,looped:false,menuText:"Time Playback",tooltip:"Show Time Playback Panel",actionTarget:null,outputTarget:'map',constructor:function(config){gxp.plugins.Playback.superclass.constructor.apply(this,arguments);},addOutput:function(config){delete this._ready;OpenLayers.Control.TimeManager.prototype.maxFrameDelay=(this.target.tests&&this.target.tests.dropFrames)?10:NaN;config=Ext.applyIf(config||this.outputConfig||{},{xtype:'gxp_playbacktoolbar',mapPanel:this.target.mapPanel,playbackMode:this.playbackMode,looped:this.looped,autoPlay:this.autoStart,optionsWindow:new Ext.Window({title:gxp.PlaybackOptionsPanel.prototype.titleText,width:350,height:425,layout:'fit',items:[{xtype:'gxp_playbackoptions'}],closeable:true,closeAction:'hide',renderTo:Ext.getBody(),listeners:{'show':function(cmp){var optsPanel=cmp.findByType('gxp_playbackoptions')[0];optsPanel.fireEvent('show',optsPanel);},'hide':function(cmp){var optsPanel=cmp.findByType('gxp_playbackoptions')[0];optsPanel.fireEvent('hide',optsPanel);}}})});var toolbar=gxp.plugins.Playback.superclass.addOutput.call(this,config);this.relayEvents(toolbar,['timechange','rangemodified']);this.playbackToolbar=toolbar;if(toolbar.control.layers){this.fireEvent('rangemodified',this,toolbar.control.range);}
return toolbar;},addActions:function(actions){this._ready=0;this.target.mapPanel.map.events.register('addlayer',this,function(e){var layer=e.layer;if(layer instanceof OpenLayers.Layer.WMS&&layer.dimensions&&layer.dimensions.time){this.target.mapPanel.map.events.unregister('addlayer',this,arguments.callee);this._ready+=1;if(this._ready>1){this.addOutput();}}});this.target.on('ready',function(){this._ready+=1;if(this._ready>1){this.addOutput();}},this);},setTime:function(time){return this.playbackToolbar.setTime(time);},getState:function(){var config=gxp.plugins.Playback.superclass.getState.call(this);var toolbar=this.playbackToolbar;if(toolbar){var control=toolbar.control;config.outputConfig=Ext.apply(toolbar.initialConfig,{dynamicRange:toolbar.dyanamicRange,playbackMode:toolbar.playbackMode});if(control){config.outputConfig.controlConfig={range:control.range,step:control.step,units:(control.units)?control.units:undefined,loop:control.loop,snapToIntervals:control.snapToIntervals};if(control.timeAgents.length>1){var agents=control.timeAgents;var agentConfigs=[];for(var i=0;i<agents.length;i++){var agentConfig={type:agents[i].CLASS_NAME.split("TimeAgent.")[1],rangeMode:agents[i].rangeMode,rangeInterval:agents[i].rangeInterval,intervals:agents[i].intervals,layers:[]};for(var j=0;j<agents[i].layers.length;j++){var layerRec=this.target.mapPanel.layers.getByLayer(agents[i].layers[j]);var layerConfig=this.target.layerSources[layerRec.get('source')].getConfigForRecord(layerRec);agentConfig.layers.push(layerConfig);}
agentConfigs.push(agentConfig);}
config.outputConfig.controlConfig.timeAgents=agentConfigs;}}
delete config.outputConfig.mapPanel;delete config.outputConfig.optionsWindow;}
return config;}});Ext.preg(gxp.plugins.Playback.prototype.ptype,gxp.plugins.Playback);GeoExt.Lang.add("es",{"gxp.menu.LayerMenu.prototype":{layerText:"Capa"},"gxp.plugins.AddLayers.prototype":{addActionMenuText:"Añadir Capas",addActionTip:"Añadir Capas",addServerText:"Añadir servidor",addButtonText:"Añadir Capas",untitledText:"Sin Título",addLayerSourceErrorText:"Error obteniendo capabilities de WMS ({msg}).\nPor favor, compruebe la URL y vuelva a intentarlo.",availableLayersText:"Capas disponibles",expanderTemplateText:"<p><b>Resumen:</b> {abstract}</p>",panelTitleText:"Título",layerSelectionText:"Ver datos disponibles de:",doneText:"Hecho",uploadText:"Subir Datos"},"gxp.plugins.BingSource.prototype":{title:"Capas Bing",roadTitle:"Bing Carreteras",aerialTitle:"Bing Foto Aérea",labeledAerialTitle:"Bing Híbrido"},"gxp.plugins.FeatureEditor.prototype":{splitButtonText:"Edit",createFeatureActionText:"Create",editFeatureActionText:"Modify",createFeatureActionTip:"Crear nuevo elemento",editFeatureActionTip:"Editar elemento existente"},"gxp.plugins.FeatureGrid.prototype":{displayFeatureText:"Mostrar en el mapa",firstPageTip:"Primera página",previousPageTip:"Página anterior",zoomPageExtentTip:"Zoom a la extensión de la página",nextPageTip:"Página siguiente",lastPageTip:"Última página",totalMsg:"Features {1} to {2} of {0}"},"gxp.plugins.GoogleEarth.prototype":{menuText:"Vista 3D",tooltip:"Vista 3D"},"gxp.plugins.GoogleSource.prototype":{title:"Capas Google",roadmapAbstract:"Mostrar Callejero",satelliteAbstract:"Mostrar imágenes aéreas",hybridAbstract:"Mostrar imágenes con nombres de calle",terrainAbstract:"Mostrar callejero con terreno"},"gxp.plugins.LayerProperties.prototype":{menuText:"Propiedades de la capa",toolTip:"Propiedades de la capa"},"gxp.plugins.LayerTree.prototype":{shortTitle:"Capas",rootNodeText:"Capas",overlayNodeText:"Capas superpuestas",baseNodeText:"Capa base"},"gxp.plugins.LayerManager.prototype":{baseNodeText:"Capa base"},"gxp.plugins.Legend.prototype":{menuText:"Leyenda",tooltip:"Leyenda"},"gxp.plugins.LoadingIndicator.prototype":{loadingMapMessage:"Loading Map..."},"gxp.plugins.MapBoxSource.prototype":{title:"MapBox Layers",blueMarbleTopoBathyJanTitle:"Blue Marble Topography & Bathymetry (January)",blueMarbleTopoBathyJulTitle:"Blue Marble Topography & Bathymetry (July)",blueMarbleTopoJanTitle:"Blue Marble Topography (January)",blueMarbleTopoJulTitle:"Blue Marble Topography (July)",controlRoomTitle:"Control Room",geographyClassTitle:"Geography Class",naturalEarthHypsoTitle:"Natural Earth Hypsometric",naturalEarthHypsoBathyTitle:"Natural Earth Hypsometric & Bathymetry",naturalEarth1Title:"Natural Earth I",naturalEarth2Title:"Natural Earth II",worldDarkTitle:"World Dark",worldLightTitle:"World Light",worldPrintTitle:"World Print"},"gxp.plugins.Measure.prototype":{buttonText:"Medir",lengthMenuText:"Longitud",areaMenuText:"Área",lengthTooltip:"Medir Longitud",areaTooltip:"Medir Área",measureTooltip:"Medir"},"gxp.plugins.Navigation.prototype":{menuText:"Desplazar mapa",tooltip:"Desplazar mapa"},"gxp.plugins.NavigationHistory.prototype":{previousMenuText:"Vista anterior",nextMenuText:"Vista siguiente",previousTooltip:"Vista anterior",nextTooltip:"Vista siguiente"},"gxp.plugins.OSMSource.prototype":{title:"Capas OpenStreetMap",mapnikAttribution:"&copy; <a href='http://www.openstreetmap.org/copyright'>OpenStreetMap</a> contributors",osmarenderAttribution:"Datos CC-By-SA de <a href='http://openstreetmap.org/'>OpenStreetMap</a>"},"gxp.plugins.Print.prototype":{buttonText:"Imprimir",menuText:"Imprimir mapa",tooltip:"Imprimir mapa",previewText:"Vista previa",notAllNotPrintableText:"No se pueden imprimir todas las capas",nonePrintableText:"No se puede imprimir ninguna de las capas del mapa"},"gxp.plugins.MapQuestSource.prototype":{title:"Capas MapQuest",osmAttribution:"Teselas cortesía de <a href='http://open.mapquest.co.uk/' target='_blank'>MapQuest</a> <img src='http://developer.mapquest.com/content/osm/mq_logo.png' border='0'>",osmTitle:"MapQuest OpenStreetMap",naipAttribution:"Teselas cortesía de <a href='http://open.mapquest.co.uk/' target='_blank'>MapQuest</a> <img src='http://developer.mapquest.com/content/osm/mq_logo.png' border='0'>",naipTitle:"MapQuest Imágenes"},"gxp.plugins.QueryForm.prototype":{queryActionText:"Consultar",queryMenuText:"Consultar capa",queryActionTip:"Consultar la capa seleccionada",queryByLocationText:"Query by current map extent",queryByAttributesText:"Consultar por atributos",queryMsg:"Consultando...",cancelButtonText:"Cancelar",noFeaturesTitle:"Sin coincidencias",noFeaturesMessage:"Su consulta no produjo resultados."},"gxp.plugins.RemoveLayer.prototype":{removeMenuText:"Eliminar Capa",removeActionTip:"Eliminar Capa"},"gxp.plugins.Styler.prototype":{menuText:"Editar estilos",tooltip:"Gestionar estilos de capa"},"gxp.plugins.WMSGetFeatureInfo.prototype":{buttonText:"Identify",infoActionTip:"Consultar elementos",popupTitle:"Información de elementos"},"gxp.plugins.Zoom.prototype":{zoomMenuText:"Zoom Box",zoomInMenuText:"Acercar",zoomOutMenuText:"Alejar",zoomTooltip:"Zoom by dragging a box",zoomInTooltip:"Acercar",zoomOutTooltip:"Alejar"},"gxp.plugins.ZoomToExtent.prototype":{menuText:"Ver extensión total",tooltip:"Ver extensión total"},"gxp.plugins.ZoomToDataExtent.prototype":{menuText:"Ver toda la capa",tooltip:"Ver toda la capa"},"gxp.plugins.ZoomToLayerExtent.prototype":{menuText:"Ver toda la la capa",tooltip:"Ver toda la capa"},"gxp.plugins.ZoomToSelectedFeatures.prototype":{menuText:"Ver los elementos seleccionados",tooltip:"Ver los elementos seleccionados"},"gxp.FeatureEditPopup.prototype":{closeMsgTitle:"¿Desea guardar los cambios?",closeMsg:"Los cambios en este elemento no se han guardado. ¿Desea guardar los cambios?",deleteMsgTitle:"¿Desea borrar el elemento?",deleteMsg:"¿Está seguro de querer borrar este elemento?",editButtonText:"Editar",editButtonTooltip:"Hacer editable este elemento",deleteButtonText:"Borrar",deleteButtonTooltip:"Borrar este elemento",cancelButtonText:"Cancelar",cancelButtonTooltip:"Dejar de editar, descartar cambios",saveButtonText:"Guardar",saveButtonTooltip:"Guardar cambios"},"gxp.FillSymbolizer.prototype":{fillText:"Relleno",colorText:"Color",opacityText:"Opacidad"},"gxp.FilterBuilder.prototype":{builderTypeNames:["cualquiera de","todas","ninguna de","no todas"],preComboText:"Cumplir",postComboText:"las condiciones siguientes:",addConditionText:"añadir condición",addGroupText:"añadir grupo",removeConditionText:"eliminar condición"},"gxp.grid.CapabilitiesGrid.prototype":{nameHeaderText:"Nombre",titleHeaderText:"Título",queryableHeaderText:"Consultable",layerSelectionLabel:"Ver datos disponibles de:",layerAdditionLabel:"o añadir otro servidor.",expanderTemplateText:"<p><b>Resumen:</b> {abstract}</p>"},"gxp.PointSymbolizer.prototype":{graphicCircleText:"círculo",graphicSquareText:"cuadrado",graphicTriangleText:"triángulo",graphicStarText:"estrella",graphicCrossText:"cruz",graphicXText:"x",graphicExternalText:"externo",urlText:"URL",opacityText:"opacidad",symbolText:"Símbolo",sizeText:"Tamaño",rotationText:"Giro"},"gxp.QueryPanel.prototype":{queryByLocationText:"Consultar por localización",currentTextText:"Extensión actual",queryByAttributesText:"Consultar por atributo",layerText:"Capa"},"gxp.RulePanel.prototype":{scaleSliderTemplate:"{scaleType} Escala 1:{scale}",labelFeaturesText:"Etiquetado de elementos",labelsText:"Etiquetas",basicText:"Básico",advancedText:"Advanzado",limitByScaleText:"Limitar por escala",limitByConditionText:"Limitar por condición",symbolText:"Símbolo",nameText:"Nombre"},"gxp.ScaleLimitPanel.prototype":{scaleSliderTemplate:"{scaleType} Escala 1:{scale}",minScaleLimitText:"Escala mínima",maxScaleLimitText:"Escala máxima"},"gxp.StrokeSymbolizer.prototype":{solidStrokeName:"continuo",dashStrokeName:"guiones",dotStrokeName:"puntos",titleText:"Trazo",styleText:"Estilo",colorText:"Color",widthText:"Ancho",opacityText:"Opacidad"},"gxp.StylePropertiesDialog.prototype":{titleText:"General",nameFieldText:"Nombre",titleFieldText:"Título",abstractFieldText:"Resumen"},"gxp.TextSymbolizer.prototype":{labelValuesText:"Etiquetado",haloText:"Halo",sizeText:"Tamaño"},"gxp.WMSLayerPanel.prototype":{aboutText:"Acerca de",titleText:"Título",nameText:"Nombre",descriptionText:"Descripción",displayText:"Mostrar",opacityText:"Opacidad",formatText:"Formato",transparentText:"Transparente",cacheText:"Caché",cacheFieldText:"Usar la versión en caché",stylesText:"Estilos",infoFormatText:"Info format",infoFormatEmptyText:"Select a format"},"gxp.EmbedMapDialog.prototype":{publishMessage:"¡Ya puede publicar su mapa en otras webs! Simplemente copie el siguiente código HTML en el lugar donde desee incrustarlo:",heightLabel:'Alto',widthLabel:'Ancho',mapSizeLabel:'Tamaño',miniSizeLabel:'Mínimo',smallSizeLabel:'Pequeño',premiumSizeLabel:'Premium',largeSizeLabel:'Grande'},"gxp.WMSStylesDialog.prototype":{addStyleText:"Añadir",addStyleTip:"Añadir un estilo",chooseStyleText:"Escoger estilo",deleteStyleText:"Quitar",deleteStyleTip:"Borrar el estilo seleccionado",editStyleText:"Cambiar",editStyleTip:"Editar el estilo seleccionado",duplicateStyleText:"Clonar",duplicateStyleTip:"Duplicar el estilo seleccionado",addRuleText:"Añadir",addRuleTip:"Añadir una regla",newRuleText:"Nueva regla",deleteRuleText:"Quitar",deleteRuleTip:"Borrar la regla seleccionada",editRuleText:"Cambiar",editRuleTip:"Editar la regla seleccionada",duplicateRuleText:"Duplicar",duplicateRuleTip:"Duplicar la regla seleccionada",cancelText:"Cancelar",saveText:"Guardar",styleWindowTitle:"Estilo: {0}",ruleWindowTitle:"Regla: {0}",stylesFieldsetTitle:"Estilos",rulesFieldsetTitle:"Reglas"},"gxp.LayerUploadPanel.prototype":{titleLabel:"Título",titleEmptyText:"Título de la capa",abstractLabel:"Descripción",abstractEmptyText:"Descripción de la capa",fileLabel:"Datos",fieldEmptyText:"Navegue por los datos...",uploadText:"Subir",waitMsgText:"Suba sus datos data...",invalidFileExtensionText:"El fichero debe tener alguna de estas extensiones: ",optionsText:"Opciones",workspaceLabel:"Espacio de trabajo",workspaceEmptyText:"Espacio de trabajo por defecto",dataStoreLabel:"Almacén de datos",dataStoreEmptyText:"Create new store",defaultDataStoreEmptyText:"Almacén de datos por defecto"},"gxp.NewSourceDialog.prototype":{title:"Añadir Servidor...",cancelText:"Cancelar",addServerText:"Añadir Servidor",invalidURLText:"Enter a valid URL to a WMS endpoint (e.g. http://example.com/geoserver/wms)",contactingServerText:"Conectando con el Servidor..."},"gxp.ScaleOverlay.prototype":{zoomLevelText:"Escala"}});GeoExt.Lang.add("ca",{"gxp.menu.LayerMenu.prototype":{layerText:"Capa"},"gxp.plugins.AddLayers.prototype":{addActionMenuText:"Afegeix Capes",addActionTip:"Afegeix Capes",addServerText:"Afegeix servidor",addButtonText:"Afegeix Capes",untitledText:"Sense Títol",addLayerSourceErrorText:"Error obtenint les capabilities del WMS ({msg}).\nSi us plau, comproveu la URL i torneu-ho a intentar.",availableLayersText:"Capes disponibles",expanderTemplateText:"<p><b>Resum:</b> {abstract}</p>",panelTitleText:"Títol",layerSelectionText:"Veure dades disponibles de:",doneText:"Fet",uploadText:"Puja dades"},"gxp.plugins.BingSource.prototype":{title:"Capes Bing",roadTitle:"Bing Carrerer",aerialTitle:"Bing Fotografia Aèria",labeledAerialTitle:"Bing Fotografia Aèria amb Etiquetes"},"gxp.plugins.FeatureEditor.prototype":{splitButtonText:"Edit",createFeatureActionText:"Create",editFeatureActionText:"Modify",createFeatureActionTip:"Crea nou element",editFeatureActionTip:"Edita element existent"},"gxp.plugins.FeatureGrid.prototype":{displayFeatureText:"Mostra al mapa",firstPageTip:"Primera pàgina",previousPageTip:"Pàgina anterior",zoomPageExtentTip:"Ajusta vista a l'extensió de la pàgina",nextPageTip:"Pàgina següent",lastPageTip:"Pàgina anterior",totalMsg:"Features {1} to {2} of {0}"},"gxp.plugins.GoogleEarth.prototype":{menuText:"Vista 3D",tooltip:"Vista 3D"},"gxp.plugins.GoogleSource.prototype":{title:"Capes Google",roadmapAbstract:"Mostra carrerer",satelliteAbstract:"Mostra imatges de satèl·lit",hybridAbstract:"Mostra imatges amb noms de carrer",terrainAbstract:"Mostra carrerer amb terreny"},"gxp.plugins.LayerProperties.prototype":{menuText:"Propietats de la capa",toolTip:"Propietats de la capa"},"gxp.plugins.LayerTree.prototype":{shortTitle:"Capes",rootNodeText:"Capes",overlayNodeText:"Capes addicionals",baseNodeText:"Capa base"},"gxp.plugins.LayerManager.prototype":{baseNodeText:"Capa base"},"gxp.plugins.Legend.prototype":{menuText:"Mostra Llegenda",tooltip:"Mostra Llegenda"},"gxp.plugins.LoadingIndicator.prototype":{loadingMapMessage:"Loading Map..."},"gxp.plugins.MapBoxSource.prototype":{title:"MapBox Layers",blueMarbleTopoBathyJanTitle:"Blue Marble Topography & Bathymetry (January)",blueMarbleTopoBathyJulTitle:"Blue Marble Topography & Bathymetry (July)",blueMarbleTopoJanTitle:"Blue Marble Topography (January)",blueMarbleTopoJulTitle:"Blue Marble Topography (July)",controlRoomTitle:"Control Room",geographyClassTitle:"Geography Class",naturalEarthHypsoTitle:"Natural Earth Hypsometric",naturalEarthHypsoBathyTitle:"Natural Earth Hypsometric & Bathymetry",naturalEarth1Title:"Natural Earth I",naturalEarth2Title:"Natural Earth II",worldDarkTitle:"World Dark",worldLightTitle:"World Light",worldPrintTitle:"World Print"},"gxp.plugins.Measure.prototype":{buttonText:"Mesura",lengthMenuText:"Longitud",areaMenuText:"Àrea",lengthTooltip:"Mesura Longitud",areaTooltip:"Mesura Àrea",measureTooltip:"Mesura"},"gxp.plugins.Navigation.prototype":{menuText:"Desplaça mapa",tooltip:"Desplaça mapa"},"gxp.plugins.NavigationHistory.prototype":{previousMenuText:"Vista anterior",nextMenuText:"Vista següent",previousTooltip:"Vista anterior",nextTooltip:"Vista següent"},"gxp.plugins.OSMSource.prototype":{title:"Capes OpenStreetMap",mapnikAttribution:"&copy; <a href='http://www.openstreetmap.org/copyright'>OpenStreetMap</a> contributors",osmarenderAttribution:"Daded CC-By-SA de <a href='http://openstreetmap.org/'>OpenStreetMap</a>"},"gxp.plugins.Print.prototype":{buttonText:"Imprimeix",menuText:"Imprimeix mapa",tooltip:"Imprimeix mapa",previewText:"Vista prèvia",notAllNotPrintableText:"No es poden imprimir totes les capes",nonePrintableText:"No es pot imprimir cap de les capes del mapa"},"gxp.plugins.MapQuestSource.prototype":{title:"MapQuest Layers",osmAttribution:"Tessel·les cortesia de <a href='http://open.mapquest.co.uk/' target='_blank'>MapQuest</a> <img src='http://developer.mapquest.com/content/osm/mq_logo.png' border='0'>",osmTitle:"MapQuest OpenStreetMap",naipAttribution:"Tessel·les cortesia de <a href='http://open.mapquest.co.uk/' target='_blank'>MapQuest</a> <img src='http://developer.mapquest.com/content/osm/mq_logo.png' border='0'>",naipTitle:"MapQuest Imatge"},"gxp.plugins.QueryForm.prototype":{queryActionText:"Consulta",queryMenuText:"Consulta layer",queryActionTip:"Consulta la capa sel·leccionada",queryByLocationText:"Query by current map extent",queryByAttributesText:"Consulta per atributs",queryMsg:"Consultant...",cancelButtonText:"Cancel·la",noFeaturesTitle:"Sense coincidències",noFeaturesMessage:"La vostra consulta no ha produït resultats."},"gxp.plugins.RemoveLayer.prototype":{removeMenuText:"Elimina Capa",removeActionTip:"Elimina Capa"},"gxp.plugins.Styler.prototype":{menuText:"Edita Estils",tooltip:"Gestiona els estils de les capes"},"gxp.plugins.WMSGetFeatureInfo.prototype":{buttonText:"Identify",infoActionTip:"Consulta elements",popupTitle:"Informació dels elements"},"gxp.plugins.Zoom.prototype":{zoomMenuText:"Zoom Box",zoomInMenuText:"Apropa",zoomOutMenuText:"Allunya",zoomTooltip:"Zoom by dragging a box",zoomInTooltip:"Apropa",zoomOutTooltip:"Allunya"},"gxp.plugins.ZoomToExtent.prototype":{menuText:"Mostra l'extensió total",tooltip:"Mostra l'extensió total"},"gxp.plugins.ZoomToDataExtent.prototype":{menuText:"Mostra tota la capa",tooltip:"Mostra tota la capa"},"gxp.plugins.ZoomToLayerExtent.prototype":{menuText:"Mostra tota la capa",tooltip:"Mostra tota la capa"},"gxp.plugins.ZoomToSelectedFeatures.prototype":{menuText:"Mostra els elements seleccionats",tooltip:"Mostra els elements seleccionats"},"gxp.FeatureEditPopup.prototype":{closeMsgTitle:"Desitgeu desar els canvis?",closeMsg:"Els canvis en aquest element no s'han desat. Desitja desar-los?",deleteMsgTitle:"Desitgeu esborrar l'element?",deleteMsg:"Esteu segurs de voler esborrar aquest element?",editButtonText:"Edita",editButtonTooltip:"Fes que aquest element sigui editable",deleteButtonText:"Esborra",deleteButtonTooltip:"Esborra aquest element",cancelButtonText:"Cancel·la",cancelButtonTooltip:"Deixa d'editar, descarta els canvis",saveButtonText:"Desa",saveButtonTooltip:"Desa els canvis"},"gxp.FillSymbolizer.prototype":{fillText:"Farcit",colorText:"Color",opacityText:"Opacitat"},"gxp.FilterBuilder.prototype":{builderTypeNames:["alguna de","totes","cap de","no totes"],preComboText:"Acompleix",postComboText:"les condicions següents:",addConditionText:"afegeix condició",addGroupText:"afegeix grup",removeConditionText:"treu condició"},"gxp.grid.CapabilitiesGrid.prototype":{nameHeaderText:"Nom",titleHeaderText:"Títol",queryableHeaderText:"Consultable",layerSelectionLabel:"Llista les capes de:",layerAdditionLabel:"o afegeix un altre servidor.",expanderTemplateText:"<p><b>Resum:</b> {abstract}</p>"},"gxp.PointSymbolizer.prototype":{graphicCircleText:"cercle",graphicSquareText:"quadrat",graphicTriangleText:"triangle",graphicStarText:"estrella",graphicCrossText:"creu",graphicXText:"x",graphicExternalText:"extern",urlText:"URL",opacityText:"opacitat",symbolText:"Símbol",sizeText:"Mides",rotationText:"Gir"},"gxp.QueryPanel.prototype":{queryByLocationText:"Consulta per lloc",currentTextText:"Vista actual",queryByAttributesText:"Consulta per atributs",layerText:"Capa"},"gxp.RulePanel.prototype":{scaleSliderTemplate:"{scaleType} Escala 1:{scale}",labelFeaturesText:"Etiqueta elements",labelsText:"Etiquetes",basicText:"Bàsic",advancedText:"Avançat",limitByScaleText:"Restringeix per escala",limitByConditionText:"Restringeix per condició",symbolText:"Símbol",nameText:"Nom"},"gxp.ScaleLimitPanel.prototype":{scaleSliderTemplate:"{scaleType} Escala 1:{scale}",minScaleLimitText:"Escala mínima",maxScaleLimitText:"Escala màxima"},"gxp.StrokeSymbolizer.prototype":{solidStrokeName:"continu",dashStrokeName:"guions",dotStrokeName:"punts",titleText:"Traç",styleText:"Estil",colorText:"Color",widthText:"Amplada",opacityText:"Opacitad"},"gxp.StylePropertiesDialog.prototype":{titleText:"General",nameFieldText:"Nom",titleFieldText:"Títol",abstractFieldText:"Resum"},"gxp.TextSymbolizer.prototype":{labelValuesText:"Etiquetatge",haloText:"Halo",sizeText:"Mida"},"gxp.WMSLayerPanel.prototype":{aboutText:"Quant a",titleText:"Títol",nameText:"Nom",descriptionText:"Descripció",displayText:"Mostra",opacityText:"Opacitat",formatText:"Format",transparentText:"Transparent",cacheText:"Caché",cacheFieldText:"Utiliza la versió en caché",stylesText:"Estils",infoFormatText:"Info format",infoFormatEmptyText:"Select a format"},"gxp.EmbedMapDialog.prototype":{publishMessage:"Ja podeu incloure el vostre mapa a altres webs! Simplement copieu el següent codi HTML allà on desitgeu incrustar-ho:",heightLabel:'Alçària',widthLabel:'Amplada',mapSizeLabel:'Mida',miniSizeLabel:'Mínima',smallSizeLabel:'Petita',premiumSizeLabel:'Premium',largeSizeLabel:'Gran'},"gxp.WMSStylesDialog.prototype":{addStyleText:"Afegeix",addStyleTip:"Afegeix nou estil",chooseStyleText:"Escull estil",deleteStyleText:"Treu",deleteStyleTip:"Esborra l'estil sel·leccionat",editStyleText:"Canvia",editStyleTip:"Edita l'estil sel·leccionat",duplicateStyleText:"Clona",duplicateStyleTip:"Duplica l'estil sel·leccionat",addRuleText:"Afegeix",addRuleTip:"Afegeix nova regla",newRuleText:"Nova regla",deleteRuleText:"Treu",deleteRuleTip:"Esborra la regla sel·leccionada",editRuleText:"Edita",editRuleTip:"Edita la regla sel·leccionada",duplicateRuleText:"Clona",duplicateRuleTip:"Duplica la regla sel·leccionada",cancelText:"Cancel·la",saveText:"Desa",styleWindowTitle:"Estil: {0}",ruleWindowTitle:"Regla: {0}",stylesFieldsetTitle:"Estils",rulesFieldsetTitle:"Regles"},"gxp.LayerUploadPanel.prototype":{titleLabel:"Títol",titleEmptyText:"Títol de la capa",abstractLabel:"Descripció",abstractEmptyText:"Descripció de la capa",fileLabel:"Dades",fieldEmptyText:"Navegueu per les dades...",uploadText:"Puja",waitMsgText:"Pugeu les vostres dades...",invalidFileExtensionText:"L'extensió del fitxer ha de ser alguna d'aquestes: ",optionsText:"Opcions",workspaceLabel:"Espai de treball",workspaceEmptyText:"Espai de treball per defecte",dataStoreLabel:"Magatzem",dataStoreEmptyText:"Create new store",defaultDataStoreEmptyText:"Magatzem de dades per defecte"},"gxp.NewSourceDialog.prototype":{title:"Afegeix Servidor...",cancelText:"Cancel·la",addServerText:"Afegeix Servidor",invalidURLText:"Enter a valid URL to a WMS endpoint (e.g. http://example.com/geoserver/wms)",contactingServerText:"Connectant amb el Servidor..."},"gxp.ScaleOverlay.prototype":{zoomLevelText:"Escala"}});GeoExt.Lang.add("fr",{"gxp.plugins.AddLayers.prototype":{addActionMenuText:"Ajouter des calques",addActionTip:"Ajouter des calques",addServerText:"Ajouter un nouveau serveur",untitledText:"Sans titre",addLayerSourceErrorText:"Impossible d'obtenir les capacités WMS ({msg}).\nVeuillez vérifier l'URL et essayez à nouveau.",availableLayersText:"Couches disponibles",doneText:"Terminé",uploadText:"Télécharger des données"},"gxp.plugins.BingSource.prototype":{title:"Calques Bing",roadTitle:"Bing routes",aerialTitle:"Bing images aériennes",labeledAerialTitle:"Bing images aériennes avec étiquettes"},"gxp.plugins.FeatureEditor.prototype":{splitButtonText:"Edit",createFeatureActionText:"Create",editFeatureActionText:"Modify",createFeatureActionTip:"Créer un nouvel objet",editFeatureActionTip:"Modifier un objet existant"},"gxp.plugins.FeatureGrid.prototype":{displayFeatureText:"Afficher sur la carte",firstPageTip:"Première page",previousPageTip:"Page précédente",zoomPageExtentTip:"Zoom sur la page",nextPageTip:"Page suivante",lastPageTip:"Dernière page",totalMsg:"Features {1} to {2} of {0}"},"gxp.plugins.GoogleEarth.prototype":{menuText:"Passer à la visionneuse 3D",tooltip:"Passer à la visionneuse 3D"},"gxp.plugins.GoogleSource.prototype":{title:"Calques Google",roadmapAbstract:"Carte routière",satelliteAbstract:"Images satellite",hybridAbstract:"Images avec routes",terrainAbstract:"Carte routière avec le terrain"},"gxp.plugins.LayerProperties.prototype":{menuText:"Propriétés de la couche",toolTip:"Propriétés de la couche"},"gxp.plugins.LayerTree.prototype":{shortTitle:"Layers",rootNodeText:"Layers",overlayNodeText:"Surimpressions",baseNodeText:"Couches"},"gxp.plugins.LayerManager.prototype":{baseNodeText:"Couche"},"gxp.plugins.Legend.prototype":{menuText:"Légende",tooltip:"Légende"},"gxp.plugins.Measure.prototype":{buttonText:"Mesure",lengthMenuText:"Longueur",areaMenuText:"Surface",lengthTooltip:"Mesure de longueur",areaTooltip:"Mesure de surface",measureTooltip:"Mesure"},"gxp.plugins.Navigation.prototype":{menuText:"Panner la carte",tooltip:"Panner la carte"},"gxp.plugins.NavigationHistory.prototype":{previousMenuText:"Position précédente",nextMenuText:"Position suivante",previousTooltip:"Position précédente",nextTooltip:"Position suivante"},"gxp.plugins.LoadingIndicator.prototype":{loadingMapMessage:"Chargement de la carte..."},"gxp.plugins.MapBoxSource.prototype":{title:"MapBox Layers",blueMarbleTopoBathyJanTitle:"Blue Marble Topography & Bathymetry (January)",blueMarbleTopoBathyJulTitle:"Blue Marble Topography & Bathymetry (July)",blueMarbleTopoJanTitle:"Blue Marble Topography (January)",blueMarbleTopoJulTitle:"Blue Marble Topography (July)",controlRoomTitle:"Control Room",geographyClassTitle:"Geography Class",naturalEarthHypsoTitle:"Natural Earth Hypsometric",naturalEarthHypsoBathyTitle:"Natural Earth Hypsometric & Bathymetry",naturalEarth1Title:"Natural Earth I",naturalEarth2Title:"Natural Earth II",worldDarkTitle:"World Dark",worldLightTitle:"World Light",worldPrintTitle:"World Print"},"gxp.plugins.OSMSource.prototype":{title:"Calques OpenStreetMap",mapnikAttribution:"&copy; <a href='http://www.openstreetmap.org/copyright'>OpenStreetMap</a> contributors",osmarenderAttribution:"Données CC-By-SA par <a href='http://openstreetmap.org/'>OpenStreetMap</a>"},"gxp.plugins.Print.prototype":{buttonText:"Imprimer",menuText:"Imprimer la carte",tooltip:"Imprimer la carte",previewText:"Aperçu avant impression",notAllNotPrintableText:"Non, toutes les couches peuvent être imprimées",nonePrintableText:"Aucune de vos couches ne peut être imprimée"},"gxp.plugins.MapQuestSource.prototype":{title:"MapQuest Layers",osmAttribution:"Avec la permission de tuiles <a href='http://open.mapquest.co.uk/' target='_blank'>MapQuest</a> <img src='http://developer.mapquest.com/content/osm/mq_logo.png' border='0'>",osmTitle:"MapQuest OpenStreetMap",naipAttribution:"Avec la permission de tuiles <a href='http://open.mapquest.co.uk/' target='_blank'>MapQuest</a> <img src='http://developer.mapquest.com/content/osm/mq_logo.png' border='0'>",naipTitle:"MapQuest Imagery"},"gxp.plugins.QueryForm.prototype":{queryActionText:"Interrogation",queryMenuText:"Couche de requêtes",queryActionTip:"Interroger la couche sélectionnée",queryByLocationText:"Query by current map extent",queryByAttributesText:"Requête par attributs"},"gxp.plugins.RemoveLayer.prototype":{removeMenuText:"Enlever la couche",removeActionTip:"Enlever la couche"},"gxp.plugins.WMSGetFeatureInfo.prototype":{buttonText:"Identify",infoActionTip:"Get Feature Info",popupTitle:"Info sur l'objet"},"gxp.plugins.Zoom.prototype":{zoomMenuText:"Zoom Box",zoomInMenuText:"Zoom avant",zoomOutMenuText:"Zoom arrière",zoomTooltip:"Zoom by dragging a box",zoomInTooltip:"Zoom avant",zoomOutTooltip:"Zoom arrière"},"gxp.plugins.ZoomToExtent.prototype":{menuText:"Zoomer sur la carte max",tooltip:"Zoomer sur la carte max"},"gxp.plugins.ZoomToDataExtent.prototype":{menuText:"Zoomer sur la couche",tooltip:"Zoomer sur la couche"},"gxp.plugins.ZoomToLayerExtent.prototype":{menuText:"Zoomer sur la couche",tooltip:"Zoomer sur la couche"},"gxp.plugins.ZoomToSelectedFeatures.prototype":{menuText:"Zoomer sur les objets sélectionnés",tooltip:"Zoomer sur les objets sélectionnés"},"gxp.FeatureEditPopup.prototype":{closeMsgTitle:"Enregistrer les modifications ?",closeMsg:"Cet objet a des modifications non enregistrées. Voulez-vous enregistrer vos modifications ?",deleteMsgTitle:"Supprimer l'objet ?",deleteMsg:"Etes-vous sûr de vouloir supprimer cet objet ?",editButtonText:"Modifier",editButtonTooltip:"Modifier cet objet",deleteButtonText:"Supprimer",deleteButtonTooltip:"Supprimer cet objet",cancelButtonText:"Annuler",cancelButtonTooltip:"Arrêter de modifier, annuler les modifications",saveButtonText:"Enregistrer",saveButtonTooltip:"Enregistrer les modifications"},"gxp.FillSymbolizer.prototype":{fillText:"Remplir",colorText:"Couleur",opacityText:"Opacité"},"gxp.FilterBuilder.prototype":{builderTypeNames:["Tout","tous","aucun","pas tout"],preComboText:"Match",postComboText:"de ce qui suit:",addConditionText:"Ajouter la condition",addGroupText:"Ajouter un groupe",removeConditionText:"Supprimer la condition"},"gxp.grid.CapabilitiesGrid.prototype":{nameHeaderText:"Nom",titleHeaderText:"Titre",queryableHeaderText:"Interrogeable",layerSelectionLabel:"Voir les données disponibles à partir de :",layerAdditionLabel:"ou ajouter un nouveau serveur.",expanderTemplateText:"<p><b>Résumé:</b> {abstract}</p>"},"gxp.PointSymbolizer.prototype":{graphicCircleText:"Cercle",graphicSquareText:"Carré",graphicTriangleText:"Triangle",graphicStarText:"Étoile",graphicCrossText:"Croix",graphicXText:"x",graphicExternalText:"Externe",urlText:"URL",opacityText:"Opacité",symbolText:"Symbole",sizeText:"Taille",rotationText:"Rotation"},"gxp.QueryPanel.prototype":{queryByLocationText:"Interrogation selon le lieu",currentTextText:"Mesure actuelle",queryByAttributesText:"Requête par attributs",layerText:"Calque"},"gxp.RulePanel.prototype":{scaleSliderTemplate:"{scaleType} échelle 1:{scale}",labelFeaturesText:"Label Caractéristiques",advancedText:"Avancé",limitByScaleText:"Limiter par l'échelle",limitByConditionText:"Limiter par condition",symbolText:"Symbole",nameText:"Nom"},"gxp.ScaleLimitPanel.prototype":{scaleSliderTemplate:"{scaleType} échelle 1:{scale}",maxScaleLimitText:"Échelle maximale"},"gxp.TextSymbolizer.prototype":{labelValuesText:"Label valeurs",haloText:"Halo",sizeText:"Taille"},"gxp.WMSLayerPanel.prototype":{aboutText:"A propos",titleText:"Titre",nameText:"Nom",descriptionText:"Description",displayText:"Affichage",opacityText:"Opacité",formatText:"Format",transparentText:"Transparent",cacheText:"Cache",cacheFieldText:"Utiliser la version mise en cache",infoFormatText:"Info format",infoFormatEmptyText:"Choisissez un format"},"gxp.EmbedMapDialog.prototype":{publishMessage:"Votre carte est prête à être publiée sur le web. Il suffit de copier le code HTML suivant pour intégrer la carte dans votre site Web :",heightLabel:'Hauteur',widthLabel:'Largeur',mapSizeLabel:'Taille de la carte',miniSizeLabel:'Mini',smallSizeLabel:'Petit',premiumSizeLabel:'Premium',largeSizeLabel:'Large'},"gxp.LayerUploadPanel.prototype":{titleLabel:"Titre",titleEmptyText:"Titre de la couche",abstractLabel:"Description",abstractEmptyText:"Description couche",fileLabel:"Données",fieldEmptyText:"Parcourir pour ...",uploadText:"Upload",waitMsgText:"Transfert de vos données ...",invalidFileExtensionText:"L'extension du fichier doit être : ",optionsText:"Options",workspaceLabel:"Espace de travail",workspaceEmptyText:"Espace de travail par défaut",dataStoreLabel:"Magasin de données",dataStoreEmptyText:"Create new store",defaultDataStoreEmptyText:"Magasin de données par défaut"},"gxp.NewSourceDialog.prototype":{title:"Ajouter un nouveau serveur...",cancelText:"Annuler",addServerText:"Ajouter un serveur",invalidURLText:"Indiquez l'URL valide d'un serveur WMS (e.g. http://example.com/geoserver/wms)",contactingServerText:"Interrogation du serveur..."},"gxp.ScaleOverlay.prototype":{zoomLevelText:"Niveau de zoom"}});