/*   Copyright 2006 - 2009 ETH Zurich 
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */
package ch.ethz.mxquery.contextConfig;

import java.util.TimeZone;

import ch.ethz.mxquery.datamodel.MXQueryDateTime;
import ch.ethz.mxquery.datamodel.MXQueryDayTimeDuration;
import ch.ethz.mxquery.datamodel.QName;
import ch.ethz.mxquery.exceptions.MXQueryException;
import ch.ethz.mxquery.model.VariableHolder;
import ch.ethz.mxquery.model.XDMIterator;
import ch.ethz.mxquery.xdmio.StoreSet;

public interface XQDynamicContext {

	/**
	 * Get the Context Position: the position of the context item 
	 * within the current context 
	 * @return -1 if not set, > 0 otherwise
	 */
	public abstract int getPosition();

	/**
	 * Set the Context Position: the position of the context item 
	 * within the current context 

	 * @param position the position to set, must be > 0
	 */
	public abstract void setPosition(int position);

	/**
	 * Set the value of this variable, implicitly creating/reusing stores if needed
	 * @param qname the variable name
	 * @param iter the iterator containing the XDM to set
	 * @param check if true, the non-existence of <code>name</code> causes an error, otherwise the variable is created
	 * @param resolve resolve/qualify name
	 * @throws MXQueryException
	 */
	public abstract void setVariableValue(QName qname, XDMIterator iter,
			boolean check, boolean resolve) throws MXQueryException;
	/**
	 * Set the value of this variable, implicitly creating/reusing stores if needed
	 * @param qname the variable name
	 * @param iter the iterator containing the XDM to set
	 * @throws MXQueryException
	 */
	public abstract void setVariableValue(QName qname, XDMIterator iter)
			throws MXQueryException;
	/**
	 * Bind the value of this variable directly to XDM instance generated by the iterator 
	 * @param qname the variable name
	 * @param iter the iterator containing the XDM to bind
	 * @throws MXQueryException
	 */
	public abstract void bindVariableValue(QName qname, XDMIterator iter) throws MXQueryException;
	/**
	 * Get the reference to the variable and its binding 
	 * @param qname the name of the variable
	 * @return a VariableHolder containing information about the variable and its binding
	 * @throws MXQueryException
	 */
	public abstract VariableHolder getVariable(QName qname)
			throws MXQueryException;
	/**
     * Get the reference to the variable and its binding 
	 * @param qname the name of the variable   
	 * @param resolve resolve the QName
	 * @return a VariableHolder containing information about the variable and its binding
	 * @throws MXQueryException
	 */
	public abstract VariableHolder getVariable(QName qname, boolean resolve)
			throws MXQueryException;
	/**
	 * Indicate that there are more users for this variable
	 * @param qname Variable name
	 * @throws MXQueryException
	 */
	public abstract void incVariableUse(QName qname) throws MXQueryException;

	/**
	 * Returns the store set for XQueryUpdate. 
	 * At the moment only one storeset without nesting is allows
	 */
	public abstract StoreSet getStores();

	/**
	 * Get the &quot;current&quot; time (the time that was current when
	 * {@link #setCurrentTime(MXQueryDateTime)} was called).
	 */
	public abstract MXQueryDateTime getCurrentTime() throws MXQueryException;

	/**
	 * Get the &quot;current&quot; time zone (at the time that was current when
	 * {@link #setCurrentTime(MXQueryDateTime)} was called).
	 */
	public abstract MXQueryDayTimeDuration getCurrentTimeZone()
			throws MXQueryException;

	/**
	 * Stores the current time in the context. This should be used once at the
	 * start of the execution of a query. It is stored here to ensure that all
	 * calls to getCurrentTime return the same value.
	 * @param dateTime the time to set as current time - if null, the current system time is used 
	 */
	public abstract void setCurrentTime(MXQueryDateTime dateTime);
	/**
	 * Set the current time zone
	 * @param tz a Time Zone
	 */
	public abstract void setCurrentTimeZone(TimeZone tz);

	public abstract VariableHolder getContextItem() throws MXQueryException;

	public abstract void setContextItem(XDMIterator iter) throws MXQueryException;

}