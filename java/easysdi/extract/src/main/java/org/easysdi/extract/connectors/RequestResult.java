/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.easysdi.extract.connectors;

import java.io.File;
import java.util.Calendar;
import org.easysdi.extract.connectors.common.IExportRequest;
import org.easysdi.extract.domain.Request;
import org.easysdi.extract.domain.Request.Status;



/**
 * Resulting data of a processed command.
 *
 * @author Yves Grasset
 */
public class RequestResult implements IExportRequest {

    /**
     * The name of the person that ordered the data.
     */
    private String client;

    /**
     * When the ordered data item processing ended.
     */
    private Calendar endDate;

    /**
     * The path of the directory that contains the input data to process the order. It must be relative to the
     * folder that contains the data for all the orders (as set in the application settings).
     */
    private String folderIn;

    /**
     * The path of the directory that contains the data generated by processing the order. It must be relative
     * to the folder that contains the data for all the orders (as set in the application settings).
     */
    private String folderOut;

    /**
     * The string that uniquely identifies the data order.
     */
    private String orderGuid;

    /**
     * The string that describes the data order.
     */
    private String orderLabel;

    /**
     * The non-standard parameters of the data item.
     */
    private String parameters;

    /**
     * The WKT string that delimits the area for the order.
     */
    private String perimeter;

    /**
     * The area of the order perimeter in square meters.
     */
    private Double surface;

    /**
     * The string that uniquely identifies the ordered data item.
     */
    private String productGuid;

    /**
     * The string that describes the ordered data item.
     */
    private String productLabel;

    /**
     * The string to return this.to the customer to give additional information about the processing of her
     * order.
     */
    private String remark;

    /**
     * <code>true</code> if the ordered data item could not be processed.
     */
    private boolean rejected;

    /**
     * When the processing of the data item started.
     */
    private Calendar startDate;

    /**
     * The state of the request process.
     */
    private String status;

    /**
     * The person or organism on behalf of whom the data have been ordered.
     */
    private String tiers;



    /**
     * Creates a new command result object.
     *
     * @param request  the request representing the processed command
     * @param basePath the root folder for requests output
     */
    public RequestResult(final Request request, final String basePath) {

        if (request == null) {
            throw new IllegalArgumentException("The request cannot be null.");
        }

        if (basePath == null) {
            throw new IllegalArgumentException("The base path cannot be null.");
        }

        File basePathFolder = new File(basePath);

        if (!basePathFolder.exists() || !basePathFolder.isDirectory() || !basePathFolder.isAbsolute()) {
            throw new IllegalArgumentException("The base path does not exist, is not accessible, is not a directory"
                    + " or is not absolute.");
        }

        this.setClient(request.getClient());
        this.setEndDate(request.getEndDate());

        if (request.getFolderIn() != null) {
            this.setFolderIn(new File(basePathFolder, request.getFolderIn()).getPath());
        }

        if (request.getFolderOut() != null) {
            this.setFolderOut(new File(basePathFolder, request.getFolderOut()).getPath());
        }

        this.setOrderGuid(request.getOrderGuid());
        this.setOrderLabel(request.getOrderLabel());
        this.setParameters(request.getParameters());
        this.setPerimeter(request.getPerimeter());
        this.setSurface(request.getSurface());
        this.setProductGuid(request.getProductGuid());
        this.setProductLabel(request.getProductLabel());
        this.setRejected(request.isRejected());
        this.setRemark(request.getRemark());
        this.setStartDate(request.getStartDate());
        this.setStatus(Status.FINISHED.name());
        this.setTiers(request.getTiers());
    }



    @Override
    public final String getOrderGuid() {
        return this.orderGuid;
    }



    /**
     * Defines the string that uniquely identifies the order that this product request is part of.
     *
     * @param guid the order GUID
     */
    public final void setOrderGuid(final String guid) {
        this.orderGuid = guid;
    }



    @Override
    public final String getProductGuid() {
        return this.productGuid;
    }



    /**
     * Defines the string that uniquely identifies the ordered data item that was processed.
     *
     * @param guid the product GUID
     */
    public final void setProductGuid(final String guid) {
        this.productGuid = guid;
    }



    @Override
    public final String getRemark() {
        return this.remark;
    }



    /**
     * Defines the string to return this.to the customer to provide additional information about the
     * process of this data item.
     *
     * @param resultRemark the remark
     */
    public final void setRemark(final String resultRemark) {
        this.remark = resultRemark;
    }



    @Override
    public final String getStatus() {
        return this.status;
    }



    /**
     * Defines the state of the data item processing.
     *
     * @param newStatus the new status of the request
     */
    public final void setStatus(final String newStatus) {
        this.status = newStatus;
    }



    @Override
    public final String getFolderOut() {
        return this.folderOut;
    }



    /**
     * Defines the path of the directory that contains the data generated by processing the order.
     *
     * @param outputDataFolder the path of the output folder relative to the folder that contains the data for all the
     *                         orders (as set in the application settings)
     */
    public final void setFolderOut(final String outputDataFolder) {
        this.folderOut = outputDataFolder;
    }



    @Override
    public final String getClient() {
        return this.client;
    }



    /**
     * Defines the name of the person that ordered the data item.
     *
     * @param customer the customer's name
     */
    public final void setClient(final String customer) {
        this.client = customer;
    }



    @Override
    public final Calendar getEndDate() {
        return this.endDate;
    }



    /**
     * Sets when the process of this data item ended. (It should be <code>null</code>.)
     *
     * @param end the date and time when the process ended
     */
    public final void setEndDate(final Calendar end) {
        this.endDate = end;
    }



    @Override
    public final String getFolderIn() {
        return this.folderIn;
    }



    /**
     * Defines the path of the directory that contains the input data to process the order.
     *
     * @param inputDataFolder the path of the input folder relative to the folder that contains the data for all the
     *                        orders (as set in the application settings)
     */
    public final void setFolderIn(final String inputDataFolder) {
        this.folderIn = inputDataFolder;
    }



    @Override
    public final String getOrderLabel() {
        return this.orderLabel;
    }



    /**
     * Defines the string that describes the order that this data item is part of.
     *
     * @param label the label of the order
     */
    public final void setOrderLabel(final String label) {
        this.orderLabel = label;
    }



    @Override
    public final String getParameters() {
        return this.parameters;
    }



    /**
     * Defines the additional parameters for this data item.
     *
     * @param parametersJson the parameters as a JSON string
     */
    public final void setParameters(final String parametersJson) {
        this.parameters = parametersJson;
    }



    @Override
    public final String getPerimeter() {
        return this.perimeter;
    }



    /**
     * Defines the geographic area of the requested data.
     *
     * @param perimeterArea a WKT polygon with WGS84 coordinates
     */
    public final void setPerimeter(final String perimeterArea) {
        this.perimeter = perimeterArea;
    }



    @Override
    public final Double getSurface() {
        return this.surface;
    }



    /**
     * Defines the area of the order perimeter.
     *
     * @param area the area in square meters
     */
    public final void setSurface(final Double area) {
        this.surface = area;
    }



    @Override
    public final String getProductLabel() {
        return this.productLabel;
    }



    /**
     * Defines the string that describes the requested data item.
     *
     * @param label the product label
     */
    public final void setProductLabel(final String label) {
        this.productLabel = label;
    }



    @Override
    public final Calendar getStartDate() {
        return this.startDate;
    }



    /**
     * Defines the time when processing this data item request started.
     *
     * @param start the start date
     */
    public final void setStartDate(final Calendar start) {
        this.startDate = start;
    }



    @Override
    public final String getTiers() {
        return this.tiers;
    }



    /**
     * Defines the name of the person that this data item was request on behalf of.
     *
     * @param thirdPartyName the name of the third-party. Can be <code>null</code>
     */
    public final void setTiers(final String thirdPartyName) {
        this.tiers = thirdPartyName;
    }



    @Override
    public final boolean isRejected() {
        return this.rejected;
    }



    /**
     * Determines whether this data item can be processed.
     *
     * @param isRejected <code>true</code> if processing this data item must be abandoned
     */
    public final void setRejected(final boolean isRejected) {
        this.rejected = isRejected;
    }

}
