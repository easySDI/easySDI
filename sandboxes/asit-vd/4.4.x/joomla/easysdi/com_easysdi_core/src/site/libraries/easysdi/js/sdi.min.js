
Ext.namespace("sdi.gxp.plugins");sdi.gxp.plugins.LayerTree=Ext.extend(gxp.plugins.LayerTree,{ptype:"sdi_gxp_layertree",createOutputConfig:function(){var treeRoot=new Ext.tree.TreeNode({text:this.rootNodeText,expanded:true,checked:false,isTarget:false,allowDrop:false,iconCls:"sdi-gxp-tree-node-root",listeners:{checkchange:function(node,checked){node.eachChild(function(n){n.getUI().toggleCheck(checked);});}}});var baseAttrs;if(this.initialConfig.loader&&this.initialConfig.loader.baseAttrs){baseAttrs=this.initialConfig.loader.baseAttrs;}
var defaultGroup=this.defaultGroup,plugin=this,groupConfig,exclusive;for(var group in this.groups){groupConfig=typeof this.groups[group]=="string"?{title:this.groups[group]}:this.groups[group];exclusive=groupConfig.exclusive;treeRoot.appendChild(new GeoExt.tree.LayerContainer(Ext.apply({text:groupConfig.title,iconCls:"gxp-folder",expanded:true,checked:false,group:group==this.defaultGroup?undefined:group,loader:new GeoExt.tree.LayerLoader({baseAttrs:exclusive?Ext.apply({checkedGroup:Ext.isString(exclusive)?exclusive:group},baseAttrs):baseAttrs,store:this.target.mapPanel.layers,filter:(function(group){return function(record){return(record.get("group")||defaultGroup)==group&&record.getLayer().displayInLayerSwitcher==true;};})(group),createNode:function(attr){plugin.configureLayerNode(this,attr);return GeoExt.tree.LayerLoader.prototype.createNode.apply(this,arguments);}}),singleClickExpand:true,allowDrag:false,listeners:{append:function(tree,node){node.expand();},checkchange:function(node,checked){node.eachChild(function(n){n.getUI().toggleCheck(checked);});}}},groupConfig)));}
return{xtype:"treepanel",root:treeRoot,rootVisible:true,shortTitle:this.shortTitle,autoScroll:true,border:false,enableDD:true,selModel:new Ext.tree.DefaultSelectionModel({listeners:{beforeselect:this.handleBeforeSelect,scope:this}}),contextMenu:new Ext.menu.Menu({items:[]})};},});Ext.preg(sdi.gxp.plugins.LayerTree.prototype.ptype,sdi.gxp.plugins.LayerTree);Ext.namespace("sdi.gxp.plugins");sdi.gxp.plugins.Print=Ext.extend(gxp.plugins.Print,{ptype:"sdi_gxp_print",addActions:function(){if(this.printService!==null||this.printCapabilities!=null){var printProvider=new sdi.geoext.data.PrintProvider({capabilities:this.printCapabilities,url:this.printService,printurl:this.printURL,createurl:this.createURL,customParams:this.customParams,autoLoad:false,listeners:{beforedownload:function(provider,url){if(this.openInNewWindow===true){window.open(url);return false;}},beforeencodelegend:function(provider,jsonData,legend){if(legend&&legend.ptype==="gxp_layermanager"){var encodedLegends=[];var output=legend.output;if(output&&output[0]){output[0].getRootNode().cascade(function(node){if(node.component&&!node.component.hidden){var cmp=node.component;var encFn=this.encoders.legends[cmp.getXType()];encodedLegends=encodedLegends.concat(encFn.call(this,cmp,jsonData.pages[0].scale));}},provider);}
jsonData.legends=encodedLegends;return false;}},beforeprint:function(){printWindow.items.get(0).printMapPanel.layers.each(function(l){var params=l.get("layer").params;for(var p in params){if(params[p]instanceof Array){params[p]=params[p].join(",");}}});},loadcapabilities:function(){if(printButton){printButton.initialConfig.disabled=false;printButton.enable();}},print:function(){try{printWindow.close();}catch(err){}},printException:function(cmp,response){this.target.displayXHRTrouble&&this.target.displayXHRTrouble(response);},scope:this}});var actions=gxp.plugins.Print.superclass.addActions.call(this,[{menuText:this.menuText,buttonText:this.buttonText,tooltip:this.tooltip,iconCls:"gxp-icon-print",disabled:this.printCapabilities!==null?false:true,handler:function(){var supported=getPrintableLayers();if(supported.length>0){if(isGoogleLayerSelected()||isBingLayerSelected())
{var mes="";if(isGoogleLayerSelected())
{mes=mes+this.googleLayerCanNotBePrinted;}
if(isBingLayerSelected())
{mes=mes+this.bingLayerCanNotBePrinted;}
Ext.Msg.alert(this.someLayersNotPrintableText,mes,function(){var printWindow=createPrintWindow.call(this);showPrintWindow.call(this);return printWindow;},this);}
else
{var printWindow=createPrintWindow.call(this);showPrintWindow.call(this);return printWindow;}}else{if(isGoogleLayerSelected()||isBingLayerSelected())
{var mes="";if(isGoogleLayerSelected())
{mes=mes+this.googleLayerCanNotBePrinted;}
if(isBingLayerSelected())
{mes=mes+this.bingLayerCanNotBePrinted;}
Ext.Msg.alert(this.notAllNotPrintableText,mes);}
else
{Ext.Msg.alert(this.notAllNotPrintableText,this.nonePrintableText);}}},scope:this,listeners:{render:function(){printProvider.loadCapabilities();}}}]);var printButton=actions[0].items[0];var printWindow;function destroyPrintComponents(){if(printWindow){try{var panel=printWindow.items.first();panel.printMapPanel.printPage.destroy();}catch(err){}
printWindow=null;}}
var mapPanel=this.target.mapPanel;function getPrintableLayers(){var supported=[];mapPanel.layers.each(function(record){var layer=record.getLayer();if(isPrintable(layer)){supported.push(layer);}});return supported;}
function isGoogleLayerSelected(){var is=false;mapPanel.layers.each(function(record){var layer=record.getLayer();if(layer.getVisibility()===true&&layer instanceof OpenLayers.Layer.Google)
is=true;});return is;}
function isBingLayerSelected(){var is=false;mapPanel.layers.each(function(record){var layer=record.getLayer();if(layer.getVisibility()===true&&layer instanceof OpenLayers.Layer.Bing)
is=true;});return is;}
function isPrintable(layer){return layer.getVisibility()===true&&(layer instanceof OpenLayers.Layer.WMS||layer instanceof OpenLayers.Layer.OSM||layer instanceof OpenLayers.Layer.WMTS);}
function createPrintWindow(){var legend=null;if(this.includeLegend===true){var key,tool;for(key in this.target.tools){tool=this.target.tools[key];if(tool.ptype==="gxp_legend"){legend=tool.getLegendPanel();break;}}
if(legend===null){for(key in this.target.tools){tool=this.target.tools[key];if(tool.ptype==="gxp_layermanager"){legend=tool;break;}}}}
printWindow=new Ext.Window({title:this.previewText,modal:true,border:false,autoHeight:true,resizable:false,width:360,items:[new sdi.geoext.ux.PrintPreview({minWidth:336,mapTitle:this.target.about&&this.target.about["title"],comment:this.target.about&&this.target.about["abstract"],printMapPanel:{autoWidth:true,height:Math.min(420,Ext.get(document.body).getHeight()-150),limitScales:true,map:Ext.applyIf({controls:[new OpenLayers.Control.Navigation({zoomWheelEnabled:false,zoomBoxEnabled:false}),new OpenLayers.Control.PanPanel(),new OpenLayers.Control.ZoomPanel(),new OpenLayers.Control.Attribution()],eventListeners:{preaddlayer:function(evt){return isPrintable(evt.layer);}}},mapPanel.initialConfig.map),items:[{xtype:"gx_zoomslider",vertical:true,height:100,aggressive:true}],listeners:{afterlayout:function(evt){printWindow.setWidth(Math.max(360,this.getWidth()+24));printWindow.center();}}},printProvider:printProvider,includeLegend:this.includeLegend,legend:legend,sourceMap:mapPanel})],listeners:{beforedestroy:destroyPrintComponents}});return printWindow;}
function showPrintWindow(){printWindow.show();printWindow.setWidth(0);var tb=printWindow.items.get(0).items.get(0);var w=0;tb.items.each(function(item){if(item.getEl()){w+=item.getWidth();}});printWindow.setWidth(Math.max(printWindow.items.get(0).printMapPanel.getWidth(),w+20));printWindow.center();}
return actions;}}});Ext.preg(sdi.gxp.plugins.Print.prototype.ptype,sdi.gxp.plugins.Print);Ext.namespace("sdi.gxp.plugins");sdi.gxp.plugins.LayerManager=Ext.extend(sdi.gxp.plugins.LayerTree,{ptype:"sdi_gxp_layermanager",baseNodeText:"Base Maps",createOutputConfig:function(){var tree=sdi.gxp.plugins.LayerManager.superclass.createOutputConfig.apply(this,arguments);Ext.applyIf(tree,Ext.apply({cls:"gxp-layermanager-tree",lines:false,useArrows:true,plugins:[{ptype:"gx_treenodecomponent"}]},this.treeConfig));return tree;},configureLayerNode:function(loader,attr){sdi.gxp.plugins.LayerManager.superclass.configureLayerNode.apply(this,arguments);var legendXType;if(OpenLayers.Layer.WMS&&attr.layer instanceof OpenLayers.Layer.WMS){legendXType="gx_wmslegend";}else if(OpenLayers.Layer.Vector&&attr.layer instanceof OpenLayers.Layer.Vector){legendXType="gx_vectorlegend";}
if(legendXType){var baseParams;if(loader&&loader.baseAttrs&&loader.baseAttrs.baseParams){baseParams=loader.baseAttrs.baseParams;}
Ext.apply(attr,{component:{xtype:legendXType,hidden:!attr.layer.getVisibility(),baseParams:Ext.apply({transparent:true,format:"image/png",legend_options:"fontAntiAliasing:true;fontSize:11;fontName:Arial"},baseParams),layerRecord:this.target.mapPanel.layers.getByLayer(attr.layer),showTitle:false,cls:"legend"}});}}});Ext.preg(sdi.gxp.plugins.LayerManager.prototype.ptype,sdi.gxp.plugins.LayerManager);Ext.namespace("sdi.gxp.plugins");sdi.gxp.plugins.BingSource=Ext.extend(gxp.plugins.BingSource,{ptype:"sdi_gxp_bingsource",createLayerRecord:function(config){var record=sdi.gxp.plugins.BingSource.superclass.createLayerRecord.apply(this,arguments);record.json=config;return record;}});Ext.preg(sdi.gxp.plugins.BingSource.prototype.ptype,sdi.gxp.plugins.BingSource);Ext.namespace("sdi.gxp.plugins");sdi.gxp.plugins.GoogleSource=Ext.extend(gxp.plugins.GoogleSource,{ptype:"sdi_gxp_googlesource",createLayerRecord:function(config){var record=sdi.gxp.plugins.GoogleSource.superclass.createLayerRecord.apply(this,arguments);record.json=config;return record;}});Ext.preg(sdi.gxp.plugins.GoogleSource.prototype.ptype,sdi.gxp.plugins.GoogleSource);Ext.namespace("sdi.gxp.plugins");sdi.gxp.plugins.OSMSource=Ext.extend(gxp.plugins.OSMSource,{ptype:"sdi_gxp_osmsource",createLayerRecord:function(config){var record=sdi.gxp.plugins.OSMSource.superclass.createLayerRecord.apply(this,arguments);record.json=config;return record;},createStore:function(){var options={projection:"EPSG:900913",maxExtent:new OpenLayers.Bounds(-128*156543.0339,-128*156543.0339,128*156543.0339,128*156543.0339),maxResolution:156543.03390625,numZoomLevels:19,units:"m",buffer:1,transitionEffect:"resize"};var layers=[new OpenLayers.Layer.OSM("OpenStreetMap",["https://a.tile.openstreetmap.org/${z}/${x}/${y}.png","https://b.tile.openstreetmap.org/${z}/${x}/${y}.png","https://c.tile.openstreetmap.org/${z}/${x}/${y}.png"],OpenLayers.Util.applyDefaults({attribution:this.mapnikAttribution,type:"mapnik"},options))];this.store=new GeoExt.data.LayerStore({layers:layers,fields:[{name:"source",type:"string"},{name:"name",type:"string",mapping:"type"},{name:"abstract",type:"string",mapping:"attribution"},{name:"group",type:"string",defaultValue:"background"},{name:"fixed",type:"boolean",defaultValue:true},{name:"selected",type:"boolean"}]});this.store.each(function(l){l.set("group","background");});this.fireEvent("ready",this);}});Ext.preg(sdi.gxp.plugins.OSMSource.prototype.ptype,sdi.gxp.plugins.OSMSource);Ext.namespace("sdi.gxp.plugins");sdi.gxp.plugins.LoadingIndicator=Ext.extend(gxp.plugins.LoadingIndicator,{ptype:"sdi_gxp_loadingindicator",init:function(target){var map=target instanceof GeoExt.MapPanel?target.map:target.mapPanel.map;map.events.register("preaddlayer",this,function(e){var layer=e.layer;if(layer instanceof OpenLayers.Layer.WMS||layer instanceof OpenLayers.Layer.WMTS){layer.events.on({"loadstart":function(){this.layerCount++;if(!this.busyMask){this.busyMask=new Ext.LoadMask(map.div,{msg:this.loadingMapMessage});}
this.busyMask.show();if(this.onlyShowOnFirstLoad===true){layer.events.unregister("loadstart",this,arguments.callee);}},"loadend":function(){this.layerCount--;if(this.layerCount===0){this.busyMask.hide();}
if(this.onlyShowOnFirstLoad===true){layer.events.unregister("loadend",this,arguments.callee);}},scope:this});}});}});Ext.preg(sdi.gxp.plugins.LoadingIndicator.prototype.ptype,sdi.gxp.plugins.LoadingIndicator);Ext.namespace("sdi.gxp.plugins");sdi.gxp.plugins.WMSSource=Ext.extend(gxp.plugins.WMSSource,{ptype:"sdi_gxp_wmssource",createLayerRecord:function(config){var record=sdi.gxp.plugins.WMSSource.superclass.createLayerRecord.apply(this,arguments);if(!jQuery.isEmptyObject(record)){record.data.layer.attribution=config.attribution;record.data.layer.isindoor=config.isindoor;record.data.layer.levelfield=config.levelfield;record.data.layer.servertype=config.servertype;}
return record;}});Ext.preg(sdi.gxp.plugins.WMSSource.prototype.ptype,sdi.gxp.plugins.WMSSource);Ext.namespace("sdi.gxp.plugins");sdi.gxp.plugins.GoogleGeocoder=Ext.extend(gxp.plugins.Tool,{ptype:"sdi_gxp_googlegeocoder",updateField:"viewport",init:function(target){var combo=new sdi.gxp.form.GoogleGeocoderComboBox(Ext.apply({listeners:{select:this.onComboSelect,scope:this}},this.outputConfig));var bounds=target.mapPanel.map.restrictedExtent;if(bounds&&!combo.bounds){target.on({ready:function(){combo.bounds=bounds.clone().transform(target.mapPanel.map.getProjectionObject(),new OpenLayers.Projection("EPSG:4326"));}});}
this.combo=combo;return sdi.gxp.plugins.GoogleGeocoder.superclass.init.apply(this,arguments);},addOutput:function(config){return sdi.gxp.plugins.GoogleGeocoder.superclass.addOutput.call(this,this.combo);},onComboSelect:function(combo,record){if(this.updateField){var map=this.target.mapPanel.map;var location=record.get(this.updateField).clone().transform(new OpenLayers.Projection("EPSG:4326"),map.getProjectionObject());if(location instanceof OpenLayers.Bounds){map.zoomToExtent(location,true);}else{map.setCenter(location);}}}});Ext.preg(sdi.gxp.plugins.GoogleGeocoder.prototype.ptype,sdi.gxp.plugins.GoogleGeocoder);Ext.namespace("gxp.plugins");gxp.plugins.WMSGetFeatureInfo=Ext.extend(gxp.plugins.Tool,{ptype:"gxp_wmsgetfeatureinfo",outputTarget:"map",popupCache:null,infoActionTip:"Get Feature Info",popupTitle:"Feature Info",buttonText:"Identify",format:"html",addActions:function(){this.popupCache={};var actions=gxp.plugins.WMSGetFeatureInfo.superclass.addActions.call(this,[{tooltip:this.infoActionTip,iconCls:"gxp-icon-getfeatureinfo",buttonText:this.buttonText,toggleGroup:this.toggleGroup,enableToggle:true,allowDepress:true,toggleHandler:function(button,pressed){for(var i=0,len=info.controls.length;i<len;i++){if(pressed){info.controls[i].activate();}else{info.controls[i].deactivate();}}}}]);var infoButton=this.actions[0].items[0];var info={controls:[]};var updateInfo=function(){var queryableLayers=this.target.mapPanel.layers.queryBy(function(x){return x.get("queryable");});var map=this.target.mapPanel.map;var control;for(var i=0,len=info.controls.length;i<len;i++){control=info.controls[i];control.deactivate();control.destroy();}
info.controls=[];queryableLayers.each(function(x){var layer=x.getLayer();var vendorParams=Ext.apply({},this.vendorParams),param;if(this.layerParams){for(var i=this.layerParams.length-1;i>=0;--i){param=this.layerParams[i].toUpperCase();vendorParams[param]=layer.params[param];}}
var infoFormat=x.get("infoFormat");if(infoFormat===undefined){infoFormat=this.format=="html"?"text/html":"application/vnd.ogc.gml";}
var control=new OpenLayers.Control.WMSGetFeatureInfo(Ext.applyIf({url:layer.url,queryVisible:true,layers:[layer],infoFormat:infoFormat,vendorParams:vendorParams,eventListeners:{getfeatureinfo:function(evt){var title=x.get("title")||x.get("name");if(infoFormat=="text/html"){var match=evt.text.match(/<body[^>]*>([\s\S]*)<\/body>/);if(match&&!match[1].match(/^\s*$/)){this.displayPopup(evt,title,match[1]);}}else if(infoFormat=="text/plain"){this.displayPopup(evt,title,'<pre>'+evt.text+'</pre>');}else if(evt.features&&evt.features.length>0){this.displayPopup(evt,title,null,x.get("getFeatureInfo"));}},scope:this}},this.controlOptions));map.addControl(control);info.controls.push(control);if(infoButton.pressed){control.activate();}},this);};this.target.mapPanel.layers.on("update",updateInfo,this);this.target.mapPanel.layers.on("add",updateInfo,this);this.target.mapPanel.layers.on("remove",updateInfo,this);return actions;},displayPopup:function(evt,title,text,featureinfo){var popup;var popupKey=evt.xy.x+"."+evt.xy.y;featureinfo=featureinfo||{};if(!(popupKey in this.popupCache)){popup=this.addOutput({xtype:"gx_popup",title:this.popupTitle,layout:"accordion",fill:false,autoScroll:true,location:evt.xy,map:this.target.mapPanel,width:this.popupWidth,height:this.popupHeight,defaults:{layout:"fit",autoScroll:true,autoHeight:true,autoWidth:true,collapsible:true}});popup.on({close:(function(key){return function(panel){delete this.popupCache[key];};})(popupKey),scope:this});this.popupCache[popupKey]=popup;}else{popup=this.popupCache[popupKey];}
var features=evt.features,config=[];if(!text&&features){var feature;for(var i=0,ii=features.length;i<ii;++i){feature=features[i];config.push(Ext.apply({xtype:"gxp_editorgrid",readOnly:true,listeners:{'beforeedit':function(e){return false;}},title:feature.fid?feature.fid:title,feature:feature,fields:featureinfo.fields,propertyNames:featureinfo.propertyNames},this.itemConfig));}}else if(text){config.push(Ext.apply({title:title,html:text},this.itemConfig));}
popup.add(config);popup.doLayout();}});Ext.preg(gxp.plugins.WMSGetFeatureInfo.prototype.ptype,gxp.plugins.WMSGetFeatureInfo);Ext.namespace("sdi.gxp.widgets");sdi.gxp.ScaleOverlay=Ext.extend(gxp.ScaleOverlay,{addScaleLine:function(){var scaleLinePanel=new Ext.BoxComponent({autoEl:{tag:"div",cls:"olControlScaleLine overlay-element overlay-scaleline"}});this.on("afterlayout",function(){scaleLinePanel.getEl().dom.style.position='relative';scaleLinePanel.getEl().dom.style.display='inline';this.getEl().on("click",this.stopMouseEvents,this);this.getEl().on("mousedown",this.stopMouseEvents,this);},this);scaleLinePanel.on('render',function(){var scaleLine=new OpenLayers.Control.ScaleLine({bottomInUnits:SdiScaleLineParams.bottomInUnits,bottomOutUnits:SdiScaleLineParams.bottomOutUnits,topInUnits:SdiScaleLineParams.topInUnits,topOutUnits:SdiScaleLineParams.topOutUnits,geodesic:true,div:scaleLinePanel.getEl().dom});this.map.addControl(scaleLine);scaleLine.activate();},this);this.add(scaleLinePanel);}});Ext.reg('sdi_gxp_scaleoverlay',sdi.gxp.ScaleOverlay);Ext.namespace("gxp");var sourceConfig;var layerConfig;gxp.Viewer.prototype.addExtraLayer=function(lsourceConfig,llayerConfig){sourceConfig=lsourceConfig;layerConfig=llayerConfig;if(this.sources[sourceConfig.id]===undefined){this.sources[sourceConfig.id]=sourceConfig;}
this.initialConfig.map.layers.push(layerConfig);var queue=[];queue.push(this.createSourceLoader(sourceConfig.id));return queue;};gxp.Viewer.prototype.reactivate=function(){Ext.QuickTips.init();var mapConfig=this.initialConfig.map;if(mapConfig&&mapConfig.layers){var conf,source,record,baseRecords=[],overlayRecords=[];conf=mapConfig.layers[mapConfig.layers.length-1];source=this.layerSources[conf.source];if(source){if(source.id===sourceConfig.id){record=source.createLayerRecord(conf);if(record){if(record.get("group")==="background"){baseRecords.push(record);}else{overlayRecords.push(record);}}}}
var panel=this.mapPanel;var records=baseRecords.concat(overlayRecords);if(records.length){panel.layers.add(records);}}
this.checkLayerRecordQueue();return record;};gxp.Viewer.prototype.initMapPanel=function(){var config=Ext.apply({},this.initialConfig.map);var mapConfig={};if(this.initialConfig.map){var props="theme,controls,resolutions,projection,units,maxExtent,restrictedExtent,maxResolution,numZoomLevels,panMethod".split(",");var prop;for(var i=props.length-1;i>=0;--i){prop=props[i];if(prop in config){mapConfig[prop]=config[prop];delete config[prop];}}}
this.mapPanel=Ext.ComponentMgr.create(Ext.applyIf({xtype:config.xtype||"gx_mappanel",map:Ext.applyIf({theme:mapConfig.theme||null,controls:mapConfig.controls||[new OpenLayers.Control.Navigation({zoomWheelOptions:{interval:250},dragPanOptions:{enableKinetic:true}}),new OpenLayers.Control.PanPanel(),new OpenLayers.Control.ZoomPanel(),new OpenLayers.Control.Attribution()],maxExtent:mapConfig.maxExtent&&OpenLayers.Bounds.fromArray(mapConfig.maxExtent),restrictedExtent:mapConfig.restrictedExtent&&OpenLayers.Bounds.fromArray(mapConfig.restrictedExtent),numZoomLevels:mapConfig.numZoomLevels||20},mapConfig),center:config.center&&new OpenLayers.LonLat(config.center[0],config.center[1]),resolutions:config.resolutions,forceInitialExtent:true,layers:[],items:this.mapItems,plugins:this.mapPlugins,tbar:config.tbar||new Ext.Toolbar({hidden:true})},config));this.mapPanel.getTopToolbar().on({afterlayout:this.mapPanel.map.updateSize,show:this.mapPanel.map.updateSize,hide:this.mapPanel.map.updateSize,scope:this.mapPanel.map});this.mapPanel.layers.on({"add":function(store,records){var record;for(var i=records.length-1;i>=0;i--){record=records[i];if(record.get("selected")===true){this.selectLayer(record);}}},"remove":function(store,record){if(record.get("selected")===true){this.selectLayer();}},scope:this});};Ext.namespace("sdi.gxp.form");sdi.gxp.form.GoogleGeocoderComboBox=Ext.extend(gxp.form.GoogleGeocoderComboBox,{xtype:"sdi_gxp_googlegeocodercombo",queryDelay:100,valueField:"viewport",displayField:"address",initComponent:function(){this.disabled=true;var ready=!!(window.google&&google.maps);if(!ready){if(!gxp.plugins||!gxp.plugins.GoogleSource){throw new Error("The gxp.form.GoogleGeocoderComboBox requires the gxp.plugins.GoogleSource or the Google Maps V3 API to be loaded.");}
gxp.plugins.GoogleSource.loader.onLoad({otherParams:gxp.plugins.GoogleSource.prototype.otherParams,callback:this.prepGeocoder,errback:function(){throw new Error("The Google Maps script failed to load within the given timeout.");},scope:this});}else{window.setTimeout((function(){this.prepGeocoder();}).createDelegate(this),0);}
this.store=new Ext.data.JsonStore({root:"results",fields:[{name:"address",type:"string"},{name:"location"},{name:"viewport"}],autoLoad:false});this.on({focus:function(){this.clearValue();},scope:this});return sdi.gxp.form.GoogleGeocoderComboBox.superclass.initComponent.apply(this,arguments);},prepGeocoder:function(){var geocoder=new google.maps.Geocoder();var api={};api[Ext.data.Api.actions.read]=true;var proxy=new Ext.data.DataProxy({api:api});var combo=this;var getBounds=(function(){var bounds=this.bounds;if(bounds){if(bounds instanceof OpenLayers.Bounds){bounds=bounds.toArray();}
bounds=new google.maps.LatLngBounds(new google.maps.LatLng(bounds[1],bounds[0]),new google.maps.LatLng(bounds[3],bounds[2]));}
return bounds;}).createDelegate(this);proxy.doRequest=function(action,rs,params,reader,callback,scope,options){geocoder.geocode({address:params.query},function(results,status){var readerResult;if(status===google.maps.GeocoderStatus.OK||status===google.maps.GeocoderStatus.ZERO_RESULTS){try{results=combo.transformResults(results);readerResult=reader.readRecords({results:results});}catch(err){combo.fireEvent("exception",combo,"response",action,options,status,err);}}else{combo.fireEvent("exception",combo,"remote",action,options,status,null);}
if(readerResult){callback.call(scope,readerResult,options,true);}else{callback.call(scope,null,options,false);}});};this.store.proxy=proxy;if(this.initialConfig.disabled!=true){this.enable();}}});Ext.reg('sdi_gxp_googlegeocodercombobox',sdi.gxp.form.GoogleGeocoderComboBox);Ext.namespace("sdi.geoext.data");sdi.geoext.data.PrintProvider=Ext.extend(GeoExt.data.PrintProvider,{loadCapabilities:function(){if(!this.url){return;}
var url=this.url+"info.json";Ext.Ajax.request({url:url,method:"GET",disableCaching:false,success:function(response){this.capabilities=Ext.decode(response.responseText);this.capabilities.createURL=this.createurl;this.capabilities.printURL=this.printurl;this.loadStores();},params:this.initialConfig.baseParams,scope:this});}});Ext.namespace("sdi.geoext.ux");sdi.geoext.ux.PrintPreview=Ext.extend(GeoExt.ux.PrintPreview,{initComponent:function(){var printMapPanelOptions={sourceMap:this.sourceMap,printProvider:this.printProvider};if(this.printMapPanel){if(!(this.printMapPanel instanceof GeoExt.PrintMapPanel)){printMapPanelOptions.xtype="gx_printmappanel";this.printMapPanel=new sdi.geoext.widgets.PrintMapPanel(Ext.applyIf(this.printMapPanel,printMapPanelOptions));}}else{this.printMapPanel=new sdi.geoext.widgets.PrintMapPanel(printMapPanelOptions);}
this.sourceMap=this.printMapPanel.sourceMap;this.printProvider=this.printMapPanel.printProvider;this.form=this.createForm();if(!this.items){this.items=[];}
this.items.push(this.createToolbar(),{xtype:"container",cls:"gx-printpreview",autoHeight:this.autoHeight,autoWidth:this.autoWidth,items:[this.form,this.printMapPanel]});GeoExt.ux.PrintPreview.superclass.initComponent.call(this);this.addMapOverlay&&this.printMapPanel.add(this.createMapOverlay());this.printMapPanel.on({"resize":this.updateSize,scope:this});this.on({"render":function(){if(!this.busyMask){this.busyMask=new Ext.LoadMask(this.getEl(),{msg:this.creatingPdfText});}
this.printProvider.on({"beforeprint":this.busyMask.show,"print":this.busyMask.hide,"printexception":this.busyMask.hide,scope:this.busyMask});},scope:this});}});Ext.namespace("sdi.geoext.widgets");sdi.geoext.widgets.PrintMapPanel=Ext.extend(GeoExt.PrintMapPanel,{initComponent:function(){if(this.sourceMap instanceof GeoExt.MapPanel){this.sourceMap=this.sourceMap.map;}
if(!this.map){this.map={};}
Ext.applyIf(this.map,{projection:this.sourceMap.getProjection(),maxExtent:this.sourceMap.getMaxExtent(),maxResolution:this.sourceMap.getMaxResolution(),units:this.sourceMap.getUnits()});if(!(this.printProvider instanceof GeoExt.data.PrintProvider)){this.printProvider=new GeoExt.data.PrintProvider(this.printProvider);}
this.printPage=new GeoExt.data.PrintPage({printProvider:this.printProvider});this.previewScales=new Ext.data.Store();this.previewScales.add(this.printProvider.scales.getRange());this.layers=[];var layer;Ext.each(this.sourceMap.layers,function(layer){if(layer.getVisibility()===true){if(layer instanceof OpenLayers.Layer.Vector){var features=layer.features,clonedFeatures=new Array(features.length),vector=new OpenLayers.Layer.Vector(layer.name);for(var i=0,ii=features.length;i<ii;++i){clonedFeatures[i]=features[i].clone();}
vector.addFeatures(clonedFeatures,{silent:true});this.layers.push(vector);}else{var l=layer.clone();try{l.setVisibility(layer.getVisibility());}catch(err)
{}
this.layers.push(l);}}},this);this.extent=this.sourceMap.getExtent();GeoExt.PrintMapPanel.superclass.initComponent.call(this);}});Ext.namespace("sdi.plugins");sdi.plugins.SearchCatalog=Ext.extend(gxp.plugins.Tool,{ptype:"sdi_searchcatalog",addActionMenuText:"Search catalog",addActionTip:"Search catalog",addButtonText:"Search catalog",untitledText:"Untitled",doneText:"Done",constructor:function(config){gxp.plugins.AddLayers.superclass.constructor.apply(this,arguments);},addActions:function(){var commonOptions={tooltip:this.addActionTip,text:this.addActionText,menuText:this.addActionMenuText,disabled:true,iconCls:"gxp-icon-addlayersfromcatalog"};options=Ext.apply(commonOptions,{handler:this.showCatalogFrame,scope:this});var actions=gxp.plugins.AddLayers.superclass.addActions.apply(this,[options]);this.target.on("ready",function(){actions[0].enable();},this);return actions;},showCatalogFrame:function(){SqueezeBox.initialize({});SqueezeBox.resize({x:this.initialConfig.iwidth,y:this.initialConfig.iheight});SqueezeBox.setContent('iframe',this.initialConfig.url);}});Ext.preg(sdi.plugins.SearchCatalog.prototype.ptype,sdi.plugins.SearchCatalog);Ext.namespace("sdi.plugins");sdi.plugins.LayerDetailSheet=Ext.extend(gxp.plugins.Tool,{ptype:"sdi_layerdetailsheet",layerDetailMenuText:"Layer details sheet",layerDetailActionTip:"Layer details sheet",addActions:function(){var selectedLayer;var actions=sdi.plugins.LayerDetailSheet.superclass.addActions.apply(this,[{menuText:this.layerDetailMenuText,iconCls:"gxp-icon-getfeatureinfo",disabled:true,tooltip:this.layerDetailActionTip,handler:function(){var record=selectedLayer;SqueezeBox.initialize({});SqueezeBox.resize({x:this.initialConfig.iwidth,y:this.initialConfig.iheight});SqueezeBox.setContent('iframe',record.json.href);},scope:this}]);var layerDetailAction=actions[0];this.target.on("layerselectionchange",function(record){selectedLayer=record;layerDetailAction.setDisabled(!record||!record.json||!record.json.href);},this);return actions;}});Ext.preg(sdi.plugins.LayerDetailSheet.prototype.ptype,sdi.plugins.LayerDetailSheet);Ext.namespace("sdi.plugins");sdi.plugins.LayerDownload=Ext.extend(gxp.plugins.Tool,{ptype:"sdi_layerdownload",layerDownloadMenuText:"Download",layerDownloadActionTip:"Download",addActions:function(){var selectedLayer;var actions=sdi.plugins.LayerDownload.superclass.addActions.apply(this,[{menuText:this.layerDownloadMenuText,iconCls:"gxp-icon-filebrowse",disabled:true,tooltip:this.layerDownloadActionTip,handler:function(){var record=selectedLayer;SqueezeBox.initialize({});SqueezeBox.resize({x:this.initialConfig.iwidth,y:this.initialConfig.iheight});SqueezeBox.setContent('iframe',record.json.download+'&origin=map');},scope:this}]);var layerDownloadAction=actions[0];this.target.on("layerselectionchange",function(record){selectedLayer=record;layerDownloadAction.setDisabled(!record||!record.json||!record.json.download);},this);return actions;}});Ext.preg(sdi.plugins.LayerDownload.prototype.ptype,sdi.plugins.LayerDownload);Ext.namespace("sdi.plugins");sdi.plugins.LayerOrder=Ext.extend(gxp.plugins.Tool,{ptype:"sdi_layerorder",layerOrderMenuText:"Order",layerOrderActionTip:"Order",addActions:function(){var selectedLayer;var actions=sdi.plugins.LayerDownload.superclass.addActions.apply(this,[{menuText:this.layerOrderMenuText,iconCls:"gxp-icon-addnote",disabled:true,tooltip:this.layerOrderActionTip,handler:function(){var record=selectedLayer;SqueezeBox.initialize({});SqueezeBox.resize({x:this.initialConfig.iwidth,y:this.initialConfig.iheight});SqueezeBox.setContent('iframe',record.json.order);},scope:this}]);var layerOrderAction=actions[0];this.target.on("layerselectionchange",function(record){selectedLayer=record;layerOrderAction.setDisabled(!record||!record.json||!record.json.order);},this);return actions;}});Ext.preg(sdi.plugins.LayerOrder.prototype.ptype,sdi.plugins.LayerOrder);Ext.namespace("sdi.gxp.plugins");sdi.gxp.plugins.OLSource=Ext.extend(gxp.plugins.OLSource,{ptype:"sdi_gxp_olsource",createLayerRecord:function(config){var record=sdi.gxp.plugins.OLSource.superclass.createLayerRecord.apply(this,arguments);record.json=config;return record;}});Ext.preg(sdi.gxp.plugins.OLSource.prototype.ptype,sdi.gxp.plugins.OLSource);Ext.namespace("sdi.widgets");sdi.widgets.IndoorLevelSlider=Ext.extend(Ext.slider.SingleSlider,{map:null,delay:5,aggressive:false,value:null,baseCls:"sdi-indoorlevelslider",levels:[],style:"position: absolute; right: 50px; top: 20px; z-index: 100;",constructor:function(config){config.value=(config.value!==undefined)?config.value:config.minValue;this.addEvents("indoorlevelsliderready","indoorlevelchanged");sdi.widgets.IndoorLevelSlider.superclass.constructor.call(this,config);},initComponent:function(){sdi.widgets.IndoorLevelSlider.superclass.initComponent.call(this);if(this.map){if(this.map instanceof GeoExt.MapPanel){this.map=this.map.map;}}
if(this.aggressive===true){this.on('change',this.changeIndoorLevel,this);}else{this.on('changecomplete',this.changeIndoorLevel,this);}},onRender:function(){sdi.widgets.IndoorLevelSlider.superclass.onRender.apply(this,arguments);this.el.addClass(this.baseCls);},changeIndoorLevel:function(slider,value){if(!value){value=this.getValue();}
this.setValue(value);var layers=this.map.layers;for(var a=0;a<layers.length;a++){this.redrawLayer(layers[a]);}
this.fireEvent("indoorlevelchanged",this);this.map.events.triggerEvent("indoorlevelchanged",value);},changeIndoorLevelByCode:function(slider,code){if(!code)
return;slider.levels.forEach(function(level){if(level.code===code)
slider.changeIndoorLevel(slider,slider.levels.indexOf(level));})},redrawLayer:function(layer){var level=this.getLevel();if(layer.isindoor&&layer.isindoor==1&&layer.levelfield){var servertype=layer.servertype;if(servertype==1||servertype==3){var cql_filter;var new_filter=layer.levelfield+"='"+level.code+"'";if(typeof(layer.params.CQL_FILTER)!='undefined'){if(layer.params.CQL_FILTER.match(/INTERSECTS/g)){var re=new RegExp(" AND "+layer.levelfield+"='.+'","g");cql_filter=layer.params.CQL_FILTER.replace(re,"");cql_filter=cql_filter+" AND "+new_filter;}else{cql_filter=new_filter;}}else{cql_filter=new_filter;}
layer.params.CQL_FILTER=cql_filter;}
if(servertype==2||servertype==3){layer.mergeNewParams({'layerDefs':"{\""+layer.params.LAYERS+"\":\""+layer.levelfield+"='"+level.code+"'\"}"});}
layer.redraw(true);this.map.events.triggerEvent("layerredrawn",{layer:layer});}},getLevel:function(value){if(!value){value=this.getValue();}
return levels[value];},addToMapPanel:function(panel){this.on({render:function(){var el=this.getEl();el.setStyle({position:"absolute",zIndex:panel.map.Z_INDEX_BASE.Control});el.on({mousedown:this.stopMouseEvents,click:this.stopMouseEvents});this.el.addClass(this.baseCls);},afterrender:function(){this.map=panel.map;panel.map.indoorlevelslider=this;this.map.events.on({"addlayer":function(e){this.indoorlevelslider.redrawLayer(e.layer);}});this.map.indoorlevelslider.changeIndoorLevel(this);},scope:this});},removeFromMapPanel:function(panel){var el=this.getEl();el.un({mousedown:this.stopMouseEvents,click:this.stopMouseEvents,scope:this});},stopMouseEvents:function(e){e.stopEvent();}});Ext.reg('sdi_indoorlevelslider',sdi.widgets.IndoorLevelSlider);Ext.namespace("sdi.widgets");sdi.widgets.IndoorLevelSliderTip=Ext.extend(GeoExt.SliderTip,{template:'<div>{level}</div>',levels:[],compiledTemplate:null,constructor:function(config){levels=config.levels;sdi.widgets.IndoorLevelSliderTip.superclass.constructor.call(this,config);},init:function(slider){var me=this;this.compiledTemplate=new Ext.Template(this.template);sdi.widgets.IndoorLevelSliderTip.superclass.init.call(this,slider);},getText:function(thumb){var level=levels[thumb.value].label;var data={level:level};return this.compiledTemplate.apply(data);}});function predefinedPerimeter(item){this.item=item;};predefinedPerimeter.prototype.init=function(userrestriction){this.userrestriction=userrestriction;this.initPerimeterLayer();this.initSelectLayer();this.initSelectControl();};predefinedPerimeter.prototype.initPerimeterLayer=function(){var layerconfig={type:"OpenLayers.Layer.WMS",name:this.item.maplayername,transparent:true,isindoor:this.item.isindoor,servertype:this.item.server,levelfield:this.item.levelfield,opacity:this.item.opacity,source:this.item.source,tiled:false,title:"perimeterLayer",iwidth:"360",iheight:"360",visibility:true};var sourceconfig={id:this.item.source,ptype:"sdi_gxp_wmssource",hidden:"true",url:this.item.wmsurl};if(typeof(this.userrestriction)!=='undefined'){var exp=new OpenLayers.Format.WKT().write(this.userrestriction);if(this.item.server==="1"){layerconfig.cql_filter="INTERSECTS("+this.item.featuretypefieldgeometry+","+exp+")";}}
var queue=app.addExtraLayer(sourceconfig,layerconfig);gxp.util.dispatch(queue,app.reactivate,app);};predefinedPerimeter.prototype.initSelectLayer=function(){selectLayer=new OpenLayers.Layer.Vector("Selection",{srsName:app.mapPanel.map.projection,projection:app.mapPanel.map.projection});app.mapPanel.map.addLayer(selectLayer);app.mapPanel.map.events.register('addlayer',this,function(){if(app.mapPanel.map.getLayersByName("Selection").length>0){app.mapPanel.map.setLayerIndex(selectLayer,app.mapPanel.map.getNumLayers());}});};predefinedPerimeter.prototype.initSelectControl=function(){selectControl=new OpenLayers.Control.GetFeature({protocol:new OpenLayers.Protocol.WFS({version:"1.0.0",url:this.item.wfsurl,srsName:app.mapPanel.map.projection,featureType:this.item.featuretypename,featurePrefix:this.item.prefix,featureNS:this.item.namespace,geometryName:this.item.featuretypefieldgeometry}),box:false,click:true,toggle:true,multipleKey:"ctrlKey",clickout:false});selectControl.protocol.defaultFilter=this.getSelectControlFilter();if(this.item.featuretypefieldlevel&&typeof(app.mapPanel.map.indoorlevelslider)!=='undefined'){app.mapPanel.map.events.register("indoorlevelchanged",this,function(){if(selectLayer)
selectLayer.removeAllFeatures();if(selectControl&&selectControl.protocol){selectControl.protocol.defaultFilter=this.getSelectControlFilter();}});}
app.mapPanel.map.addControl(selectControl);selectControl.activate();};predefinedPerimeter.prototype.getIndoorLevelFilter=function(){selectControl.fieldlevel=this.item.prefix+':'+this.item.featuretypefieldlevel;return new OpenLayers.Filter.Comparison({type:OpenLayers.Filter.Comparison.EQUAL_TO,property:selectControl.fieldlevel,value:app.mapPanel.map.indoorlevelslider.getLevel().code});};predefinedPerimeter.prototype.getUserPerimeterFilter=function(){var g=this.userrestriction.geometry;return new OpenLayers.Filter.Spatial({type:OpenLayers.Filter.Spatial.INTERSECTS,value:g});};predefinedPerimeter.prototype.getSelectControlFilter=function(){var merged,userfilter,levelfilter;if(typeof(this.userrestriction)!=='undefined'){userfilter=this.getUserPerimeterFilter();}
if(this.item.featuretypefieldlevel&&typeof(app.mapPanel.map.indoorlevelslider)!=='undefined'){levelfilter=this.getIndoorLevelFilter();}
if(levelfilter&&userfilter){merged=new OpenLayers.Filter.Logical({type:OpenLayers.Filter.Logical.AND,filters:[levelfilter,userfilter]});}else{merged=levelfilter||userfilter||undefined;}
return merged;};predefinedPerimeter.prototype.setListenerFeatureSelected=function(f){selectControl.events.register("featureselected",this,f);};predefinedPerimeter.prototype.setListenerFeatureUnSelected=function(f){selectControl.events.register("featureunselected",this,f);};predefinedPerimeter.prototype.setListenerIndoorLevelChanged=function(f){app.mapPanel.map.events.register("indoorlevelchanged",this,f);};predefinedPerimeter.prototype.setListenerFeatureAdded=function(f){selectLayer.events.register("featureadded",selectLayer,f);};